
lwip_212.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000309c  08012e60  08012e60  00022e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015efc  08015efc  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08015efc  08015efc  00025efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f04  08015f04  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f04  08015f04  00025f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f08  08015f08  00025f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08015f0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a7c8  20000084  08015f90  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a84c  08015f90  0003a84c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000339a1  00000000  00000000  000300b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006489  00000000  00000000  00063a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d8  00000000  00000000  00069ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b0  00000000  00000000  0006b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031ddc  00000000  00000000  0006cd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002127b  00000000  00000000  0009eb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c5d9  00000000  00000000  000bfdbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cc398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006568  00000000  00000000  001cc414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	08012e48 	.word	0x08012e48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	08012e48 	.word	0x08012e48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f94b 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f000 f806 	bl	80005fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f011 fb6e 	bl	8011cd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f965 	bl	80008ea <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000638:	f000 f92d 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000001c 	.word	0x2000001c
 8000654:	20000004 	.word	0x20000004
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	20003f98 	.word	0x20003f98

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20003f98 	.word	0x20003f98

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff ffee 	bl	8000684 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_Delay+0x40>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffde 	bl	8000684 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000004 	.word	0x20000004

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <__NVIC_SetPriorityGrouping+0x40>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	4313      	orrs	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x40>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	05fa0000 	.word	0x05fa0000

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <__NVIC_EnableIRQ+0x38>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff29 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff3e 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff31 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000914:	4ba9      	ldr	r3, [pc, #676]	; (8000bbc <HAL_ETH_Init+0x2b8>)
 8000916:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e183      	b.n	8000c32 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d106      	bne.n	8000944 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f010 fccc 	bl	80112dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b9e      	ldr	r3, [pc, #632]	; (8000bc0 <HAL_ETH_Init+0x2bc>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	4a9d      	ldr	r2, [pc, #628]	; (8000bc0 <HAL_ETH_Init+0x2bc>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	6453      	str	r3, [r2, #68]	; 0x44
 8000950:	4b9b      	ldr	r3, [pc, #620]	; (8000bc0 <HAL_ETH_Init+0x2bc>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800095c:	4b99      	ldr	r3, [pc, #612]	; (8000bc4 <HAL_ETH_Init+0x2c0>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4a98      	ldr	r2, [pc, #608]	; (8000bc4 <HAL_ETH_Init+0x2c0>)
 8000962:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000966:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000968:	4b96      	ldr	r3, [pc, #600]	; (8000bc4 <HAL_ETH_Init+0x2c0>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a1b      	ldr	r3, [r3, #32]
 8000970:	4994      	ldr	r1, [pc, #592]	; (8000bc4 <HAL_ETH_Init+0x2c0>)
 8000972:	4313      	orrs	r3, r2
 8000974:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0201 	orr.w	r2, r2, #1
 8000988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800098c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800098e:	f7ff fe79 	bl	8000684 <HAL_GetTick>
 8000992:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000994:	e011      	b.n	80009ba <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000996:	f7ff fe75 	bl	8000684 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009a4:	d909      	bls.n	80009ba <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2203      	movs	r2, #3
 80009aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e13b      	b.n	8000c32 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e4      	bne.n	8000996 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f023 031c 	bic.w	r3, r3, #28
 80009da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80009dc:	f001 fd92 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 80009e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	4a78      	ldr	r2, [pc, #480]	; (8000bc8 <HAL_ETH_Init+0x2c4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d908      	bls.n	80009fc <HAL_ETH_Init+0xf8>
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <HAL_ETH_Init+0x2c8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d804      	bhi.n	80009fc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e027      	b.n	8000a4c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	4a73      	ldr	r2, [pc, #460]	; (8000bcc <HAL_ETH_Init+0x2c8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d908      	bls.n	8000a16 <HAL_ETH_Init+0x112>
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4a72      	ldr	r2, [pc, #456]	; (8000bd0 <HAL_ETH_Init+0x2cc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d804      	bhi.n	8000a16 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f043 030c 	orr.w	r3, r3, #12
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	e01a      	b.n	8000a4c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4a6d      	ldr	r2, [pc, #436]	; (8000bd0 <HAL_ETH_Init+0x2cc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d903      	bls.n	8000a26 <HAL_ETH_Init+0x122>
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4a6c      	ldr	r2, [pc, #432]	; (8000bd4 <HAL_ETH_Init+0x2d0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d911      	bls.n	8000a4a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4a6a      	ldr	r2, [pc, #424]	; (8000bd4 <HAL_ETH_Init+0x2d0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d908      	bls.n	8000a40 <HAL_ETH_Init+0x13c>
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4a69      	ldr	r2, [pc, #420]	; (8000bd8 <HAL_ETH_Init+0x2d4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d804      	bhi.n	8000a40 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e005      	b.n	8000a4c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	61fb      	str	r3, [r7, #28]
 8000a48:	e000      	b.n	8000a4c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000a4a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a58:	2100      	movs	r1, #0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 fc19 	bl	8001292 <HAL_ETH_WritePHYRegister>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00b      	beq.n	8000a7e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a6a:	6939      	ldr	r1, [r7, #16]
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 fca5 	bl	80013bc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2201      	movs	r2, #1
 8000a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e0d9      	b.n	8000c32 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	f7ff fe0c 	bl	800069c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 80a7 	beq.w	8000bdc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a8e:	f7ff fdf9 	bl	8000684 <HAL_GetTick>
 8000a92:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 fb90 	bl	80011c2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000aa2:	f7ff fdef 	bl	8000684 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d90f      	bls.n	8000ad4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fc7e 	bl	80013bc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e0ae      	b.n	8000c32 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0da      	beq.n	8000a94 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 fbd4 	bl	8001292 <HAL_ETH_WritePHYRegister>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000af4:	6939      	ldr	r1, [r7, #16]
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 fc60 	bl	80013bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b04:	2301      	movs	r3, #1
 8000b06:	e094      	b.n	8000c32 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000b08:	f7ff fdbc 	bl	8000684 <HAL_GetTick>
 8000b0c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	461a      	mov	r2, r3
 8000b14:	2101      	movs	r1, #1
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 fb53 	bl	80011c2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000b1c:	f7ff fdb2 	bl	8000684 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d90f      	bls.n	8000b4e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b32:	6939      	ldr	r1, [r7, #16]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 fc41 	bl	80013bc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e071      	b.n	8000c32 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0da      	beq.n	8000b0e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	211f      	movs	r1, #31
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fb2e 	bl	80011c2 <HAL_ETH_ReadPHYRegister>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00b      	beq.n	8000b84 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 fc22 	bl	80013bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b80:	2301      	movs	r3, #1
 8000b82:	e056      	b.n	8000c32 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	e002      	b.n	8000b9e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	e037      	b.n	8000c20 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	e032      	b.n	8000c20 <HAL_ETH_Init+0x31c>
 8000bba:	bf00      	nop
 8000bbc:	03938700 	.word	0x03938700
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40013800 	.word	0x40013800
 8000bc8:	01312cff 	.word	0x01312cff
 8000bcc:	02160ebf 	.word	0x02160ebf
 8000bd0:	039386ff 	.word	0x039386ff
 8000bd4:	05f5e0ff 	.word	0x05f5e0ff
 8000bd8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	08db      	lsrs	r3, r3, #3
 8000be2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	085b      	lsrs	r3, r3, #1
 8000bea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 fb4c 	bl	8001292 <HAL_ETH_WritePHYRegister>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000c04:	6939      	ldr	r1, [r7, #16]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 fbd8 	bl	80013bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e00c      	b.n	8000c32 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000c18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c1c:	f7ff fd3e 	bl	800069c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000c20:	6939      	ldr	r1, [r7, #16]
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 fbca 	bl	80013bc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop

08000c3c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d101      	bne.n	8000c5c <HAL_ETH_DMATxDescListInit+0x20>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e052      	b.n	8000d02 <HAL_ETH_DMATxDescListInit+0xc6>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2202      	movs	r2, #2
 8000c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e030      	b.n	8000cda <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	015b      	lsls	r3, r3, #5
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	4413      	add	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c88:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d208      	bcs.n	8000cce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	015b      	lsls	r3, r3, #5
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	e002      	b.n	8000cd4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3ca      	bcc.n	8000c78 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f241 0310 	movw	r3, #4112	; 0x1010
 8000cec:	440b      	add	r3, r1
 8000cee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b087      	sub	sp, #28
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <HAL_ETH_DMARxDescListInit+0x20>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e056      	b.n	8000ddc <HAL_ETH_DMARxDescListInit+0xce>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2202      	movs	r2, #2
 8000d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e034      	b.n	8000db4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	015b      	lsls	r3, r3, #5
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	4413      	add	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d5a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000d62:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d208      	bcs.n	8000da8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	015b      	lsls	r3, r3, #5
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	4413      	add	r3, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	e002      	b.n	8000dae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d3c6      	bcc.n	8000d4a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6819      	ldr	r1, [r3, #0]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	f241 030c 	movw	r3, #4108	; 0x100c
 8000dc6:	440b      	add	r3, r1
 8000dc8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d101      	bne.n	8000e0c <HAL_ETH_TransmitFrame+0x24>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	e0cd      	b.n	8000fa8 <HAL_ETH_TransmitFrame+0x1c0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2202      	movs	r2, #2
 8000e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d109      	bne.n	8000e36 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000e32:	2301      	movs	r3, #1
 8000e34:	e0b8      	b.n	8000fa8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da09      	bge.n	8000e54 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2212      	movs	r2, #18
 8000e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e0a9      	b.n	8000fa8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d915      	bls.n	8000e8a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	0a9b      	lsrs	r3, r3, #10
 8000e68:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8000e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e72:	0a9b      	lsrs	r3, r3, #10
 8000e74:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000e78:	fb01 f303 	mul.w	r3, r1, r3
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e001      	b.n	8000e8e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d11c      	bne.n	8000ece <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000ea2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000eae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ebe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ecc:	e04b      	b.n	8000f66 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	e044      	b.n	8000f5e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ede:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ee2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d107      	bne.n	8000efa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ef8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f02:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d116      	bne.n	8000f3c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f1c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <HAL_ETH_TransmitFrame+0x1d0>)
 8000f22:	fb02 f203 	mul.w	r2, r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000f2e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000f3a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f4a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3b6      	bcc.n	8000ed4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	f241 0314 	movw	r3, #4116	; 0x1014
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00d      	beq.n	8000f96 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8000f82:	4413      	add	r3, r2
 8000f84:	2204      	movs	r2, #4
 8000f86:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000f90:	4413      	add	r3, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	ac02b00b 	.word	0xac02b00b
 8000fb8:	fffffa0c 	.word	0xfffffa0c

08000fbc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e074      	b.n	80010c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000fe6:	e05a      	b.n	800109e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ffc:	d10d      	bne.n	800101a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
 8001018:	e041      	b.n	800109e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10b      	bne.n	8001040 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
 800103e:	e02e      	b.n	800109e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	2b01      	cmp	r3, #1
 8001058:	d103      	bne.n	8001062 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800106e:	1f1a      	subs	r2, r3, #4
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e010      	b.n	80010c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db02      	blt.n	80010ae <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d99c      	bls.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e4:	2b40      	cmp	r3, #64	; 0x40
 80010e6:	d112      	bne.n	800110e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f010 f9b7 	bl	801145c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f241 0314 	movw	r3, #4116	; 0x1014
 80010f6:	4413      	add	r3, r2
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800110c:	e01b      	b.n	8001146 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f241 0314 	movw	r3, #4116	; 0x1014
 8001116:	4413      	add	r3, r2
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d111      	bne.n	8001146 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f839 	bl	800119a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001130:	4413      	add	r3, r2
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f241 0314 	movw	r3, #4116	; 0x1014
 800114e:	4413      	add	r3, r2
 8001150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001154:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f241 0314 	movw	r3, #4116	; 0x1014
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800116a:	d112      	bne.n	8001192 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f81e 	bl	80011ae <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f241 0314 	movw	r3, #4116	; 0x1014
 800117a:	4413      	add	r3, r2
 800117c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001180:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	460b      	mov	r3, r1
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b82      	cmp	r3, #130	; 0x82
 80011e2:	d101      	bne.n	80011e8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80011e4:	2302      	movs	r3, #2
 80011e6:	e050      	b.n	800128a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2282      	movs	r2, #130	; 0x82
 80011ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f003 031c 	and.w	r3, r3, #28
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8a1b      	ldrh	r3, [r3, #16]
 8001204:	02db      	lsls	r3, r3, #11
 8001206:	b29b      	uxth	r3, r3
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	4313      	orrs	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800120e:	897b      	ldrh	r3, [r7, #10]
 8001210:	019b      	lsls	r3, r3, #6
 8001212:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4313      	orrs	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f023 0302 	bic.w	r3, r3, #2
 8001222:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff fa26 	bl	8000684 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800123a:	e015      	b.n	8001268 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800123c:	f7ff fa22 	bl	8000684 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d309      	bcc.n	8001260 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e014      	b.n	800128a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e4      	bne.n	800123c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	b29b      	uxth	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	460b      	mov	r3, r1
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b42      	cmp	r3, #66	; 0x42
 80012b2:	d101      	bne.n	80012b8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80012b4:	2302      	movs	r3, #2
 80012b6:	e04e      	b.n	8001356 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2242      	movs	r2, #66	; 0x42
 80012bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 031c 	and.w	r3, r3, #28
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8a1b      	ldrh	r3, [r3, #16]
 80012d4:	02db      	lsls	r3, r3, #11
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	4313      	orrs	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80012de:	897b      	ldrh	r3, [r7, #10]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800130e:	f7ff f9b9 	bl	8000684 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001314:	e015      	b.n	8001342 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001316:	f7ff f9b5 	bl	8000684 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d309      	bcc.n	800133a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e00d      	b.n	8001356 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e4      	bne.n	8001316 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ETH_Start+0x16>
 8001370:	2302      	movs	r3, #2
 8001372:	e01f      	b.n	80013b4 <HAL_ETH_Start+0x56>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fa1b 	bl	80017c0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fa35 	bl	80017fa <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 fa7f 	bl	8001894 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fa4c 	bl	8001834 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fa61 	bl	8001864 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0b0      	sub	sp, #192	; 0xc0
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d103      	bne.n	800140a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001406:	663b      	str	r3, [r7, #96]	; 0x60
 8001408:	e001      	b.n	800140e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001418:	2300      	movs	r3, #0
 800141a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001494:	4bab      	ldr	r3, [pc, #684]	; (8001744 <ETH_MACDMAConfig+0x388>)
 8001496:	4013      	ands	r3, r2
 8001498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800149c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80014a0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80014a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80014a4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80014a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80014a8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80014ae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80014b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80014b2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80014b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80014b6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80014bc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80014be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80014c0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80014c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80014c4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80014c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80014c8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80014ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80014cc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80014ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80014d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80014d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014d6:	4313      	orrs	r3, r2
 80014d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff f8d3 	bl	800069c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014fe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001500:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001504:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001508:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800150a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800150e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001514:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800151a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800151c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001520:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001524:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800152c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800152e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff f8ae 	bl	800069c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001548:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001552:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800155c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001568:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800156c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001570:	4013      	ands	r3, r2
 8001572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001576:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800157a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800157c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001580:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001586:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800158c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800158e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001592:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001594:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001598:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800159a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff f86f 	bl	800069c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015c6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80015cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff f85a 	bl	800069c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015f0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80015f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001600:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001604:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001616:	2304      	movs	r3, #4
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800161a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001636:	2300      	movs	r3, #0
 8001638:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800163a:	2300      	movs	r3, #0
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f241 0318 	movw	r3, #4120	; 0x1018
 8001646:	4413      	add	r3, r2
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800164e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <ETH_MACDMAConfig+0x38c>)
 8001654:	4013      	ands	r3, r2
 8001656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800165a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800165c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800165e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001660:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001662:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001664:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001666:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001668:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800166a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800166c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800166e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001670:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001672:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001676:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800167a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800167c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001680:	4313      	orrs	r3, r2
 8001682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f241 0318 	movw	r3, #4120	; 0x1018
 800168e:	4413      	add	r3, r2
 8001690:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001694:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f241 0318 	movw	r3, #4120	; 0x1018
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7fe fff8 	bl	800069c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80016b4:	4413      	add	r3, r2
 80016b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016ba:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80016c0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80016c4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80016c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80016c8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80016ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80016cc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80016ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016d0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80016d2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80016d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80016d6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7fe ffd1 	bl	800069c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001706:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10d      	bne.n	800172c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	f241 031c 	movw	r3, #4124	; 0x101c
 8001718:	4413      	add	r3, r2
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6811      	ldr	r1, [r2, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <ETH_MACDMAConfig+0x390>)
 8001722:	431a      	orrs	r2, r3
 8001724:	f241 031c 	movw	r3, #4124	; 0x101c
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	461a      	mov	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f80b 	bl	8001750 <ETH_MACAddressConfig>
}
 800173a:	bf00      	nop
 800173c:	37c0      	adds	r7, #192	; 0xc0
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	ff20810f 	.word	0xff20810f
 8001748:	f8de3f23 	.word	0xf8de3f23
 800174c:	00010040 	.word	0x00010040

08001750 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3305      	adds	r3, #5
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	3204      	adds	r2, #4
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <ETH_MACAddressConfig+0x68>)
 8001772:	4413      	add	r3, r2
 8001774:	461a      	mov	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3303      	adds	r3, #3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	061a      	lsls	r2, r3, #24
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3302      	adds	r3, #2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	4313      	orrs	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <ETH_MACAddressConfig+0x6c>)
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40028040 	.word	0x40028040
 80017bc:	40028044 	.word	0x40028044

080017c0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0208 	orr.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7fe ff59 	bl	800069c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	601a      	str	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0204 	orr.w	r2, r2, #4
 8001814:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800181e:	2001      	movs	r0, #1
 8001820:	f7fe ff3c 	bl	800069c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f241 0318 	movw	r3, #4120	; 0x1018
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6811      	ldr	r1, [r2, #0]
 800184c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001850:	f241 0318 	movw	r3, #4120	; 0x1018
 8001854:	440b      	add	r3, r1
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	f241 0318 	movw	r3, #4120	; 0x1018
 8001874:	4413      	add	r3, r2
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	f043 0202 	orr.w	r2, r3, #2
 8001880:	f241 0318 	movw	r3, #4120	; 0x1018
 8001884:	440b      	add	r3, r1
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6811      	ldr	r1, [r2, #0]
 80018b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80018b8:	440b      	add	r3, r1
 80018ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7fe fee6 	bl	800069c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80018da:	440b      	add	r3, r1
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e175      	b.n	8001bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8164 	bne.w	8001bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x4e>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b12      	cmp	r3, #18
 8001934:	d123      	bne.n	800197e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	69b9      	ldr	r1, [r7, #24]
 800197a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0203 	and.w	r2, r3, #3
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d00b      	beq.n	80019d2 <HAL_GPIO_Init+0xea>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d007      	beq.n	80019d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80be 	beq.w	8001bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <HAL_GPIO_Init+0x320>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a64      	ldr	r2, [pc, #400]	; (8001c08 <HAL_GPIO_Init+0x320>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b62      	ldr	r3, [pc, #392]	; (8001c08 <HAL_GPIO_Init+0x320>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a8a:	4a60      	ldr	r2, [pc, #384]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a57      	ldr	r2, [pc, #348]	; (8001c10 <HAL_GPIO_Init+0x328>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d037      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a56      	ldr	r2, [pc, #344]	; (8001c14 <HAL_GPIO_Init+0x32c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a54      	ldr	r2, [pc, #336]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a53      	ldr	r2, [pc, #332]	; (8001c20 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a50      	ldr	r2, [pc, #320]	; (8001c2c <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x222>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x21e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e012      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b02:	230a      	movs	r3, #10
 8001b04:	e010      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e00e      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00c      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00a      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b38:	4934      	ldr	r1, [pc, #208]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6a:	4a33      	ldr	r2, [pc, #204]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f ae86 	bls.w	8001908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3724      	adds	r7, #36	; 0x24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40013800 	.word	0x40013800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020c00 	.word	0x40020c00
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40021400 	.word	0x40021400
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022400 	.word	0x40022400
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	401a      	ands	r2, r3
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d104      	bne.n	8001c92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	041a      	lsls	r2, r3, #16
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e25e      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8087 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	4b96      	ldr	r3, [pc, #600]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00c      	beq.n	8001cee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd4:	4b93      	ldr	r3, [pc, #588]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d112      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62>
 8001ce0:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cec:	d10b      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4b8d      	ldr	r3, [pc, #564]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d06c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x130>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d168      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e238      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x7a>
 8001d10:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a83      	ldr	r2, [pc, #524]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e02e      	b.n	8001d7c <HAL_RCC_OscConfig+0xd8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x9c>
 8001d26:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7b      	ldr	r2, [pc, #492]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0xd8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0xc0>
 8001d4a:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xd8>
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6b      	ldr	r2, [pc, #428]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe fc7e 	bl	8000684 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fc7a 	bl	8000684 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1ec      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0xe8>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe fc6a 	bl	8000684 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fc66 	bl	8000684 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1d8      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x110>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d069      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dee:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x190>
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x17a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1ac      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	493d      	ldr	r1, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e040      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a38      	ldr	r2, [pc, #224]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe fc1c 	bl	8000684 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e50:	f7fe fc18 	bl	8000684 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e18a      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4929      	ldr	r1, [pc, #164]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
 8001e82:	e018      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe fbf8 	bl	8000684 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e98:	f7fe fbf4 	bl	8000684 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e166      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d038      	beq.n	8001f34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d019      	beq.n	8001efe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fbd5 	bl	8000684 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ede:	f7fe fbd1 	bl	8000684 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e143      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x23a>
 8001efc:	e01a      	b.n	8001f34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fbbb 	bl	8000684 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f12:	f7fe fbb7 	bl	8000684 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d903      	bls.n	8001f28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e129      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
 8001f24:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b95      	ldr	r3, [pc, #596]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ee      	bne.n	8001f12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a4 	beq.w	800208a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10d      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a8b      	ldr	r2, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	4b86      	ldr	r3, [pc, #536]	; (8002184 <HAL_RCC_OscConfig+0x4e0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f76:	4b83      	ldr	r3, [pc, #524]	; (8002184 <HAL_RCC_OscConfig+0x4e0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a82      	ldr	r2, [pc, #520]	; (8002184 <HAL_RCC_OscConfig+0x4e0>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7fe fb7f 	bl	8000684 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7fe fb7b 	bl	8000684 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	; 0x64
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0ed      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_OscConfig+0x4e0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x31a>
 8001fb0:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbc:	e02d      	b.n	800201a <HAL_RCC_OscConfig+0x376>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x33c>
 8001fc6:	4b6e      	ldr	r3, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4a6d      	ldr	r2, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd2:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fde:	e01c      	b.n	800201a <HAL_RCC_OscConfig+0x376>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d10c      	bne.n	8002002 <HAL_RCC_OscConfig+0x35e>
 8001fe8:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a64      	ldr	r2, [pc, #400]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a61      	ldr	r2, [pc, #388]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8002000:	e00b      	b.n	800201a <HAL_RCC_OscConfig+0x376>
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a5e      	ldr	r2, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
 800200e:	4b5c      	ldr	r3, [pc, #368]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a5b      	ldr	r2, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d015      	beq.n	800204e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7fe fb2f 	bl	8000684 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fb2b 	bl	8000684 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e09b      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ee      	beq.n	800202a <HAL_RCC_OscConfig+0x386>
 800204c:	e014      	b.n	8002078 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7fe fb19 	bl	8000684 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	e00a      	b.n	800206c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7fe fb15 	bl	8000684 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e085      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ee      	bne.n	8002056 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d105      	bne.n	800208a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d071      	beq.n	8002176 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d069      	beq.n	8002172 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d14b      	bne.n	800213e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a35      	ldr	r2, [pc, #212]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 80020ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fae7 	bl	8000684 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fae3 	bl	8000684 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e055      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	071b      	lsls	r3, r3, #28
 8002104:	491e      	ldr	r1, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fab5 	bl	8000684 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe fab1 	bl	8000684 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e023      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x47a>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7fe fa9b 	bl	8000684 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe fa97 	bl	8000684 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e009      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x4dc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x4ae>
 8002170:	e001      	b.n	8002176 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000

08002188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0ce      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b69      	ldr	r3, [pc, #420]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	4964      	ldr	r1, [pc, #400]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b6      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b52      	ldr	r3, [pc, #328]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a51      	ldr	r2, [pc, #324]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800220a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494c      	ldr	r1, [pc, #304]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d040      	beq.n	80022ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d115      	bne.n	800226a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07d      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e071      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e069      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227c:	f7fe fa02 	bl	8000684 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe f9fe 	bl	8000684 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e051      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d210      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	4921      	ldr	r1, [pc, #132]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e030      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4915      	ldr	r1, [pc, #84]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490d      	ldr	r1, [pc, #52]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f81d 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800231e:	4601      	mov	r1, r0
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	fa21 f303 	lsr.w	r3, r1, r3
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002336:	200f      	movs	r0, #15
 8002338:	f7fe f960 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023c00 	.word	0x40023c00
 800234c:	40023800 	.word	0x40023800
 8002350:	08015e54 	.word	0x08015e54
 8002354:	2000001c 	.word	0x2000001c

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	2300      	movs	r3, #0
 8002368:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d007      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x32>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d008      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x38>
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80b4 	bne.w	80024ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002386:	60bb      	str	r3, [r7, #8]
       break;
 8002388:	e0b3      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800238c:	60bb      	str	r3, [r7, #8]
      break;
 800238e:	e0b0      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002390:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002398:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800239a:	4b58      	ldr	r3, [pc, #352]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d04a      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b55      	ldr	r3, [pc, #340]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	ea03 0501 	and.w	r5, r3, r1
 80023bc:	ea04 0602 	and.w	r6, r4, r2
 80023c0:	4629      	mov	r1, r5
 80023c2:	4632      	mov	r2, r6
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	f04f 0400 	mov.w	r4, #0
 80023cc:	0154      	lsls	r4, r2, #5
 80023ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	4619      	mov	r1, r3
 80023d6:	4622      	mov	r2, r4
 80023d8:	1b49      	subs	r1, r1, r5
 80023da:	eb62 0206 	sbc.w	r2, r2, r6
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	f04f 0400 	mov.w	r4, #0
 80023e6:	0194      	lsls	r4, r2, #6
 80023e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023ec:	018b      	lsls	r3, r1, #6
 80023ee:	1a5b      	subs	r3, r3, r1
 80023f0:	eb64 0402 	sbc.w	r4, r4, r2
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	00e2      	lsls	r2, r4, #3
 80023fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002402:	00d9      	lsls	r1, r3, #3
 8002404:	460b      	mov	r3, r1
 8002406:	4614      	mov	r4, r2
 8002408:	195b      	adds	r3, r3, r5
 800240a:	eb44 0406 	adc.w	r4, r4, r6
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	02a2      	lsls	r2, r4, #10
 8002418:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800241c:	0299      	lsls	r1, r3, #10
 800241e:	460b      	mov	r3, r1
 8002420:	4614      	mov	r4, r2
 8002422:	4618      	mov	r0, r3
 8002424:	4621      	mov	r1, r4
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f04f 0400 	mov.w	r4, #0
 800242c:	461a      	mov	r2, r3
 800242e:	4623      	mov	r3, r4
 8002430:	f7fd ff56 	bl	80002e0 <__aeabi_uldivmod>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e049      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	f240 11ff 	movw	r1, #511	; 0x1ff
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	ea03 0501 	and.w	r5, r3, r1
 8002452:	ea04 0602 	and.w	r6, r4, r2
 8002456:	4629      	mov	r1, r5
 8002458:	4632      	mov	r2, r6
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	f04f 0400 	mov.w	r4, #0
 8002462:	0154      	lsls	r4, r2, #5
 8002464:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002468:	014b      	lsls	r3, r1, #5
 800246a:	4619      	mov	r1, r3
 800246c:	4622      	mov	r2, r4
 800246e:	1b49      	subs	r1, r1, r5
 8002470:	eb62 0206 	sbc.w	r2, r2, r6
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f04f 0400 	mov.w	r4, #0
 800247c:	0194      	lsls	r4, r2, #6
 800247e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	1a5b      	subs	r3, r3, r1
 8002486:	eb64 0402 	sbc.w	r4, r4, r2
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	00e2      	lsls	r2, r4, #3
 8002494:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002498:	00d9      	lsls	r1, r3, #3
 800249a:	460b      	mov	r3, r1
 800249c:	4614      	mov	r4, r2
 800249e:	195b      	adds	r3, r3, r5
 80024a0:	eb44 0406 	adc.w	r4, r4, r6
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	02a2      	lsls	r2, r4, #10
 80024ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024b2:	0299      	lsls	r1, r3, #10
 80024b4:	460b      	mov	r3, r1
 80024b6:	4614      	mov	r4, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	4621      	mov	r1, r4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f04f 0400 	mov.w	r4, #0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4623      	mov	r3, r4
 80024c6:	f7fd ff0b 	bl	80002e0 <__aeabi_uldivmod>
 80024ca:	4603      	mov	r3, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	60bb      	str	r3, [r7, #8]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024ee:	60bb      	str	r3, [r7, #8]
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	68bb      	ldr	r3, [r7, #8]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	00f42400 	.word	0x00f42400

08002504 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000001c 	.word	0x2000001c

0800251c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800252a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252e:	2b84      	cmp	r3, #132	; 0x84
 8002530:	d005      	beq.n	800253e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	3303      	adds	r3, #3
 800253c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002552:	f3ef 8305 	mrs	r3, IPSR
 8002556:	607b      	str	r3, [r7, #4]
  return(result);
 8002558:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002574:	f001 fb1e 	bl	8003bb4 <vTaskStartScheduler>
  
  return osOK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}

0800257e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002582:	f7ff ffe3 	bl	800254c <inHandlerMode>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800258c:	f001 fc18 	bl	8003dc0 <xTaskGetTickCountFromISR>
 8002590:	4603      	mov	r3, r0
 8002592:	e002      	b.n	800259a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002594:	f001 fc04 	bl	8003da0 <xTaskGetTickCount>
 8002598:	4603      	mov	r3, r0
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd80      	pop	{r7, pc}

0800259e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800259e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af02      	add	r7, sp, #8
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685c      	ldr	r4, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025b4:	b29e      	uxth	r6, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ffad 	bl	800251c <makeFreeRtosPriority>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	9200      	str	r2, [sp, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4632      	mov	r2, r6
 80025d0:	4629      	mov	r1, r5
 80025d2:	4620      	mov	r0, r4
 80025d4:	f001 f98d 	bl	80038f2 <xTaskCreate>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <osDelay+0x16>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	e000      	b.n	8002604 <osDelay+0x18>
 8002602:	2301      	movs	r3, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fa9f 	bl	8003b48 <vTaskDelay>
  
  return osOK;
 800260a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800261c:	2001      	movs	r0, #1
 800261e:	f000 fb83 	bl	8002d28 <xQueueCreateMutex>
 8002622:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <osMutexWait+0x18>
    return osErrorParameter;
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	e03a      	b.n	80026ba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264e:	d103      	bne.n	8002658 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e009      	b.n	800266c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <osMutexWait+0x40>
      ticks = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800266c:	f7ff ff6e 	bl	800254c <inHandlerMode>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d017      	beq.n	80026a6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	461a      	mov	r2, r3
 800267c:	2100      	movs	r1, #0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 ff8c 	bl	800359c <xQueueReceiveFromISR>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <osMutexWait+0x62>
      return osErrorOS;
 800268a:	23ff      	movs	r3, #255	; 0xff
 800268c:	e015      	b.n	80026ba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d011      	beq.n	80026b8 <osMutexWait+0x8c>
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <osMutexWait+0x98>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	e008      	b.n	80026b8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fe67 	bl	800337c <xQueueSemaphoreTake>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <osMutexWait+0x8c>
    return osErrorOS;
 80026b4:	23ff      	movs	r3, #255	; 0xff
 80026b6:	e000      	b.n	80026ba <osMutexWait+0x8e>
  }
  
  return osOK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80026d8:	f7ff ff38 	bl	800254c <inHandlerMode>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80026e2:	f107 0308 	add.w	r3, r7, #8
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fcd3 	bl	8003094 <xQueueGiveFromISR>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <osMutexRelease+0x30>
      return osErrorOS;
 80026f4:	23ff      	movs	r3, #255	; 0xff
 80026f6:	e017      	b.n	8002728 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d013      	beq.n	8002726 <osMutexRelease+0x5e>
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <osMutexRelease+0x68>)
 8002700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	e00a      	b.n	8002726 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002710:	2300      	movs	r3, #0
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fb1e 	bl	8002d58 <xQueueGenericSend>
 800271c:	4603      	mov	r3, r0
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002722:	23ff      	movs	r3, #255	; 0xff
 8002724:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	e000ed04 	.word	0xe000ed04

08002734 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d110      	bne.n	8002766 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8002744:	2203      	movs	r2, #3
 8002746:	2100      	movs	r1, #0
 8002748:	2001      	movs	r0, #1
 800274a:	f000 fa79 	bl	8002c40 <xQueueGenericCreate>
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <osSemaphoreCreate+0x2e>
 8002756:	2300      	movs	r3, #0
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fafb 	bl	8002d58 <xQueueGenericSend>
    return sema;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	e000      	b.n	8002768 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8002766:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	e03a      	b.n	80027fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002792:	d103      	bne.n	800279c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	e009      	b.n	80027b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80027b0:	f7ff fecc 	bl	800254c <inHandlerMode>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d017      	beq.n	80027ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	461a      	mov	r2, r3
 80027c0:	2100      	movs	r1, #0
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 feea 	bl	800359c <xQueueReceiveFromISR>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80027ce:	23ff      	movs	r3, #255	; 0xff
 80027d0:	e015      	b.n	80027fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d011      	beq.n	80027fc <osSemaphoreWait+0x8c>
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <osSemaphoreWait+0x98>)
 80027da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	e008      	b.n	80027fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fdc5 	bl	800337c <xQueueSemaphoreTake>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d001      	beq.n	80027fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80027f8:	23ff      	movs	r3, #255	; 0xff
 80027fa:	e000      	b.n	80027fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800281c:	f7ff fe96 	bl	800254c <inHandlerMode>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fc31 	bl	8003094 <xQueueGiveFromISR>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d001      	beq.n	800283c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002838:	23ff      	movs	r3, #255	; 0xff
 800283a:	e017      	b.n	800286c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <osSemaphoreRelease+0x5e>
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <osSemaphoreRelease+0x68>)
 8002844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	e00a      	b.n	800286a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002854:	2300      	movs	r3, #0
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa7c 	bl	8002d58 <xQueueGenericSend>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002866:	23ff      	movs	r3, #255	; 0xff
 8002868:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	4619      	mov	r1, r3
 800288e:	f000 f9d7 	bl	8002c40 <xQueueGenericCreate>
 8002892:	4603      	mov	r3, r0
#endif
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <osMessagePut+0x1e>
    ticks = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80028ba:	f7ff fe47 	bl	800254c <inHandlerMode>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80028c4:	f107 0210 	add.w	r2, r7, #16
 80028c8:	f107 0108 	add.w	r1, r7, #8
 80028cc:	2300      	movs	r3, #0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fb44 	bl	8002f5c <xQueueGenericSendFromISR>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <osMessagePut+0x42>
      return osErrorOS;
 80028da:	23ff      	movs	r3, #255	; 0xff
 80028dc:	e018      	b.n	8002910 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d014      	beq.n	800290e <osMessagePut+0x72>
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <osMessagePut+0x7c>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e00b      	b.n	800290e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80028f6:	f107 0108 	add.w	r1, r7, #8
 80028fa:	2300      	movs	r3, #0
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa2a 	bl	8002d58 <xQueueGenericSend>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <osMessagePut+0x72>
      return osErrorOS;
 800290a:	23ff      	movs	r3, #255	; 0xff
 800290c:	e000      	b.n	8002910 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	e000ed04 	.word	0xe000ed04

0800291c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	617b      	str	r3, [r7, #20]
    return event;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	461c      	mov	r4, r3
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800294a:	e054      	b.n	80029f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295a:	d103      	bne.n	8002964 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	e009      	b.n	8002978 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <osMessageGet+0x5c>
      ticks = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002978:	f7ff fde8 	bl	800254c <inHandlerMode>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01c      	beq.n	80029bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002982:	f107 0220 	add.w	r2, r7, #32
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	68b8      	ldr	r0, [r7, #8]
 8002990:	f000 fe04 	bl	800359c <xQueueReceiveFromISR>
 8002994:	4603      	mov	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800299a:	2310      	movs	r3, #16
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e001      	b.n	80029a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01d      	beq.n	80029e6 <osMessageGet+0xca>
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <osMessageGet+0xe4>)
 80029ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	e014      	b.n	80029e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	3304      	adds	r3, #4
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	4619      	mov	r1, r3
 80029c6:	68b8      	ldr	r0, [r7, #8]
 80029c8:	f000 fbf6 	bl	80031b8 <xQueueReceive>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80029d2:	2310      	movs	r3, #16
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e006      	b.n	80029e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <osMessageGet+0xc6>
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <osMessageGet+0xc8>
 80029e2:	2340      	movs	r3, #64	; 0x40
 80029e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	461c      	mov	r4, r3
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f103 0208 	add.w	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f103 0208 	add.w	r2, r3, #8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f103 0208 	add.w	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002abc:	d103      	bne.n	8002ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e00c      	b.n	8002ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3308      	adds	r3, #8
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e002      	b.n	8002ad4 <vListInsert+0x2e>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d2f6      	bcs.n	8002ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6892      	ldr	r2, [r2, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6852      	ldr	r2, [r2, #4]
 8002b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d103      	bne.n	8002b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	b672      	cpsid	i
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	b662      	cpsie	i
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	e7fe      	b.n	8002b96 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8002b98:	f001 ff56 	bl	8004a48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	441a      	add	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	441a      	add	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	22ff      	movs	r2, #255	; 0xff
 8002be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d114      	bne.n	8002c18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01a      	beq.n	8002c2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3310      	adds	r3, #16
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fa32 	bl	8004064 <xTaskRemoveFromEventList>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <xQueueGenericReset+0xd0>)
 8002c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	e009      	b.n	8002c2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fef1 	bl	8002a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3324      	adds	r3, #36	; 0x24
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff feec 	bl	8002a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c2c:	f001 ff3e 	bl	8004aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <xQueueGenericCreate+0x2c>
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	b672      	cpsid	i
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	b662      	cpsie	i
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e7fe      	b.n	8002c6a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e004      	b.n	8002c82 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3348      	adds	r3, #72	; 0x48
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 f800 	bl	8004c8c <pvPortMalloc>
 8002c8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3348      	adds	r3, #72	; 0x48
 8002c98:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c9a:	79fa      	ldrb	r2, [r7, #7]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f805 	bl	8002cb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002cac:	69bb      	ldr	r3, [r7, #24]
	}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e002      	b.n	8002cd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f7ff ff40 	bl	8002b6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00e      	beq.n	8002d20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d14:	2300      	movs	r3, #0
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f81c 	bl	8002d58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d32:	2301      	movs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6939      	ldr	r1, [r7, #16]
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f7ff ff7d 	bl	8002c40 <xQueueGenericCreate>
 8002d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ffd3 	bl	8002cf4 <prvInitialiseMutex>

		return pxNewQueue;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d66:	2300      	movs	r3, #0
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <xQueueGenericSend+0x34>
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	b672      	cpsid	i
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	b662      	cpsie	i
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8a:	e7fe      	b.n	8002d8a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueGenericSend+0x42>
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <xQueueGenericSend+0x46>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueGenericSend+0x48>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <xQueueGenericSend+0x64>
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	b672      	cpsid	i
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	b662      	cpsie	i
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e7fe      	b.n	8002dba <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSend+0x72>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <xQueueGenericSend+0x76>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueGenericSend+0x78>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <xQueueGenericSend+0x94>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	b672      	cpsid	i
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	b662      	cpsie	i
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dec:	f001 fade 	bl	80043ac <xTaskGetSchedulerState>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <xQueueGenericSend+0xa4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <xQueueGenericSend+0xa8>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <xQueueGenericSend+0xaa>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <xQueueGenericSend+0xc6>
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	b672      	cpsid	i
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	b662      	cpsie	i
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e1e:	f001 fe13 	bl	8004a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <xQueueGenericSend+0xdc>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d129      	bne.n	8002e88 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3a:	f000 fc4a 	bl	80036d2 <prvCopyDataToQueue>
 8002e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	3324      	adds	r3, #36	; 0x24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 f909 	bl	8004064 <xTaskRemoveFromEventList>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <xQueueGenericSend+0x200>)
 8002e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	e00a      	b.n	8002e80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <xQueueGenericSend+0x200>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e80:	f001 fe14 	bl	8004aac <vPortExitCritical>
				return pdPASS;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e063      	b.n	8002f50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e8e:	f001 fe0d 	bl	8004aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e05c      	b.n	8002f50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f943 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eaa:	f001 fdff 	bl	8004aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eae:	f000 fecb 	bl	8003c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eb2:	f001 fdc9 	bl	8004a48 <vPortEnterCritical>
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec2:	d103      	bne.n	8002ecc <xQueueGenericSend+0x174>
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed2:	b25b      	sxtb	r3, r3
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x18a>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee2:	f001 fde3 	bl	8004aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ee6:	1d3a      	adds	r2, r7, #4
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f932 	bl	8004158 <xTaskCheckForTimeOut>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d124      	bne.n	8002f44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efc:	f000 fce1 	bl	80038c2 <prvIsQueueFull>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d018      	beq.n	8002f38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	3310      	adds	r3, #16
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f882 	bl	8004018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f16:	f000 fc6c 	bl	80037f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f1a:	f000 fea3 	bl	8003c64 <xTaskResumeAll>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f af7c 	bne.w	8002e1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <xQueueGenericSend+0x200>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	e772      	b.n	8002e1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3a:	f000 fc5a 	bl	80037f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f3e:	f000 fe91 	bl	8003c64 <xTaskResumeAll>
 8002f42:	e76c      	b.n	8002e1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f46:	f000 fc54 	bl	80037f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f4a:	f000 fe8b 	bl	8003c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f4e:	2300      	movs	r3, #0
		}
	}
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3738      	adds	r7, #56	; 0x38
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08e      	sub	sp, #56	; 0x38
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <xQueueGenericSendFromISR+0x30>
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	b672      	cpsid	i
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	b662      	cpsie	i
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	e7fe      	b.n	8002f8a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSendFromISR+0x3e>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <xQueueGenericSendFromISR+0x42>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericSendFromISR+0x44>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <xQueueGenericSendFromISR+0x60>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	b672      	cpsid	i
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	b662      	cpsie	i
 8002fb8:	623b      	str	r3, [r7, #32]
 8002fba:	e7fe      	b.n	8002fba <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d103      	bne.n	8002fca <xQueueGenericSendFromISR+0x6e>
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <xQueueGenericSendFromISR+0x72>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericSendFromISR+0x74>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <xQueueGenericSendFromISR+0x90>
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	b672      	cpsid	i
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	b662      	cpsie	i
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e7fe      	b.n	8002fea <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fec:	f001 fe0c 	bl	8004c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ff0:	f3ef 8211 	mrs	r2, BASEPRI
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	b672      	cpsid	i
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	b662      	cpsie	i
 8003008:	61ba      	str	r2, [r7, #24]
 800300a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800300c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <xQueueGenericSendFromISR+0xc6>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d12c      	bne.n	800307c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003032:	f000 fb4e 	bl	80036d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003036:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800303e:	d112      	bne.n	8003066 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d016      	beq.n	8003076 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	3324      	adds	r3, #36	; 0x24
 800304c:	4618      	mov	r0, r3
 800304e:	f001 f809 	bl	8004064 <xTaskRemoveFromEventList>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e007      	b.n	8003076 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003066:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800306a:	3301      	adds	r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	b25a      	sxtb	r2, r3
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003076:	2301      	movs	r3, #1
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800307a:	e001      	b.n	8003080 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800307c:	2300      	movs	r3, #0
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800308c:	4618      	mov	r0, r3
 800308e:	3738      	adds	r7, #56	; 0x38
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08e      	sub	sp, #56	; 0x38
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	b672      	cpsid	i
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	b662      	cpsie	i
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	e7fe      	b.n	80030be <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <xQueueGiveFromISR+0x4c>
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	b672      	cpsid	i
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	b662      	cpsie	i
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e7fe      	b.n	80030de <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <xQueueGiveFromISR+0x5c>
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <xQueueGiveFromISR+0x60>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <xQueueGiveFromISR+0x62>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <xQueueGiveFromISR+0x7e>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	b672      	cpsid	i
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	b662      	cpsie	i
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e7fe      	b.n	8003110 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003112:	f001 fd79 	bl	8004c08 <vPortValidateInterruptPriority>
	__asm volatile
 8003116:	f3ef 8211 	mrs	r2, BASEPRI
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	b672      	cpsid	i
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	b662      	cpsie	i
 800312e:	617a      	str	r2, [r7, #20]
 8003130:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003132:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003142:	429a      	cmp	r2, r3
 8003144:	d22b      	bcs.n	800319e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003158:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003160:	d112      	bne.n	8003188 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	3324      	adds	r3, #36	; 0x24
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ff78 	bl	8004064 <xTaskRemoveFromEventList>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e007      	b.n	8003198 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800318c:	3301      	adds	r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	b25a      	sxtb	r2, r3
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003198:	2301      	movs	r3, #1
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
 800319c:	e001      	b.n	80031a2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3738      	adds	r7, #56	; 0x38
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <xQueueReceive+0x32>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	b672      	cpsid	i
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	b662      	cpsie	i
 80031e6:	623b      	str	r3, [r7, #32]
 80031e8:	e7fe      	b.n	80031e8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <xQueueReceive+0x40>
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <xQueueReceive+0x44>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <xQueueReceive+0x46>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <xQueueReceive+0x62>
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	b672      	cpsid	i
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	b662      	cpsie	i
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e7fe      	b.n	8003218 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321a:	f001 f8c7 	bl	80043ac <xTaskGetSchedulerState>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <xQueueReceive+0x72>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueReceive+0x76>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueReceive+0x78>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10b      	bne.n	800324c <xQueueReceive+0x94>
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	b672      	cpsid	i
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	b662      	cpsie	i
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e7fe      	b.n	800324a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800324c:	f001 fbfc 	bl	8004a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01f      	beq.n	800329c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003260:	f000 faa1 	bl	80037a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00f      	beq.n	8003294 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	3310      	adds	r3, #16
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fef3 	bl	8004064 <xTaskRemoveFromEventList>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003284:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <xQueueReceive+0x1c0>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003294:	f001 fc0a 	bl	8004aac <vPortExitCritical>
				return pdPASS;
 8003298:	2301      	movs	r3, #1
 800329a:	e069      	b.n	8003370 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032a2:	f001 fc03 	bl	8004aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e062      	b.n	8003370 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 ff39 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032be:	f001 fbf5 	bl	8004aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c2:	f000 fcc1 	bl	8003c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c6:	f001 fbbf 	bl	8004a48 <vPortEnterCritical>
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d6:	d103      	bne.n	80032e0 <xQueueReceive+0x128>
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ec:	d103      	bne.n	80032f6 <xQueueReceive+0x13e>
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f6:	f001 fbd9 	bl	8004aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032fa:	1d3a      	adds	r2, r7, #4
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 ff28 	bl	8004158 <xTaskCheckForTimeOut>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d123      	bne.n	8003356 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800330e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003310:	f000 fac1 	bl	8003896 <prvIsQueueEmpty>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d017      	beq.n	800334a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	3324      	adds	r3, #36	; 0x24
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fe78 	bl	8004018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332a:	f000 fa62 	bl	80037f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800332e:	f000 fc99 	bl	8003c64 <xTaskResumeAll>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d189      	bne.n	800324c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <xQueueReceive+0x1c0>)
 800333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	e780      	b.n	800324c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800334a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334c:	f000 fa51 	bl	80037f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003350:	f000 fc88 	bl	8003c64 <xTaskResumeAll>
 8003354:	e77a      	b.n	800324c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003358:	f000 fa4b 	bl	80037f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800335c:	f000 fc82 	bl	8003c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f000 fa98 	bl	8003896 <prvIsQueueEmpty>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f43f af6f 	beq.w	800324c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800336e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08e      	sub	sp, #56	; 0x38
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <xQueueSemaphoreTake+0x34>
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	b672      	cpsid	i
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	b662      	cpsie	i
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	e7fe      	b.n	80033ae <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <xQueueSemaphoreTake+0x54>
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	b672      	cpsid	i
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	b662      	cpsie	i
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e7fe      	b.n	80033ce <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d0:	f000 ffec 	bl	80043ac <xTaskGetSchedulerState>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <xQueueSemaphoreTake+0x64>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <xQueueSemaphoreTake+0x68>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <xQueueSemaphoreTake+0x6a>
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <xQueueSemaphoreTake+0x86>
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	b672      	cpsid	i
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	b662      	cpsie	i
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	e7fe      	b.n	8003400 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003402:	f001 fb21 	bl	8004a48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	1e5a      	subs	r2, r3, #1
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003422:	f001 f991 	bl	8004748 <pvTaskIncrementMutexHeldCount>
 8003426:	4602      	mov	r2, r0
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	3310      	adds	r3, #16
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fe13 	bl	8004064 <xTaskRemoveFromEventList>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003444:	4b54      	ldr	r3, [pc, #336]	; (8003598 <xQueueSemaphoreTake+0x21c>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003454:	f001 fb2a 	bl	8004aac <vPortExitCritical>
				return pdPASS;
 8003458:	2301      	movs	r3, #1
 800345a:	e098      	b.n	800358e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d112      	bne.n	8003488 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <xQueueSemaphoreTake+0x104>
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	b672      	cpsid	i
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	b662      	cpsie	i
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e7fe      	b.n	800347e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003480:	f001 fb14 	bl	8004aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003484:	2300      	movs	r3, #0
 8003486:	e082      	b.n	800358e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fe4a 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800349c:	f001 fb06 	bl	8004aac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034a0:	f000 fbd2 	bl	8003c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a4:	f001 fad0 	bl	8004a48 <vPortEnterCritical>
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b4:	d103      	bne.n	80034be <xQueueSemaphoreTake+0x142>
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ca:	d103      	bne.n	80034d4 <xQueueSemaphoreTake+0x158>
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d4:	f001 faea 	bl	8004aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d8:	463a      	mov	r2, r7
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fe39 	bl	8004158 <xTaskCheckForTimeOut>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d132      	bne.n	8003552 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034ee:	f000 f9d2 	bl	8003896 <prvIsQueueEmpty>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d026      	beq.n	8003546 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003500:	f001 faa2 	bl	8004a48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ff6d 	bl	80043e8 <xTaskPriorityInherit>
 800350e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003510:	f001 facc 	bl	8004aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd7b 	bl	8004018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003524:	f000 f965 	bl	80037f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003528:	f000 fb9c 	bl	8003c64 <xTaskResumeAll>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	f47f af67 	bne.w	8003402 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <xQueueSemaphoreTake+0x21c>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	e75d      	b.n	8003402 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003548:	f000 f953 	bl	80037f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800354c:	f000 fb8a 	bl	8003c64 <xTaskResumeAll>
 8003550:	e757      	b.n	8003402 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003554:	f000 f94d 	bl	80037f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003558:	f000 fb84 	bl	8003c64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800355c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800355e:	f000 f99a 	bl	8003896 <prvIsQueueEmpty>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	f43f af4c 	beq.w	8003402 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003570:	f001 fa6a 	bl	8004a48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003576:	f000 f894 	bl	80036a2 <prvGetDisinheritPriorityAfterTimeout>
 800357a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f83e 	bl	8004604 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003588:	f001 fa90 	bl	8004aac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800358c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800358e:	4618      	mov	r0, r3
 8003590:	3738      	adds	r7, #56	; 0x38
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <xQueueReceiveFromISR+0x2e>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	b672      	cpsid	i
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	b662      	cpsie	i
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	e7fe      	b.n	80035c8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <xQueueReceiveFromISR+0x3c>
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <xQueueReceiveFromISR+0x40>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <xQueueReceiveFromISR+0x42>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <xQueueReceiveFromISR+0x5e>
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	b672      	cpsid	i
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	b662      	cpsie	i
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	e7fe      	b.n	80035f8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035fa:	f001 fb05 	bl	8004c08 <vPortValidateInterruptPriority>
	__asm volatile
 80035fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	b672      	cpsid	i
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	b662      	cpsie	i
 8003616:	61ba      	str	r2, [r7, #24]
 8003618:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800361a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d02f      	beq.n	800368a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003638:	f000 f8b5 	bl	80037a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	1e5a      	subs	r2, r3, #1
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364c:	d112      	bne.n	8003674 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	3310      	adds	r3, #16
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fd02 	bl	8004064 <xTaskRemoveFromEventList>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e007      	b.n	8003684 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003678:	3301      	adds	r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	b25a      	sxtb	r2, r3
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003684:	2301      	movs	r3, #1
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
 8003688:	e001      	b.n	800368e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800368a:	2300      	movs	r3, #0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800369a:	4618      	mov	r0, r3
 800369c:	3738      	adds	r7, #56	; 0x38
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1c3 0307 	rsb	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e001      	b.n	80036c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036c4:	68fb      	ldr	r3, [r7, #12]
	}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d14d      	bne.n	8003794 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fef9 	bl	80044f4 <xTaskPriorityDisinherit>
 8003702:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	e043      	b.n	8003794 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6898      	ldr	r0, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	461a      	mov	r2, r3
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	f00e fc60 	bl	8011fe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d32b      	bcc.n	8003794 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e026      	b.n	8003794 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68d8      	ldr	r0, [r3, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	461a      	mov	r2, r3
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	f00e fc46 	bl	8011fe2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	425b      	negs	r3, r3
 8003760:	441a      	add	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d207      	bcs.n	8003782 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	425b      	negs	r3, r3
 800377c:	441a      	add	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d105      	bne.n	8003794 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	3b01      	subs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800379c:	697b      	ldr	r3, [r7, #20]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d303      	bcc.n	80037da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	461a      	mov	r2, r3
 80037e4:	6838      	ldr	r0, [r7, #0]
 80037e6:	f00e fbfc 	bl	8011fe2 <memcpy>
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037fa:	f001 f925 	bl	8004a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003804:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003806:	e011      	b.n	800382c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fc25 	bl	8004064 <xTaskRemoveFromEventList>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003820:	f000 fcfe 	bl	8004220 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	3b01      	subs	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800382c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	dce9      	bgt.n	8003808 <prvUnlockQueue+0x16>
 8003834:	e000      	b.n	8003838 <prvUnlockQueue+0x46>
					break;
 8003836:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003840:	f001 f934 	bl	8004aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003844:	f001 f900 	bl	8004a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003850:	e011      	b.n	8003876 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fc00 	bl	8004064 <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800386a:	f000 fcd9 	bl	8004220 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800386e:	7bbb      	ldrb	r3, [r7, #14]
 8003870:	3b01      	subs	r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800387a:	2b00      	cmp	r3, #0
 800387c:	dce9      	bgt.n	8003852 <prvUnlockQueue+0x60>
 800387e:	e000      	b.n	8003882 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003880:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800388a:	f001 f90f 	bl	8004aac <vPortExitCritical>
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800389e:	f001 f8d3 	bl	8004a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e001      	b.n	80038b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038b4:	f001 f8fa 	bl	8004aac <vPortExitCritical>

	return xReturn;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ca:	f001 f8bd 	bl	8004a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d102      	bne.n	80038e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038da:	2301      	movs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e001      	b.n	80038e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038e4:	f001 f8e2 	bl	8004aac <vPortExitCritical>

	return xReturn;
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08c      	sub	sp, #48	; 0x30
 80038f6:	af04      	add	r7, sp, #16
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f9c0 	bl	8004c8c <pvPortMalloc>
 800390c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003914:	2054      	movs	r0, #84	; 0x54
 8003916:	f001 f9b9 	bl	8004c8c <pvPortMalloc>
 800391a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
 8003928:	e005      	b.n	8003936 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f001 fa76 	bl	8004e1c <vPortFree>
 8003930:	e001      	b.n	8003936 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	2300      	movs	r3, #0
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f80e 	bl	8003974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003958:	69f8      	ldr	r0, [r7, #28]
 800395a:	f000 f88b 	bl	8003a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800395e:	2301      	movs	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e002      	b.n	800396a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003968:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800396a:	69bb      	ldr	r3, [r7, #24]
	}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800398c:	440b      	add	r3, r1
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f023 0307 	bic.w	r3, r3, #7
 800399a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	b672      	cpsid	i
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	b662      	cpsie	i
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e7fe      	b.n	80039bc <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e012      	b.n	80039ea <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	7819      	ldrb	r1, [r3, #0]
 80039cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	3334      	adds	r3, #52	; 0x34
 80039d4:	460a      	mov	r2, r1
 80039d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d9e9      	bls.n	80039c4 <prvInitialiseNewTask+0x50>
 80039f0:	e000      	b.n	80039f4 <prvInitialiseNewTask+0x80>
		{
			break;
 80039f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d901      	bls.n	8003a06 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a02:	2306      	movs	r3, #6
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	2200      	movs	r2, #0
 8003a16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f811 	bl	8002a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	3318      	adds	r3, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f80c 	bl	8002a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	f1c3 0207 	rsb	r2, r3, #7
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	69b8      	ldr	r0, [r7, #24]
 8003a56:	f000 fef1 	bl	800483c <pxPortInitialiseStack>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a7c:	f000 ffe4 	bl	8004a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <prvAddNewTaskToReadyList+0xb8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <prvAddNewTaskToReadyList+0xb8>)
 8003a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <prvAddNewTaskToReadyList+0xbc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <prvAddNewTaskToReadyList+0xbc>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <prvAddNewTaskToReadyList+0xb8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d110      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aa0:	f000 fbe2 	bl	8004268 <prvInitialiseTaskLists>
 8003aa4:	e00d      	b.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <prvAddNewTaskToReadyList+0xc0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <prvAddNewTaskToReadyList+0xbc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d802      	bhi.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <prvAddNewTaskToReadyList+0xbc>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <prvAddNewTaskToReadyList+0xc4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <prvAddNewTaskToReadyList+0xc4>)
 8003aca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <prvAddNewTaskToReadyList+0xcc>)
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7fe ffb2 	bl	8002a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003afa:	f000 ffd7 	bl	8004aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <prvAddNewTaskToReadyList+0xc0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00e      	beq.n	8003b24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <prvAddNewTaskToReadyList+0xbc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d207      	bcs.n	8003b24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <prvAddNewTaskToReadyList+0xd0>)
 8003b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200001a0 	.word	0x200001a0
 8003b30:	200000a0 	.word	0x200000a0
 8003b34:	200001ac 	.word	0x200001ac
 8003b38:	200001bc 	.word	0x200001bc
 8003b3c:	200001a8 	.word	0x200001a8
 8003b40:	200000a4 	.word	0x200000a4
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d018      	beq.n	8003b8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <vTaskDelay+0x64>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <vTaskDelay+0x32>
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	b672      	cpsid	i
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	b662      	cpsie	i
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e7fe      	b.n	8003b78 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003b7a:	f000 f865 	bl	8003c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fdf5 	bl	8004770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b86:	f000 f86d 	bl	8003c64 <xTaskResumeAll>
 8003b8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <vTaskDelay+0x68>)
 8003b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200001c8 	.word	0x200001c8
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <vTaskStartScheduler+0x7c>)
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	491b      	ldr	r1, [pc, #108]	; (8003c34 <vTaskStartScheduler+0x80>)
 8003bc8:	481b      	ldr	r0, [pc, #108]	; (8003c38 <vTaskStartScheduler+0x84>)
 8003bca:	f7ff fe92 	bl	80038f2 <xTaskCreate>
 8003bce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d117      	bne.n	8003c06 <vTaskStartScheduler+0x52>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	b672      	cpsid	i
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	b662      	cpsie	i
 8003bea:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <vTaskStartScheduler+0x88>)
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bf2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <vTaskStartScheduler+0x8c>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <vTaskStartScheduler+0x90>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c00:	f000 fea6 	bl	8004950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c04:	e00f      	b.n	8003c26 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0c:	d10b      	bne.n	8003c26 <vTaskStartScheduler+0x72>
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	b672      	cpsid	i
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	b662      	cpsie	i
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	e7fe      	b.n	8003c24 <vTaskStartScheduler+0x70>
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200001c4 	.word	0x200001c4
 8003c34:	08012e60 	.word	0x08012e60
 8003c38:	08004239 	.word	0x08004239
 8003c3c:	200001c0 	.word	0x200001c0
 8003c40:	200001ac 	.word	0x200001ac
 8003c44:	200001a4 	.word	0x200001a4

08003c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <vTaskSuspendAll+0x18>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a03      	ldr	r2, [pc, #12]	; (8003c60 <vTaskSuspendAll+0x18>)
 8003c54:	6013      	str	r3, [r2, #0]
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	200001c8 	.word	0x200001c8

08003c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c72:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <xTaskResumeAll+0x118>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <xTaskResumeAll+0x2e>
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	b672      	cpsid	i
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	b662      	cpsie	i
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	e7fe      	b.n	8003c90 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c92:	f000 fed9 	bl	8004a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <xTaskResumeAll+0x118>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <xTaskResumeAll+0x118>)
 8003c9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <xTaskResumeAll+0x118>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d161      	bne.n	8003d6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <xTaskResumeAll+0x11c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d05d      	beq.n	8003d6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cb0:	e02e      	b.n	8003d10 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003cb2:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <xTaskResumeAll+0x120>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe ff2a 	bl	8002b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe ff25 	bl	8002b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <xTaskResumeAll+0x124>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <xTaskResumeAll+0x124>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <xTaskResumeAll+0x128>)
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f7fe feb1 	bl	8002a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <xTaskResumeAll+0x12c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <xTaskResumeAll+0x130>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d10:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <xTaskResumeAll+0x120>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1cc      	bne.n	8003cb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d1e:	f000 fb1f 	bl	8004360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <xTaskResumeAll+0x134>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d010      	beq.n	8003d50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d2e:	f000 f859 	bl	8003de4 <xTaskIncrementTick>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <xTaskResumeAll+0x130>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f1      	bne.n	8003d2e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <xTaskResumeAll+0x134>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <xTaskResumeAll+0x130>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <xTaskResumeAll+0x138>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d6c:	f000 fe9e 	bl	8004aac <vPortExitCritical>

	return xAlreadyYielded;
 8003d70:	68bb      	ldr	r3, [r7, #8]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200001c8 	.word	0x200001c8
 8003d80:	200001a0 	.word	0x200001a0
 8003d84:	20000160 	.word	0x20000160
 8003d88:	200001a8 	.word	0x200001a8
 8003d8c:	200000a4 	.word	0x200000a4
 8003d90:	200000a0 	.word	0x200000a0
 8003d94:	200001b4 	.word	0x200001b4
 8003d98:	200001b0 	.word	0x200001b0
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <xTaskGetTickCount+0x1c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	200001a4 	.word	0x200001a4

08003dc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dc6:	f000 ff1f 	bl	8004c08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <xTaskGetTickCountFromISR+0x20>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dd4:	683b      	ldr	r3, [r7, #0]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200001a4 	.word	0x200001a4

08003de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dee:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <xTaskIncrementTick+0x150>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 808e 	bne.w	8003f14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df8:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <xTaskIncrementTick+0x154>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e00:	4a4d      	ldr	r2, [pc, #308]	; (8003f38 <xTaskIncrementTick+0x154>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d121      	bne.n	8003e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <xTaskIncrementTick+0x158>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <xTaskIncrementTick+0x4a>
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	b672      	cpsid	i
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	b662      	cpsie	i
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	e7fe      	b.n	8003e2c <xTaskIncrementTick+0x48>
 8003e2e:	4b43      	ldr	r3, [pc, #268]	; (8003f3c <xTaskIncrementTick+0x158>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <xTaskIncrementTick+0x15c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <xTaskIncrementTick+0x158>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <xTaskIncrementTick+0x15c>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <xTaskIncrementTick+0x160>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <xTaskIncrementTick+0x160>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	f000 fa88 	bl	8004360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e50:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <xTaskIncrementTick+0x164>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d34d      	bcc.n	8003ef6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5a:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <xTaskIncrementTick+0x158>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <xTaskIncrementTick+0x84>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <xTaskIncrementTick+0x86>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <xTaskIncrementTick+0x164>)
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e74:	601a      	str	r2, [r3, #0]
					break;
 8003e76:	e03e      	b.n	8003ef6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <xTaskIncrementTick+0x158>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d203      	bcs.n	8003e98 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e90:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <xTaskIncrementTick+0x164>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6013      	str	r3, [r2, #0]
						break;
 8003e96:	e02e      	b.n	8003ef6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fe3b 	bl	8002b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3318      	adds	r3, #24
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fe32 	bl	8002b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	4b23      	ldr	r3, [pc, #140]	; (8003f4c <xTaskIncrementTick+0x168>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <xTaskIncrementTick+0x168>)
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <xTaskIncrementTick+0x16c>)
 8003ed4:	441a      	add	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f7fe fdbe 	bl	8002a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <xTaskIncrementTick+0x170>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3b4      	bcc.n	8003e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef4:	e7b1      	b.n	8003e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <xTaskIncrementTick+0x170>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efc:	4914      	ldr	r1, [pc, #80]	; (8003f50 <xTaskIncrementTick+0x16c>)
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d907      	bls.n	8003f1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e004      	b.n	8003f1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xTaskIncrementTick+0x174>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	4a0f      	ldr	r2, [pc, #60]	; (8003f58 <xTaskIncrementTick+0x174>)
 8003f1c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <xTaskIncrementTick+0x178>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f2a:	697b      	ldr	r3, [r7, #20]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	200001c8 	.word	0x200001c8
 8003f38:	200001a4 	.word	0x200001a4
 8003f3c:	20000158 	.word	0x20000158
 8003f40:	2000015c 	.word	0x2000015c
 8003f44:	200001b8 	.word	0x200001b8
 8003f48:	200001c0 	.word	0x200001c0
 8003f4c:	200001a8 	.word	0x200001a8
 8003f50:	200000a4 	.word	0x200000a4
 8003f54:	200000a0 	.word	0x200000a0
 8003f58:	200001b0 	.word	0x200001b0
 8003f5c:	200001b4 	.word	0x200001b4

08003f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <vTaskSwitchContext+0xa4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <vTaskSwitchContext+0xa8>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f74:	e040      	b.n	8003ff8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <vTaskSwitchContext+0xa8>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f7c:	4b23      	ldr	r3, [pc, #140]	; (800400c <vTaskSwitchContext+0xac>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f1c3 031f 	rsb	r3, r3, #31
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	491f      	ldr	r1, [pc, #124]	; (8004010 <vTaskSwitchContext+0xb0>)
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <vTaskSwitchContext+0x5e>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	b672      	cpsid	i
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	b662      	cpsie	i
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	e7fe      	b.n	8003fbc <vTaskSwitchContext+0x5c>
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4a11      	ldr	r2, [pc, #68]	; (8004010 <vTaskSwitchContext+0xb0>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d104      	bne.n	8003fee <vTaskSwitchContext+0x8e>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a07      	ldr	r2, [pc, #28]	; (8004014 <vTaskSwitchContext+0xb4>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	200001c8 	.word	0x200001c8
 8004008:	200001b4 	.word	0x200001b4
 800400c:	200001a8 	.word	0x200001a8
 8004010:	200000a4 	.word	0x200000a4
 8004014:	200000a0 	.word	0x200000a0

08004018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <vTaskPlaceOnEventList+0x28>
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	b672      	cpsid	i
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	b662      	cpsie	i
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e7fe      	b.n	800403e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <vTaskPlaceOnEventList+0x48>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3318      	adds	r3, #24
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fe fd2c 	bl	8002aa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800404e:	2101      	movs	r1, #1
 8004050:	6838      	ldr	r0, [r7, #0]
 8004052:	f000 fb8d 	bl	8004770 <prvAddCurrentTaskToDelayedList>
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200000a0 	.word	0x200000a0

08004064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <xTaskRemoveFromEventList+0x2e>
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	b672      	cpsid	i
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	b662      	cpsie	i
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e7fe      	b.n	8004090 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3318      	adds	r3, #24
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fd3e 	bl	8002b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <xTaskRemoveFromEventList+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11c      	bne.n	80040de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fd35 	bl	8002b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	2201      	movs	r2, #1
 80040b4:	409a      	lsls	r2, r3
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	4a16      	ldr	r2, [pc, #88]	; (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <xTaskRemoveFromEventList+0xb8>)
 80040ce:	441a      	add	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fe fcc1 	bl	8002a5e <vListInsertEnd>
 80040dc:	e005      	b.n	80040ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3318      	adds	r3, #24
 80040e2:	4619      	mov	r1, r3
 80040e4:	480e      	ldr	r0, [pc, #56]	; (8004120 <xTaskRemoveFromEventList+0xbc>)
 80040e6:	f7fe fcba 	bl	8002a5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <xTaskRemoveFromEventList+0xc0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d905      	bls.n	8004104 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <xTaskRemoveFromEventList+0xc4>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e001      	b.n	8004108 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200001c8 	.word	0x200001c8
 8004118:	200001a8 	.word	0x200001a8
 800411c:	200000a4 	.word	0x200000a4
 8004120:	20000160 	.word	0x20000160
 8004124:	200000a0 	.word	0x200000a0
 8004128:	200001b4 	.word	0x200001b4

0800412c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <vTaskInternalSetTimeOutState+0x24>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <vTaskInternalSetTimeOutState+0x28>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	200001b8 	.word	0x200001b8
 8004154:	200001a4 	.word	0x200001a4

08004158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xTaskCheckForTimeOut+0x28>
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	b672      	cpsid	i
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	b662      	cpsie	i
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	e7fe      	b.n	800417e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <xTaskCheckForTimeOut+0x46>
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	b672      	cpsid	i
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	b662      	cpsie	i
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e7fe      	b.n	800419c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800419e:	f000 fc53 	bl	8004a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <xTaskCheckForTimeOut+0xc0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ba:	d102      	bne.n	80041c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e023      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <xTaskCheckForTimeOut+0xc4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d007      	beq.n	80041de <xTaskCheckForTimeOut+0x86>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e015      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d20b      	bcs.n	8004200 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff99 	bl	800412c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e004      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800420a:	f000 fc4f 	bl	8004aac <vPortExitCritical>

	return xReturn;
 800420e:	69fb      	ldr	r3, [r7, #28]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	200001a4 	.word	0x200001a4
 800421c:	200001b8 	.word	0x200001b8

08004220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <vTaskMissedYield+0x14>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	200001b4 	.word	0x200001b4

08004238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004240:	f000 f852 	bl	80042e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <prvIdleTask+0x28>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d9f9      	bls.n	8004240 <prvIdleTask+0x8>
			{
				taskYIELD();
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <prvIdleTask+0x2c>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800425c:	e7f0      	b.n	8004240 <prvIdleTask+0x8>
 800425e:	bf00      	nop
 8004260:	200000a4 	.word	0x200000a4
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	e00c      	b.n	800428e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <prvInitialiseTaskLists+0x60>)
 8004280:	4413      	add	r3, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fbbe 	bl	8002a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3301      	adds	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d9ef      	bls.n	8004274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004294:	480d      	ldr	r0, [pc, #52]	; (80042cc <prvInitialiseTaskLists+0x64>)
 8004296:	f7fe fbb5 	bl	8002a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800429a:	480d      	ldr	r0, [pc, #52]	; (80042d0 <prvInitialiseTaskLists+0x68>)
 800429c:	f7fe fbb2 	bl	8002a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042a0:	480c      	ldr	r0, [pc, #48]	; (80042d4 <prvInitialiseTaskLists+0x6c>)
 80042a2:	f7fe fbaf 	bl	8002a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042a6:	480c      	ldr	r0, [pc, #48]	; (80042d8 <prvInitialiseTaskLists+0x70>)
 80042a8:	f7fe fbac 	bl	8002a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042ac:	480b      	ldr	r0, [pc, #44]	; (80042dc <prvInitialiseTaskLists+0x74>)
 80042ae:	f7fe fba9 	bl	8002a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <prvInitialiseTaskLists+0x78>)
 80042b4:	4a05      	ldr	r2, [pc, #20]	; (80042cc <prvInitialiseTaskLists+0x64>)
 80042b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <prvInitialiseTaskLists+0x7c>)
 80042ba:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <prvInitialiseTaskLists+0x68>)
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200000a4 	.word	0x200000a4
 80042cc:	20000130 	.word	0x20000130
 80042d0:	20000144 	.word	0x20000144
 80042d4:	20000160 	.word	0x20000160
 80042d8:	20000174 	.word	0x20000174
 80042dc:	2000018c 	.word	0x2000018c
 80042e0:	20000158 	.word	0x20000158
 80042e4:	2000015c 	.word	0x2000015c

080042e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042ee:	e019      	b.n	8004324 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042f0:	f000 fbaa 	bl	8004a48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <prvCheckTasksWaitingTermination+0x4c>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fc09 	bl	8002b18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <prvCheckTasksWaitingTermination+0x50>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <prvCheckTasksWaitingTermination+0x50>)
 800430e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <prvCheckTasksWaitingTermination+0x54>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <prvCheckTasksWaitingTermination+0x54>)
 8004318:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800431a:	f000 fbc7 	bl	8004aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f80e 	bl	8004340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <prvCheckTasksWaitingTermination+0x54>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e1      	bne.n	80042f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000174 	.word	0x20000174
 8004338:	200001a0 	.word	0x200001a0
 800433c:	20000188 	.word	0x20000188

08004340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fd65 	bl	8004e1c <vPortFree>
			vPortFree( pxTCB );
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fd62 	bl	8004e1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004366:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <prvResetNextTaskUnblockTime+0x44>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <prvResetNextTaskUnblockTime+0x14>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <prvResetNextTaskUnblockTime+0x16>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <prvResetNextTaskUnblockTime+0x48>)
 800437c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004380:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004382:	e008      	b.n	8004396 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <prvResetNextTaskUnblockTime+0x44>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <prvResetNextTaskUnblockTime+0x48>)
 8004394:	6013      	str	r3, [r2, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000158 	.word	0x20000158
 80043a8:	200001c0 	.word	0x200001c0

080043ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <xTaskGetSchedulerState+0x34>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ba:	2301      	movs	r3, #1
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	e008      	b.n	80043d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <xTaskGetSchedulerState+0x38>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043c8:	2302      	movs	r3, #2
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	e001      	b.n	80043d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043d2:	687b      	ldr	r3, [r7, #4]
	}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	200001ac 	.word	0x200001ac
 80043e4:	200001c8 	.word	0x200001c8

080043e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06e      	beq.n	80044dc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <xTaskPriorityInherit+0x100>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	429a      	cmp	r2, r3
 800440a:	d25e      	bcs.n	80044ca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	db06      	blt.n	8004422 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004414:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <xTaskPriorityInherit+0x100>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f1c3 0207 	rsb	r2, r3, #7
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6959      	ldr	r1, [r3, #20]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a2e      	ldr	r2, [pc, #184]	; (80044ec <xTaskPriorityInherit+0x104>)
 8004434:	4413      	add	r3, r2
 8004436:	4299      	cmp	r1, r3
 8004438:	d101      	bne.n	800443e <xTaskPriorityInherit+0x56>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xTaskPriorityInherit+0x58>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03a      	beq.n	80044ba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fb65 	bl	8002b18 <uxListRemove>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d115      	bne.n	8004480 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4924      	ldr	r1, [pc, #144]	; (80044ec <xTaskPriorityInherit+0x104>)
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <xTaskPriorityInherit+0x98>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	2201      	movs	r2, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43da      	mvns	r2, r3
 8004476:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <xTaskPriorityInherit+0x108>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4013      	ands	r3, r2
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <xTaskPriorityInherit+0x108>)
 800447e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004480:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <xTaskPriorityInherit+0x100>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	2201      	movs	r2, #1
 8004490:	409a      	lsls	r2, r3
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <xTaskPriorityInherit+0x108>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <xTaskPriorityInherit+0x108>)
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4a10      	ldr	r2, [pc, #64]	; (80044ec <xTaskPriorityInherit+0x104>)
 80044aa:	441a      	add	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7fe fad3 	bl	8002a5e <vListInsertEnd>
 80044b8:	e004      	b.n	80044c4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <xTaskPriorityInherit+0x100>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e008      	b.n	80044dc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <xTaskPriorityInherit+0x100>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d201      	bcs.n	80044dc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044dc:	68fb      	ldr	r3, [r7, #12]
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200000a0 	.word	0x200000a0
 80044ec:	200000a4 	.word	0x200000a4
 80044f0:	200001a8 	.word	0x200001a8

080044f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d070      	beq.n	80045ec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <xTaskPriorityDisinherit+0x104>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d00b      	beq.n	800452c <xTaskPriorityDisinherit+0x38>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	b672      	cpsid	i
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	b662      	cpsie	i
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e7fe      	b.n	800452a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <xTaskPriorityDisinherit+0x58>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	b672      	cpsid	i
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	b662      	cpsie	i
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	e7fe      	b.n	800454a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	429a      	cmp	r2, r3
 8004560:	d044      	beq.n	80045ec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004566:	2b00      	cmp	r3, #0
 8004568:	d140      	bne.n	80045ec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fad2 	bl	8002b18 <uxListRemove>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d115      	bne.n	80045a6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	491f      	ldr	r1, [pc, #124]	; (80045fc <xTaskPriorityDisinherit+0x108>)
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xTaskPriorityDisinherit+0xb2>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	2201      	movs	r2, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	4b18      	ldr	r3, [pc, #96]	; (8004600 <xTaskPriorityDisinherit+0x10c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4013      	ands	r3, r2
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <xTaskPriorityDisinherit+0x10c>)
 80045a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f1c3 0207 	rsb	r2, r3, #7
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2201      	movs	r2, #1
 80045c0:	409a      	lsls	r2, r3
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <xTaskPriorityDisinherit+0x10c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <xTaskPriorityDisinherit+0x10c>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a08      	ldr	r2, [pc, #32]	; (80045fc <xTaskPriorityDisinherit+0x108>)
 80045da:	441a      	add	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7fe fa3b 	bl	8002a5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045ec:	697b      	ldr	r3, [r7, #20]
	}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200000a0 	.word	0x200000a0
 80045fc:	200000a4 	.word	0x200000a4
 8004600:	200001a8 	.word	0x200001a8

08004604 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 808a 	beq.w	8004732 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	b672      	cpsid	i
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	b662      	cpsie	i
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e7fe      	b.n	800463c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d902      	bls.n	800464e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e002      	b.n	8004654 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	429a      	cmp	r2, r3
 800465c:	d069      	beq.n	8004732 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	d164      	bne.n	8004732 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	429a      	cmp	r2, r3
 8004670:	d10b      	bne.n	800468a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	b672      	cpsid	i
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	b662      	cpsie	i
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	e7fe      	b.n	8004688 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	db04      	blt.n	80046a8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f1c3 0207 	rsb	r2, r3, #7
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6959      	ldr	r1, [r3, #20]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4a22      	ldr	r2, [pc, #136]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046b8:	4413      	add	r3, r2
 80046ba:	4299      	cmp	r1, r3
 80046bc:	d101      	bne.n	80046c2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d034      	beq.n	8004732 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fa23 	bl	8002b18 <uxListRemove>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d115      	bne.n	8004704 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	4918      	ldr	r1, [pc, #96]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	2201      	movs	r2, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43da      	mvns	r2, r3
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4013      	ands	r3, r2
 8004700:	4a10      	ldr	r2, [pc, #64]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004702:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004724:	441a      	add	r2, r3
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	3304      	adds	r3, #4
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7fe f996 	bl	8002a5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004732:	bf00      	nop
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200000a0 	.word	0x200000a0
 8004740:	200000a4 	.word	0x200000a4
 8004744:	200001a8 	.word	0x200001a8

08004748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800474c:	4b07      	ldr	r3, [pc, #28]	; (800476c <pvTaskIncrementMutexHeldCount+0x24>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <pvTaskIncrementMutexHeldCount+0x24>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800475a:	3201      	adds	r2, #1
 800475c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800475e:	4b03      	ldr	r3, [pc, #12]	; (800476c <pvTaskIncrementMutexHeldCount+0x24>)
 8004760:	681b      	ldr	r3, [r3, #0]
	}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	200000a0 	.word	0x200000a0

08004770 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe f9c6 	bl	8002b18 <uxListRemove>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4013      	ands	r3, r2
 80047a6:	4a20      	ldr	r2, [pc, #128]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b0:	d10a      	bne.n	80047c8 <prvAddCurrentTaskToDelayedList+0x58>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047b8:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	481a      	ldr	r0, [pc, #104]	; (800482c <prvAddCurrentTaskToDelayedList+0xbc>)
 80047c2:	f7fe f94c 	bl	8002a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047c6:	e026      	b.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d209      	bcs.n	80047f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe f95a 	bl	8002aa6 <vListInsert>
}
 80047f2:	e010      	b.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe f950 	bl	8002aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d202      	bcs.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004810:	4a09      	ldr	r2, [pc, #36]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	200001a4 	.word	0x200001a4
 8004824:	200000a0 	.word	0x200000a0
 8004828:	200001a8 	.word	0x200001a8
 800482c:	2000018c 	.word	0x2000018c
 8004830:	2000015c 	.word	0x2000015c
 8004834:	20000158 	.word	0x20000158
 8004838:	200001c0 	.word	0x200001c0

0800483c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3b04      	subs	r3, #4
 800484c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b04      	subs	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b04      	subs	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <pxPortInitialiseStack+0x64>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b14      	subs	r3, #20
 8004876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f06f 0202 	mvn.w	r2, #2
 800488a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b20      	subs	r3, #32
 8004890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004892:	68fb      	ldr	r3, [r7, #12]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	080048a5 	.word	0x080048a5

080048a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <prvTaskExitError+0x58>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b6:	d00b      	beq.n	80048d0 <prvTaskExitError+0x2c>
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	b672      	cpsid	i
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	b662      	cpsie	i
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e7fe      	b.n	80048ce <prvTaskExitError+0x2a>
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	b672      	cpsid	i
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	b662      	cpsie	i
 80048e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048e6:	bf00      	nop
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0fc      	beq.n	80048e8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000008 	.word	0x20000008

08004900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	4770      	bx	lr
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst2>:
 8004920:	200000a0 	.word	0x200000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004928:	4808      	ldr	r0, [pc, #32]	; (800494c <prvPortStartFirstTask+0x24>)
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f380 8808 	msr	MSP, r0
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8814 	msr	CONTROL, r0
 800493a:	b662      	cpsie	i
 800493c:	b661      	cpsie	f
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	df00      	svc	0
 8004948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800494a:	bf00      	nop
 800494c:	e000ed08 	.word	0xe000ed08

08004950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <xPortStartScheduler+0xe0>)
 8004958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <xPortStartScheduler+0xe4>)
 800497c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800497e:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <xPortStartScheduler+0xe8>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004984:	e009      	b.n	800499a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004986:	4b2c      	ldr	r3, [pc, #176]	; (8004a38 <xPortStartScheduler+0xe8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3b01      	subs	r3, #1
 800498c:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <xPortStartScheduler+0xe8>)
 800498e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d0ef      	beq.n	8004986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <xPortStartScheduler+0xe8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1c3 0307 	rsb	r3, r3, #7
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d00b      	beq.n	80049ca <xPortStartScheduler+0x7a>
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	b672      	cpsid	i
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	b662      	cpsie	i
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	e7fe      	b.n	80049c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049ca:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <xPortStartScheduler+0xe8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <xPortStartScheduler+0xe8>)
 80049d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <xPortStartScheduler+0xe8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049dc:	4a16      	ldr	r2, [pc, #88]	; (8004a38 <xPortStartScheduler+0xe8>)
 80049de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <xPortStartScheduler+0xec>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <xPortStartScheduler+0xec>)
 80049ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049f4:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <xPortStartScheduler+0xec>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <xPortStartScheduler+0xec>)
 80049fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a00:	f000 f8d4 	bl	8004bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <xPortStartScheduler+0xf0>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a0a:	f000 f8f3 	bl	8004bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <xPortStartScheduler+0xf4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <xPortStartScheduler+0xf4>)
 8004a14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a1a:	f7ff ff85 	bl	8004928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a1e:	f7ff fa9f 	bl	8003f60 <vTaskSwitchContext>
	prvTaskExitError();
 8004a22:	f7ff ff3f 	bl	80048a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	e000e400 	.word	0xe000e400
 8004a34:	200001cc 	.word	0x200001cc
 8004a38:	200001d0 	.word	0x200001d0
 8004a3c:	e000ed20 	.word	0xe000ed20
 8004a40:	20000008 	.word	0x20000008
 8004a44:	e000ef34 	.word	0xe000ef34

08004a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	b672      	cpsid	i
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	b662      	cpsie	i
 8004a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <vPortEnterCritical+0x5c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <vPortEnterCritical+0x5c>)
 8004a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <vPortEnterCritical+0x5c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d110      	bne.n	8004a98 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <vPortEnterCritical+0x60>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <vPortEnterCritical+0x50>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	b672      	cpsid	i
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	b662      	cpsie	i
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	e7fe      	b.n	8004a96 <vPortEnterCritical+0x4e>
	}
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	20000008 	.word	0x20000008
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <vPortExitCritical+0x50>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <vPortExitCritical+0x26>
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	b672      	cpsid	i
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	b662      	cpsie	i
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	e7fe      	b.n	8004ad0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <vPortExitCritical+0x50>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <vPortExitCritical+0x50>)
 8004ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <vPortExitCritical+0x50>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <vPortExitCritical+0x42>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000008 	.word	0x20000008

08004b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b00:	f3ef 8009 	mrs	r0, PSP
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <pxCurrentTCBConst>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	f01e 0f10 	tst.w	lr, #16
 8004b10:	bf08      	it	eq
 8004b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	6010      	str	r0, [r2, #0]
 8004b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b24:	b672      	cpsid	i
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	b662      	cpsie	i
 8004b34:	f7ff fa14 	bl	8003f60 <vTaskSwitchContext>
 8004b38:	f04f 0000 	mov.w	r0, #0
 8004b3c:	f380 8811 	msr	BASEPRI, r0
 8004b40:	bc09      	pop	{r0, r3}
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	6808      	ldr	r0, [r1, #0]
 8004b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4a:	f01e 0f10 	tst.w	lr, #16
 8004b4e:	bf08      	it	eq
 8004b50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b54:	f380 8809 	msr	PSP, r0
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop

08004b60 <pxCurrentTCBConst>:
 8004b60:	200000a0 	.word	0x200000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop

08004b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	b672      	cpsid	i
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	b662      	cpsie	i
 8004b82:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b84:	f7ff f92e 	bl	8003de4 <xTaskIncrementTick>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <xPortSysTickHandler+0x40>)
 8004b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <vPortSetupTimerInterrupt+0x34>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <vPortSetupTimerInterrupt+0x38>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <vPortSetupTimerInterrupt+0x3c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <vPortSetupTimerInterrupt+0x40>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <vPortSetupTimerInterrupt+0x44>)
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bce:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <vPortSetupTimerInterrupt+0x34>)
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e010 	.word	0xe000e010
 8004be4:	e000e018 	.word	0xe000e018
 8004be8:	2000001c 	.word	0x2000001c
 8004bec:	10624dd3 	.word	0x10624dd3
 8004bf0:	e000e014 	.word	0xe000e014

08004bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c04 <vPortEnableVFP+0x10>
 8004bf8:	6801      	ldr	r1, [r0, #0]
 8004bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bfe:	6001      	str	r1, [r0, #0]
 8004c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c02:	bf00      	nop
 8004c04:	e000ed88 	.word	0xe000ed88

08004c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c0e:	f3ef 8305 	mrs	r3, IPSR
 8004c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d915      	bls.n	8004c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <vPortValidateInterruptPriority+0x74>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c24:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <vPortValidateInterruptPriority+0x78>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	7afa      	ldrb	r2, [r7, #11]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20b      	bcs.n	8004c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	b672      	cpsid	i
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	b662      	cpsie	i
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	e7fe      	b.n	8004c44 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <vPortValidateInterruptPriority+0x7c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <vPortValidateInterruptPriority+0x80>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d90b      	bls.n	8004c6e <vPortValidateInterruptPriority+0x66>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	b672      	cpsid	i
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	b662      	cpsie	i
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	e7fe      	b.n	8004c6c <vPortValidateInterruptPriority+0x64>
	}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	e000e3f0 	.word	0xe000e3f0
 8004c80:	200001cc 	.word	0x200001cc
 8004c84:	e000ed0c 	.word	0xe000ed0c
 8004c88:	200001d0 	.word	0x200001d0

08004c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c98:	f7fe ffd6 	bl	8003c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c9c:	4b5a      	ldr	r3, [pc, #360]	; (8004e08 <pvPortMalloc+0x17c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ca4:	f000 f916 	bl	8004ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ca8:	4b58      	ldr	r3, [pc, #352]	; (8004e0c <pvPortMalloc+0x180>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8090 	bne.w	8004dd6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01e      	beq.n	8004cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d015      	beq.n	8004cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f023 0307 	bic.w	r3, r3, #7
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <pvPortMalloc+0x6e>
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	b672      	cpsid	i
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	b662      	cpsie	i
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e7fe      	b.n	8004cf8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d06a      	beq.n	8004dd6 <pvPortMalloc+0x14a>
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <pvPortMalloc+0x184>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d865      	bhi.n	8004dd6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d0a:	4b42      	ldr	r3, [pc, #264]	; (8004e14 <pvPortMalloc+0x188>)
 8004d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d0e:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <pvPortMalloc+0x188>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d14:	e004      	b.n	8004d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d903      	bls.n	8004d32 <pvPortMalloc+0xa6>
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f1      	bne.n	8004d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <pvPortMalloc+0x17c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d04c      	beq.n	8004dd6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2208      	movs	r2, #8
 8004d42:	4413      	add	r3, r2
 8004d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	2308      	movs	r3, #8
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d920      	bls.n	8004da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <pvPortMalloc+0xfc>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	b672      	cpsid	i
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	b662      	cpsie	i
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e7fe      	b.n	8004d86 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f000 f8fc 	bl	8004f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <pvPortMalloc+0x184>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <pvPortMalloc+0x184>)
 8004dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <pvPortMalloc+0x184>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <pvPortMalloc+0x18c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d203      	bcs.n	8004dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <pvPortMalloc+0x184>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <pvPortMalloc+0x18c>)
 8004dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <pvPortMalloc+0x180>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dd6:	f7fe ff45 	bl	8003c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <pvPortMalloc+0x170>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	b672      	cpsid	i
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	b662      	cpsie	i
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e7fe      	b.n	8004dfa <pvPortMalloc+0x16e>
	return pvReturn;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20003ddc 	.word	0x20003ddc
 8004e0c:	20003de8 	.word	0x20003de8
 8004e10:	20003de0 	.word	0x20003de0
 8004e14:	20003dd4 	.word	0x20003dd4
 8004e18:	20003de4 	.word	0x20003de4

08004e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04a      	beq.n	8004ec4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e2e:	2308      	movs	r3, #8
 8004e30:	425b      	negs	r3, r3
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <vPortFree+0xb0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <vPortFree+0x46>
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	b672      	cpsid	i
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	b662      	cpsie	i
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e7fe      	b.n	8004e60 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <vPortFree+0x66>
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	b672      	cpsid	i
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	b662      	cpsie	i
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	e7fe      	b.n	8004e80 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <vPortFree+0xb0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d019      	beq.n	8004ec4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d115      	bne.n	8004ec4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <vPortFree+0xb0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ea8:	f7fe fece 	bl	8003c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <vPortFree+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <vPortFree+0xb4>)
 8004eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eba:	6938      	ldr	r0, [r7, #16]
 8004ebc:	f000 f86c 	bl	8004f98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ec0:	f7fe fed0 	bl	8003c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20003de8 	.word	0x20003de8
 8004ed0:	20003de0 	.word	0x20003de0

08004ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <prvHeapInit+0xac>)
 8004ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00c      	beq.n	8004f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3307      	adds	r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <prvHeapInit+0xac>)
 8004f04:	4413      	add	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <prvHeapInit+0xb0>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f12:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <prvHeapInit+0xb0>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f20:	2208      	movs	r2, #8
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <prvHeapInit+0xb4>)
 8004f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <prvHeapInit+0xb4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <prvHeapInit+0xb4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <prvHeapInit+0xb4>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <prvHeapInit+0xb8>)
 8004f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <prvHeapInit+0xbc>)
 8004f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <prvHeapInit+0xc0>)
 8004f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	200001d4 	.word	0x200001d4
 8004f84:	20003dd4 	.word	0x20003dd4
 8004f88:	20003ddc 	.word	0x20003ddc
 8004f8c:	20003de4 	.word	0x20003de4
 8004f90:	20003de0 	.word	0x20003de0
 8004f94:	20003de8 	.word	0x20003de8

08004f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <prvInsertBlockIntoFreeList+0xac>)
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e002      	b.n	8004fac <prvInsertBlockIntoFreeList+0x14>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d8f7      	bhi.n	8004fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d108      	bne.n	8004fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d118      	bne.n	8005020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <prvInsertBlockIntoFreeList+0xb0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d00d      	beq.n	8005016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	441a      	add	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e008      	b.n	8005028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <prvInsertBlockIntoFreeList+0xb0>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e003      	b.n	8005028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d002      	beq.n	8005036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20003dd4 	.word	0x20003dd4
 8005048:	20003ddc 	.word	0x20003ddc

0800504c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8005056:	f007 fa13 	bl	800c480 <sys_timeouts_sleeptime>
 800505a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005062:	d10b      	bne.n	800507c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8005064:	4813      	ldr	r0, [pc, #76]	; (80050b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8005066:	f00c f8f0 	bl	801124a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800506a:	2200      	movs	r2, #0
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f00c f864 	bl	801113c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005074:	480f      	ldr	r0, [pc, #60]	; (80050b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8005076:	f00c f8d9 	bl	801122c <sys_mutex_lock>
    return;
 800507a:	e018      	b.n	80050ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8005082:	f007 f9c3 	bl	800c40c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8005086:	e7e6      	b.n	8005056 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8005088:	480a      	ldr	r0, [pc, #40]	; (80050b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800508a:	f00c f8de 	bl	801124a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f00c f852 	bl	801113c <sys_arch_mbox_fetch>
 8005098:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800509a:	4806      	ldr	r0, [pc, #24]	; (80050b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800509c:	f00c f8c6 	bl	801122c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a6:	d102      	bne.n	80050ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80050a8:	f007 f9b0 	bl	800c40c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80050ac:	e7d3      	b.n	8005056 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20003f9c 	.word	0x20003f9c

080050b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80050c0:	4810      	ldr	r0, [pc, #64]	; (8005104 <tcpip_thread+0x4c>)
 80050c2:	f00c f8b3 	bl	801122c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <tcpip_thread+0x50>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <tcpip_thread+0x50>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a0e      	ldr	r2, [pc, #56]	; (800510c <tcpip_thread+0x54>)
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	4610      	mov	r0, r2
 80050d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80050da:	f107 030c 	add.w	r3, r7, #12
 80050de:	4619      	mov	r1, r3
 80050e0:	480b      	ldr	r0, [pc, #44]	; (8005110 <tcpip_thread+0x58>)
 80050e2:	f7ff ffb3 	bl	800504c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <tcpip_thread+0x5c>)
 80050ee:	2291      	movs	r2, #145	; 0x91
 80050f0:	4909      	ldr	r1, [pc, #36]	; (8005118 <tcpip_thread+0x60>)
 80050f2:	480a      	ldr	r0, [pc, #40]	; (800511c <tcpip_thread+0x64>)
 80050f4:	f00c ff88 	bl	8012008 <iprintf>
      continue;
 80050f8:	e003      	b.n	8005102 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 f80f 	bl	8005120 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8005102:	e7ea      	b.n	80050da <tcpip_thread+0x22>
 8005104:	20003f9c 	.word	0x20003f9c
 8005108:	20003dec 	.word	0x20003dec
 800510c:	20003df0 	.word	0x20003df0
 8005110:	20003df4 	.word	0x20003df4
 8005114:	08012e68 	.word	0x08012e68
 8005118:	08012e98 	.word	0x08012e98
 800511c:	08012eb8 	.word	0x08012eb8

08005120 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d018      	beq.n	8005162 <tcpip_thread_handle_msg+0x42>
 8005130:	2b02      	cmp	r3, #2
 8005132:	d021      	beq.n	8005178 <tcpip_thread_handle_msg+0x58>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d126      	bne.n	8005186 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6850      	ldr	r0, [r2, #4]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6892      	ldr	r2, [r2, #8]
 8005144:	4611      	mov	r1, r2
 8005146:	4798      	blx	r3
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fc4e 	bl	80069f4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	2009      	movs	r0, #9
 800515c:	f000 fe1c 	bl	8005d98 <memp_free>
      break;
 8005160:	e018      	b.n	8005194 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6892      	ldr	r2, [r2, #8]
 800516a:	4610      	mov	r0, r2
 800516c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	2008      	movs	r0, #8
 8005172:	f000 fe11 	bl	8005d98 <memp_free>
      break;
 8005176:	e00d      	b.n	8005194 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6892      	ldr	r2, [r2, #8]
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
      break;
 8005184:	e006      	b.n	8005194 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <tcpip_thread_handle_msg+0x7c>)
 8005188:	22cf      	movs	r2, #207	; 0xcf
 800518a:	4905      	ldr	r1, [pc, #20]	; (80051a0 <tcpip_thread_handle_msg+0x80>)
 800518c:	4805      	ldr	r0, [pc, #20]	; (80051a4 <tcpip_thread_handle_msg+0x84>)
 800518e:	f00c ff3b 	bl	8012008 <iprintf>
      break;
 8005192:	bf00      	nop
  }
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	08012e68 	.word	0x08012e68
 80051a0:	08012e98 	.word	0x08012e98
 80051a4:	08012eb8 	.word	0x08012eb8

080051a8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80051b4:	481a      	ldr	r0, [pc, #104]	; (8005220 <tcpip_inpkt+0x78>)
 80051b6:	f00c f800 	bl	80111ba <sys_mbox_valid>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <tcpip_inpkt+0x24>
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <tcpip_inpkt+0x7c>)
 80051c2:	22fc      	movs	r2, #252	; 0xfc
 80051c4:	4918      	ldr	r1, [pc, #96]	; (8005228 <tcpip_inpkt+0x80>)
 80051c6:	4819      	ldr	r0, [pc, #100]	; (800522c <tcpip_inpkt+0x84>)
 80051c8:	f00c ff1e 	bl	8012008 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80051cc:	2009      	movs	r0, #9
 80051ce:	f000 fd91 	bl	8005cf4 <memp_malloc>
 80051d2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80051da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051de:	e01a      	b.n	8005216 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	4809      	ldr	r0, [pc, #36]	; (8005220 <tcpip_inpkt+0x78>)
 80051fc:	f00b ff84 	bl	8011108 <sys_mbox_trypost>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d006      	beq.n	8005214 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	2009      	movs	r0, #9
 800520a:	f000 fdc5 	bl	8005d98 <memp_free>
    return ERR_MEM;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005212:	e000      	b.n	8005216 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8005214:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20003df4 	.word	0x20003df4
 8005224:	08012e68 	.word	0x08012e68
 8005228:	08012ee0 	.word	0x08012ee0
 800522c:	08012eb8 	.word	0x08012eb8

08005230 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005240:	f003 0318 	and.w	r3, r3, #24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <tcpip_input+0x3c>)
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ffab 	bl	80051a8 <tcpip_inpkt>
 8005252:	4603      	mov	r3, r0
 8005254:	e005      	b.n	8005262 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8005256:	4a06      	ldr	r2, [pc, #24]	; (8005270 <tcpip_input+0x40>)
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ffa4 	bl	80051a8 <tcpip_inpkt>
 8005260:	4603      	mov	r3, r0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	08010f21 	.word	0x08010f21
 8005270:	0800fe05 	.word	0x0800fe05

08005274 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800527e:	4819      	ldr	r0, [pc, #100]	; (80052e4 <tcpip_try_callback+0x70>)
 8005280:	f00b ff9b 	bl	80111ba <sys_mbox_valid>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <tcpip_try_callback+0x24>
 800528a:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <tcpip_try_callback+0x74>)
 800528c:	f240 125d 	movw	r2, #349	; 0x15d
 8005290:	4916      	ldr	r1, [pc, #88]	; (80052ec <tcpip_try_callback+0x78>)
 8005292:	4817      	ldr	r0, [pc, #92]	; (80052f0 <tcpip_try_callback+0x7c>)
 8005294:	f00c feb8 	bl	8012008 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005298:	2008      	movs	r0, #8
 800529a:	f000 fd2b 	bl	8005cf4 <memp_malloc>
 800529e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <tcpip_try_callback+0x38>
    return ERR_MEM;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052aa:	e017      	b.n	80052dc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	4808      	ldr	r0, [pc, #32]	; (80052e4 <tcpip_try_callback+0x70>)
 80052c2:	f00b ff21 	bl	8011108 <sys_mbox_trypost>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	2008      	movs	r0, #8
 80052d0:	f000 fd62 	bl	8005d98 <memp_free>
    return ERR_MEM;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d8:	e000      	b.n	80052dc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20003df4 	.word	0x20003df4
 80052e8:	08012e68 	.word	0x08012e68
 80052ec:	08012ee0 	.word	0x08012ee0
 80052f0:	08012eb8 	.word	0x08012eb8

080052f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80052fe:	f000 f871 	bl	80053e4 <lwip_init>

  tcpip_init_done = initfunc;
 8005302:	4a17      	ldr	r2, [pc, #92]	; (8005360 <tcpip_init+0x6c>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <tcpip_init+0x70>)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800530e:	2106      	movs	r1, #6
 8005310:	4815      	ldr	r0, [pc, #84]	; (8005368 <tcpip_init+0x74>)
 8005312:	f00b fedb 	bl	80110cc <sys_mbox_new>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <tcpip_init+0x78>)
 800531e:	f240 2261 	movw	r2, #609	; 0x261
 8005322:	4913      	ldr	r1, [pc, #76]	; (8005370 <tcpip_init+0x7c>)
 8005324:	4813      	ldr	r0, [pc, #76]	; (8005374 <tcpip_init+0x80>)
 8005326:	f00c fe6f 	bl	8012008 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800532a:	4813      	ldr	r0, [pc, #76]	; (8005378 <tcpip_init+0x84>)
 800532c:	f00b ff64 	bl	80111f8 <sys_mutex_new>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d006      	beq.n	8005344 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <tcpip_init+0x78>)
 8005338:	f240 2265 	movw	r2, #613	; 0x265
 800533c:	490f      	ldr	r1, [pc, #60]	; (800537c <tcpip_init+0x88>)
 800533e:	480d      	ldr	r0, [pc, #52]	; (8005374 <tcpip_init+0x80>)
 8005340:	f00c fe62 	bl	8012008 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005344:	2303      	movs	r3, #3
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800534c:	2200      	movs	r2, #0
 800534e:	490c      	ldr	r1, [pc, #48]	; (8005380 <tcpip_init+0x8c>)
 8005350:	480c      	ldr	r0, [pc, #48]	; (8005384 <tcpip_init+0x90>)
 8005352:	f00b ff87 	bl	8011264 <sys_thread_new>
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20003dec 	.word	0x20003dec
 8005364:	20003df0 	.word	0x20003df0
 8005368:	20003df4 	.word	0x20003df4
 800536c:	08012e68 	.word	0x08012e68
 8005370:	08012ef0 	.word	0x08012ef0
 8005374:	08012eb8 	.word	0x08012eb8
 8005378:	20003f9c 	.word	0x20003f9c
 800537c:	08012f14 	.word	0x08012f14
 8005380:	080050b9 	.word	0x080050b9
 8005384:	08012f38 	.word	0x08012f38

08005388 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	b21a      	sxth	r2, r3
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	b29b      	uxth	r3, r3
 800539e:	b21b      	sxth	r3, r3
 80053a0:	4313      	orrs	r3, r2
 80053a2:	b21b      	sxth	r3, r3
 80053a4:	b29b      	uxth	r3, r3
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	061a      	lsls	r2, r3, #24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0e1b      	lsrs	r3, r3, #24
 80053d6:	4313      	orrs	r3, r2
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80053ee:	f00b fef5 	bl	80111dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80053f2:	f000 f8d5 	bl	80055a0 <mem_init>
  memp_init();
 80053f6:	f000 fc31 	bl	8005c5c <memp_init>
  pbuf_init();
  netif_init();
 80053fa:	f000 fcf7 	bl	8005dec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80053fe:	f007 f877 	bl	800c4f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005402:	f001 fda1 	bl	8006f48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005406:	f006 ffbb 	bl	800c380 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <ptr_to_mem+0x20>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	4413      	add	r3, r2
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20003df8 	.word	0x20003df8

08005438 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a05      	ldr	r2, [pc, #20]	; (8005458 <mem_to_ptr+0x20>)
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	b29b      	uxth	r3, r3
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20003df8 	.word	0x20003df8

0800545c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005464:	4b45      	ldr	r3, [pc, #276]	; (800557c <plug_holes+0x120>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d206      	bcs.n	800547c <plug_holes+0x20>
 800546e:	4b44      	ldr	r3, [pc, #272]	; (8005580 <plug_holes+0x124>)
 8005470:	f240 12df 	movw	r2, #479	; 0x1df
 8005474:	4943      	ldr	r1, [pc, #268]	; (8005584 <plug_holes+0x128>)
 8005476:	4844      	ldr	r0, [pc, #272]	; (8005588 <plug_holes+0x12c>)
 8005478:	f00c fdc6 	bl	8012008 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800547c:	4b43      	ldr	r3, [pc, #268]	; (800558c <plug_holes+0x130>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d306      	bcc.n	8005494 <plug_holes+0x38>
 8005486:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <plug_holes+0x124>)
 8005488:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800548c:	4940      	ldr	r1, [pc, #256]	; (8005590 <plug_holes+0x134>)
 800548e:	483e      	ldr	r0, [pc, #248]	; (8005588 <plug_holes+0x12c>)
 8005490:	f00c fdba 	bl	8012008 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	791b      	ldrb	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <plug_holes+0x4e>
 800549c:	4b38      	ldr	r3, [pc, #224]	; (8005580 <plug_holes+0x124>)
 800549e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80054a2:	493c      	ldr	r1, [pc, #240]	; (8005594 <plug_holes+0x138>)
 80054a4:	4838      	ldr	r0, [pc, #224]	; (8005588 <plug_holes+0x12c>)
 80054a6:	f00c fdaf 	bl	8012008 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054b2:	d906      	bls.n	80054c2 <plug_holes+0x66>
 80054b4:	4b32      	ldr	r3, [pc, #200]	; (8005580 <plug_holes+0x124>)
 80054b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80054ba:	4937      	ldr	r1, [pc, #220]	; (8005598 <plug_holes+0x13c>)
 80054bc:	4832      	ldr	r0, [pc, #200]	; (8005588 <plug_holes+0x12c>)
 80054be:	f00c fda3 	bl	8012008 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff ffa4 	bl	8005414 <ptr_to_mem>
 80054cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d024      	beq.n	8005520 <plug_holes+0xc4>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	791b      	ldrb	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d120      	bne.n	8005520 <plug_holes+0xc4>
 80054de:	4b2b      	ldr	r3, [pc, #172]	; (800558c <plug_holes+0x130>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d01b      	beq.n	8005520 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <plug_holes+0x140>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d102      	bne.n	80054f8 <plug_holes+0x9c>
      lfree = mem;
 80054f2:	4a2a      	ldr	r2, [pc, #168]	; (800559c <plug_holes+0x140>)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	881a      	ldrh	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005508:	d00a      	beq.n	8005520 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff80 	bl	8005414 <ptr_to_mem>
 8005514:	4604      	mov	r4, r0
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff ff8e 	bl	8005438 <mem_to_ptr>
 800551c:	4603      	mov	r3, r0
 800551e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	885b      	ldrh	r3, [r3, #2]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff75 	bl	8005414 <ptr_to_mem>
 800552a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d01f      	beq.n	8005574 <plug_holes+0x118>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	791b      	ldrb	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11b      	bne.n	8005574 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800553c:	4b17      	ldr	r3, [pc, #92]	; (800559c <plug_holes+0x140>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d102      	bne.n	800554c <plug_holes+0xf0>
      lfree = pmem;
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <plug_holes+0x140>)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800555c:	d00a      	beq.n	8005574 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff ff56 	bl	8005414 <ptr_to_mem>
 8005568:	4604      	mov	r4, r0
 800556a:	68b8      	ldr	r0, [r7, #8]
 800556c:	f7ff ff64 	bl	8005438 <mem_to_ptr>
 8005570:	4603      	mov	r3, r0
 8005572:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bd90      	pop	{r4, r7, pc}
 800557c:	20003df8 	.word	0x20003df8
 8005580:	08012f48 	.word	0x08012f48
 8005584:	08012f78 	.word	0x08012f78
 8005588:	08012f90 	.word	0x08012f90
 800558c:	20003dfc 	.word	0x20003dfc
 8005590:	08012fb8 	.word	0x08012fb8
 8005594:	08012fd4 	.word	0x08012fd4
 8005598:	08012ff0 	.word	0x08012ff0
 800559c:	20003e04 	.word	0x20003e04

080055a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <mem_init+0x84>)
 80055a8:	3303      	adds	r3, #3
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <mem_init+0x88>)
 80055b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80055b4:	4b1c      	ldr	r3, [pc, #112]	; (8005628 <mem_init+0x88>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80055c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80055ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80055d2:	f7ff ff1f 	bl	8005414 <ptr_to_mem>
 80055d6:	4602      	mov	r2, r0
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <mem_init+0x8c>)
 80055da:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80055dc:	4b13      	ldr	r3, [pc, #76]	; (800562c <mem_init+0x8c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <mem_init+0x8c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80055ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <mem_init+0x8c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80055f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <mem_init+0x88>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <mem_init+0x90>)
 80055fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8005600:	480c      	ldr	r0, [pc, #48]	; (8005634 <mem_init+0x94>)
 8005602:	f00b fdf9 	bl	80111f8 <sys_mutex_new>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <mem_init+0x98>)
 800560e:	f240 221f 	movw	r2, #543	; 0x21f
 8005612:	490a      	ldr	r1, [pc, #40]	; (800563c <mem_init+0x9c>)
 8005614:	480a      	ldr	r0, [pc, #40]	; (8005640 <mem_init+0xa0>)
 8005616:	f00c fcf7 	bl	8012008 <iprintf>
  }
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20003fb8 	.word	0x20003fb8
 8005628:	20003df8 	.word	0x20003df8
 800562c:	20003dfc 	.word	0x20003dfc
 8005630:	20003e04 	.word	0x20003e04
 8005634:	20003e00 	.word	0x20003e00
 8005638:	08012f48 	.word	0x08012f48
 800563c:	0801301c 	.word	0x0801301c
 8005640:	08012f90 	.word	0x08012f90

08005644 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fef3 	bl	8005438 <mem_to_ptr>
 8005652:	4603      	mov	r3, r0
 8005654:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff feda 	bl	8005414 <ptr_to_mem>
 8005660:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	885b      	ldrh	r3, [r3, #2]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fed4 	bl	8005414 <ptr_to_mem>
 800566c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005676:	d818      	bhi.n	80056aa <mem_link_valid+0x66>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	885b      	ldrh	r3, [r3, #2]
 800567c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005680:	d813      	bhi.n	80056aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005686:	8afa      	ldrh	r2, [r7, #22]
 8005688:	429a      	cmp	r2, r3
 800568a:	d004      	beq.n	8005696 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	8afa      	ldrh	r2, [r7, #22]
 8005692:	429a      	cmp	r2, r3
 8005694:	d109      	bne.n	80056aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <mem_link_valid+0x74>)
 8005698:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d006      	beq.n	80056ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	885b      	ldrh	r3, [r3, #2]
 80056a4:	8afa      	ldrh	r2, [r7, #22]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d001      	beq.n	80056ae <mem_link_valid+0x6a>
    return 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <mem_link_valid+0x6c>
  }
  return 1;
 80056ae:	2301      	movs	r3, #1
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20003dfc 	.word	0x20003dfc

080056bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d070      	beq.n	80057ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80056d4:	4b37      	ldr	r3, [pc, #220]	; (80057b4 <mem_free+0xf8>)
 80056d6:	f240 2273 	movw	r2, #627	; 0x273
 80056da:	4937      	ldr	r1, [pc, #220]	; (80057b8 <mem_free+0xfc>)
 80056dc:	4837      	ldr	r0, [pc, #220]	; (80057bc <mem_free+0x100>)
 80056de:	f00c fc93 	bl	8012008 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80056e2:	f00b fddd 	bl	80112a0 <sys_arch_protect>
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f00b fde7 	bl	80112bc <sys_arch_unprotect>
    return;
 80056ee:	e05e      	b.n	80057ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3b08      	subs	r3, #8
 80056f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <mem_free+0x104>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d306      	bcc.n	800570e <mem_free+0x52>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 020c 	add.w	r2, r3, #12
 8005706:	4b2f      	ldr	r3, [pc, #188]	; (80057c4 <mem_free+0x108>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d90d      	bls.n	800572a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800570e:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <mem_free+0xf8>)
 8005710:	f240 227f 	movw	r2, #639	; 0x27f
 8005714:	492c      	ldr	r1, [pc, #176]	; (80057c8 <mem_free+0x10c>)
 8005716:	4829      	ldr	r0, [pc, #164]	; (80057bc <mem_free+0x100>)
 8005718:	f00c fc76 	bl	8012008 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800571c:	f00b fdc0 	bl	80112a0 <sys_arch_protect>
 8005720:	6138      	str	r0, [r7, #16]
 8005722:	6938      	ldr	r0, [r7, #16]
 8005724:	f00b fdca 	bl	80112bc <sys_arch_unprotect>
    return;
 8005728:	e041      	b.n	80057ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800572a:	4828      	ldr	r0, [pc, #160]	; (80057cc <mem_free+0x110>)
 800572c:	f00b fd7e 	bl	801122c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	791b      	ldrb	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d110      	bne.n	800575a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005738:	4b1e      	ldr	r3, [pc, #120]	; (80057b4 <mem_free+0xf8>)
 800573a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800573e:	4924      	ldr	r1, [pc, #144]	; (80057d0 <mem_free+0x114>)
 8005740:	481e      	ldr	r0, [pc, #120]	; (80057bc <mem_free+0x100>)
 8005742:	f00c fc61 	bl	8012008 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8005746:	4821      	ldr	r0, [pc, #132]	; (80057cc <mem_free+0x110>)
 8005748:	f00b fd7f 	bl	801124a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800574c:	f00b fda8 	bl	80112a0 <sys_arch_protect>
 8005750:	6178      	str	r0, [r7, #20]
 8005752:	6978      	ldr	r0, [r7, #20]
 8005754:	f00b fdb2 	bl	80112bc <sys_arch_unprotect>
    return;
 8005758:	e029      	b.n	80057ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800575a:	69f8      	ldr	r0, [r7, #28]
 800575c:	f7ff ff72 	bl	8005644 <mem_link_valid>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d110      	bne.n	8005788 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <mem_free+0xf8>)
 8005768:	f240 2295 	movw	r2, #661	; 0x295
 800576c:	4919      	ldr	r1, [pc, #100]	; (80057d4 <mem_free+0x118>)
 800576e:	4813      	ldr	r0, [pc, #76]	; (80057bc <mem_free+0x100>)
 8005770:	f00c fc4a 	bl	8012008 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8005774:	4815      	ldr	r0, [pc, #84]	; (80057cc <mem_free+0x110>)
 8005776:	f00b fd68 	bl	801124a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800577a:	f00b fd91 	bl	80112a0 <sys_arch_protect>
 800577e:	61b8      	str	r0, [r7, #24]
 8005780:	69b8      	ldr	r0, [r7, #24]
 8005782:	f00b fd9b 	bl	80112bc <sys_arch_unprotect>
    return;
 8005786:	e012      	b.n	80057ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2200      	movs	r2, #0
 800578c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <mem_free+0x11c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	d202      	bcs.n	800579e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005798:	4a0f      	ldr	r2, [pc, #60]	; (80057d8 <mem_free+0x11c>)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800579e:	69f8      	ldr	r0, [r7, #28]
 80057a0:	f7ff fe5c 	bl	800545c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80057a4:	4809      	ldr	r0, [pc, #36]	; (80057cc <mem_free+0x110>)
 80057a6:	f00b fd50 	bl	801124a <sys_mutex_unlock>
 80057aa:	e000      	b.n	80057ae <mem_free+0xf2>
    return;
 80057ac:	bf00      	nop
}
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	08012f48 	.word	0x08012f48
 80057b8:	08013038 	.word	0x08013038
 80057bc:	08012f90 	.word	0x08012f90
 80057c0:	20003df8 	.word	0x20003df8
 80057c4:	20003dfc 	.word	0x20003dfc
 80057c8:	0801305c 	.word	0x0801305c
 80057cc:	20003e00 	.word	0x20003e00
 80057d0:	08013078 	.word	0x08013078
 80057d4:	080130a0 	.word	0x080130a0
 80057d8:	20003e04 	.word	0x20003e04

080057dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	3303      	adds	r3, #3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80057f4:	8bfb      	ldrh	r3, [r7, #30]
 80057f6:	2b0b      	cmp	r3, #11
 80057f8:	d801      	bhi.n	80057fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80057fa:	230c      	movs	r3, #12
 80057fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80057fe:	8bfb      	ldrh	r3, [r7, #30]
 8005800:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005804:	d803      	bhi.n	800580e <mem_trim+0x32>
 8005806:	8bfa      	ldrh	r2, [r7, #30]
 8005808:	887b      	ldrh	r3, [r7, #2]
 800580a:	429a      	cmp	r2, r3
 800580c:	d201      	bcs.n	8005812 <mem_trim+0x36>
    return NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	e0d8      	b.n	80059c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005812:	4b6e      	ldr	r3, [pc, #440]	; (80059cc <mem_trim+0x1f0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d304      	bcc.n	8005826 <mem_trim+0x4a>
 800581c:	4b6c      	ldr	r3, [pc, #432]	; (80059d0 <mem_trim+0x1f4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d306      	bcc.n	8005834 <mem_trim+0x58>
 8005826:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <mem_trim+0x1f8>)
 8005828:	f240 22d2 	movw	r2, #722	; 0x2d2
 800582c:	496a      	ldr	r1, [pc, #424]	; (80059d8 <mem_trim+0x1fc>)
 800582e:	486b      	ldr	r0, [pc, #428]	; (80059dc <mem_trim+0x200>)
 8005830:	f00c fbea 	bl	8012008 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005834:	4b65      	ldr	r3, [pc, #404]	; (80059cc <mem_trim+0x1f0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d304      	bcc.n	8005848 <mem_trim+0x6c>
 800583e:	4b64      	ldr	r3, [pc, #400]	; (80059d0 <mem_trim+0x1f4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d307      	bcc.n	8005858 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8005848:	f00b fd2a 	bl	80112a0 <sys_arch_protect>
 800584c:	60b8      	str	r0, [r7, #8]
 800584e:	68b8      	ldr	r0, [r7, #8]
 8005850:	f00b fd34 	bl	80112bc <sys_arch_unprotect>
    return rmem;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	e0b5      	b.n	80059c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3b08      	subs	r3, #8
 800585c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800585e:	69b8      	ldr	r0, [r7, #24]
 8005860:	f7ff fdea 	bl	8005438 <mem_to_ptr>
 8005864:	4603      	mov	r3, r0
 8005866:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	8afb      	ldrh	r3, [r7, #22]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b08      	subs	r3, #8
 8005874:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005876:	8bfa      	ldrh	r2, [r7, #30]
 8005878:	8abb      	ldrh	r3, [r7, #20]
 800587a:	429a      	cmp	r2, r3
 800587c:	d906      	bls.n	800588c <mem_trim+0xb0>
 800587e:	4b55      	ldr	r3, [pc, #340]	; (80059d4 <mem_trim+0x1f8>)
 8005880:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005884:	4956      	ldr	r1, [pc, #344]	; (80059e0 <mem_trim+0x204>)
 8005886:	4855      	ldr	r0, [pc, #340]	; (80059dc <mem_trim+0x200>)
 8005888:	f00c fbbe 	bl	8012008 <iprintf>
  if (newsize > size) {
 800588c:	8bfa      	ldrh	r2, [r7, #30]
 800588e:	8abb      	ldrh	r3, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	d901      	bls.n	8005898 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	e095      	b.n	80059c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8005898:	8bfa      	ldrh	r2, [r7, #30]
 800589a:	8abb      	ldrh	r3, [r7, #20]
 800589c:	429a      	cmp	r2, r3
 800589e:	d101      	bne.n	80058a4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	e08f      	b.n	80059c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80058a4:	484f      	ldr	r0, [pc, #316]	; (80059e4 <mem_trim+0x208>)
 80058a6:	f00b fcc1 	bl	801122c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff fdb0 	bl	8005414 <ptr_to_mem>
 80058b4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	791b      	ldrb	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d13f      	bne.n	800593e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058c6:	d106      	bne.n	80058d6 <mem_trim+0xfa>
 80058c8:	4b42      	ldr	r3, [pc, #264]	; (80059d4 <mem_trim+0x1f8>)
 80058ca:	f240 22f5 	movw	r2, #757	; 0x2f5
 80058ce:	4946      	ldr	r1, [pc, #280]	; (80059e8 <mem_trim+0x20c>)
 80058d0:	4842      	ldr	r0, [pc, #264]	; (80059dc <mem_trim+0x200>)
 80058d2:	f00c fb99 	bl	8012008 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80058dc:	8afa      	ldrh	r2, [r7, #22]
 80058de:	8bfb      	ldrh	r3, [r7, #30]
 80058e0:	4413      	add	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3308      	adds	r3, #8
 80058e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80058e8:	4b40      	ldr	r3, [pc, #256]	; (80059ec <mem_trim+0x210>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d106      	bne.n	8005900 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fd8d 	bl	8005414 <ptr_to_mem>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b3b      	ldr	r3, [pc, #236]	; (80059ec <mem_trim+0x210>)
 80058fe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fd86 	bl	8005414 <ptr_to_mem>
 8005908:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2200      	movs	r2, #0
 800590e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	89ba      	ldrh	r2, [r7, #12]
 8005914:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	8afa      	ldrh	r2, [r7, #22]
 800591a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	89fa      	ldrh	r2, [r7, #14]
 8005920:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800592a:	d047      	beq.n	80059bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fd6f 	bl	8005414 <ptr_to_mem>
 8005936:	4602      	mov	r2, r0
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	8053      	strh	r3, [r2, #2]
 800593c:	e03e      	b.n	80059bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800593e:	8bfb      	ldrh	r3, [r7, #30]
 8005940:	f103 0214 	add.w	r2, r3, #20
 8005944:	8abb      	ldrh	r3, [r7, #20]
 8005946:	429a      	cmp	r2, r3
 8005948:	d838      	bhi.n	80059bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800594a:	8afa      	ldrh	r2, [r7, #22]
 800594c:	8bfb      	ldrh	r3, [r7, #30]
 800594e:	4413      	add	r3, r2
 8005950:	b29b      	uxth	r3, r3
 8005952:	3308      	adds	r3, #8
 8005954:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800595e:	d106      	bne.n	800596e <mem_trim+0x192>
 8005960:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <mem_trim+0x1f8>)
 8005962:	f240 3216 	movw	r2, #790	; 0x316
 8005966:	4920      	ldr	r1, [pc, #128]	; (80059e8 <mem_trim+0x20c>)
 8005968:	481c      	ldr	r0, [pc, #112]	; (80059dc <mem_trim+0x200>)
 800596a:	f00c fb4d 	bl	8012008 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800596e:	89fb      	ldrh	r3, [r7, #14]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fd4f 	bl	8005414 <ptr_to_mem>
 8005976:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005978:	4b1c      	ldr	r3, [pc, #112]	; (80059ec <mem_trim+0x210>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	429a      	cmp	r2, r3
 8005980:	d202      	bcs.n	8005988 <mem_trim+0x1ac>
      lfree = mem2;
 8005982:	4a1a      	ldr	r2, [pc, #104]	; (80059ec <mem_trim+0x210>)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2200      	movs	r2, #0
 800598c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	881a      	ldrh	r2, [r3, #0]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	8afa      	ldrh	r2, [r7, #22]
 800599a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	89fa      	ldrh	r2, [r7, #14]
 80059a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059aa:	d007      	beq.n	80059bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fd2f 	bl	8005414 <ptr_to_mem>
 80059b6:	4602      	mov	r2, r0
 80059b8:	89fb      	ldrh	r3, [r7, #14]
 80059ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80059bc:	4809      	ldr	r0, [pc, #36]	; (80059e4 <mem_trim+0x208>)
 80059be:	f00b fc44 	bl	801124a <sys_mutex_unlock>
  return rmem;
 80059c2:	687b      	ldr	r3, [r7, #4]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20003df8 	.word	0x20003df8
 80059d0:	20003dfc 	.word	0x20003dfc
 80059d4:	08012f48 	.word	0x08012f48
 80059d8:	080130d4 	.word	0x080130d4
 80059dc:	08012f90 	.word	0x08012f90
 80059e0:	080130ec 	.word	0x080130ec
 80059e4:	20003e00 	.word	0x20003e00
 80059e8:	0801310c 	.word	0x0801310c
 80059ec:	20003e04 	.word	0x20003e04

080059f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <mem_malloc+0x14>
    return NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e0e2      	b.n	8005bca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	3303      	adds	r3, #3
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005a10:	8bbb      	ldrh	r3, [r7, #28]
 8005a12:	2b0b      	cmp	r3, #11
 8005a14:	d801      	bhi.n	8005a1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005a16:	230c      	movs	r3, #12
 8005a18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005a1a:	8bbb      	ldrh	r3, [r7, #28]
 8005a1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a20:	d803      	bhi.n	8005a2a <mem_malloc+0x3a>
 8005a22:	8bba      	ldrh	r2, [r7, #28]
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d201      	bcs.n	8005a2e <mem_malloc+0x3e>
    return NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e0cd      	b.n	8005bca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8005a2e:	4869      	ldr	r0, [pc, #420]	; (8005bd4 <mem_malloc+0x1e4>)
 8005a30:	f00b fbfc 	bl	801122c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a34:	4b68      	ldr	r3, [pc, #416]	; (8005bd8 <mem_malloc+0x1e8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fcfd 	bl	8005438 <mem_to_ptr>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	83fb      	strh	r3, [r7, #30]
 8005a42:	e0b7      	b.n	8005bb4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005a44:	8bfb      	ldrh	r3, [r7, #30]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fce4 	bl	8005414 <ptr_to_mem>
 8005a4c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	791b      	ldrb	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 80a7 	bne.w	8005ba6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	8bfb      	ldrh	r3, [r7, #30]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f1a3 0208 	sub.w	r2, r3, #8
 8005a66:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	f0c0 809c 	bcc.w	8005ba6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	8bfb      	ldrh	r3, [r7, #30]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f1a3 0208 	sub.w	r2, r3, #8
 8005a7c:	8bbb      	ldrh	r3, [r7, #28]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d333      	bcc.n	8005aec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005a84:	8bfa      	ldrh	r2, [r7, #30]
 8005a86:	8bbb      	ldrh	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005a90:	8a7b      	ldrh	r3, [r7, #18]
 8005a92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a96:	d106      	bne.n	8005aa6 <mem_malloc+0xb6>
 8005a98:	4b50      	ldr	r3, [pc, #320]	; (8005bdc <mem_malloc+0x1ec>)
 8005a9a:	f240 3287 	movw	r2, #903	; 0x387
 8005a9e:	4950      	ldr	r1, [pc, #320]	; (8005be0 <mem_malloc+0x1f0>)
 8005aa0:	4850      	ldr	r0, [pc, #320]	; (8005be4 <mem_malloc+0x1f4>)
 8005aa2:	f00c fab1 	bl	8012008 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005aa6:	8a7b      	ldrh	r3, [r7, #18]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fcb3 	bl	8005414 <ptr_to_mem>
 8005aae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	881a      	ldrh	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8bfa      	ldrh	r2, [r7, #30]
 8005ac2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	8a7a      	ldrh	r2, [r7, #18]
 8005ac8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2201      	movs	r2, #1
 8005ace:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ad8:	d00b      	beq.n	8005af2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fc98 	bl	8005414 <ptr_to_mem>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	8a7b      	ldrh	r3, [r7, #18]
 8005ae8:	8053      	strh	r3, [r2, #2]
 8005aea:	e002      	b.n	8005af2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2201      	movs	r2, #1
 8005af0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005af2:	4b39      	ldr	r3, [pc, #228]	; (8005bd8 <mem_malloc+0x1e8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d127      	bne.n	8005b4c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8005afc:	4b36      	ldr	r3, [pc, #216]	; (8005bd8 <mem_malloc+0x1e8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005b02:	e005      	b.n	8005b10 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fc83 	bl	8005414 <ptr_to_mem>
 8005b0e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	791b      	ldrb	r3, [r3, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <mem_malloc+0x132>
 8005b18:	4b33      	ldr	r3, [pc, #204]	; (8005be8 <mem_malloc+0x1f8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d1f0      	bne.n	8005b04 <mem_malloc+0x114>
          }
          lfree = cur;
 8005b22:	4a2d      	ldr	r2, [pc, #180]	; (8005bd8 <mem_malloc+0x1e8>)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005b28:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <mem_malloc+0x1e8>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b2e      	ldr	r3, [pc, #184]	; (8005be8 <mem_malloc+0x1f8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d00b      	beq.n	8005b4c <mem_malloc+0x15c>
 8005b34:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <mem_malloc+0x1e8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	791b      	ldrb	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d006      	beq.n	8005b4c <mem_malloc+0x15c>
 8005b3e:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <mem_malloc+0x1ec>)
 8005b40:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005b44:	4929      	ldr	r1, [pc, #164]	; (8005bec <mem_malloc+0x1fc>)
 8005b46:	4827      	ldr	r0, [pc, #156]	; (8005be4 <mem_malloc+0x1f4>)
 8005b48:	f00c fa5e 	bl	8012008 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8005b4c:	4821      	ldr	r0, [pc, #132]	; (8005bd4 <mem_malloc+0x1e4>)
 8005b4e:	f00b fb7c 	bl	801124a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005b52:	8bba      	ldrh	r2, [r7, #28]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	3308      	adds	r3, #8
 8005b5a:	4a23      	ldr	r2, [pc, #140]	; (8005be8 <mem_malloc+0x1f8>)
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d906      	bls.n	8005b70 <mem_malloc+0x180>
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <mem_malloc+0x1ec>)
 8005b64:	f240 32ba 	movw	r2, #954	; 0x3ba
 8005b68:	4921      	ldr	r1, [pc, #132]	; (8005bf0 <mem_malloc+0x200>)
 8005b6a:	481e      	ldr	r0, [pc, #120]	; (8005be4 <mem_malloc+0x1f4>)
 8005b6c:	f00c fa4c 	bl	8012008 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <mem_malloc+0x198>
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <mem_malloc+0x1ec>)
 8005b7c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005b80:	491c      	ldr	r1, [pc, #112]	; (8005bf4 <mem_malloc+0x204>)
 8005b82:	4818      	ldr	r0, [pc, #96]	; (8005be4 <mem_malloc+0x1f4>)
 8005b84:	f00c fa40 	bl	8012008 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <mem_malloc+0x1b0>
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <mem_malloc+0x1ec>)
 8005b94:	f240 32be 	movw	r2, #958	; 0x3be
 8005b98:	4917      	ldr	r1, [pc, #92]	; (8005bf8 <mem_malloc+0x208>)
 8005b9a:	4812      	ldr	r0, [pc, #72]	; (8005be4 <mem_malloc+0x1f4>)
 8005b9c:	f00c fa34 	bl	8012008 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	e011      	b.n	8005bca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8005ba6:	8bfb      	ldrh	r3, [r7, #30]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fc33 	bl	8005414 <ptr_to_mem>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005bb4:	8bfa      	ldrh	r2, [r7, #30]
 8005bb6:	8bbb      	ldrh	r3, [r7, #28]
 8005bb8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	f4ff af41 	bcc.w	8005a44 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8005bc2:	4804      	ldr	r0, [pc, #16]	; (8005bd4 <mem_malloc+0x1e4>)
 8005bc4:	f00b fb41 	bl	801124a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20003e00 	.word	0x20003e00
 8005bd8:	20003e04 	.word	0x20003e04
 8005bdc:	08012f48 	.word	0x08012f48
 8005be0:	0801310c 	.word	0x0801310c
 8005be4:	08012f90 	.word	0x08012f90
 8005be8:	20003dfc 	.word	0x20003dfc
 8005bec:	08013120 	.word	0x08013120
 8005bf0:	0801313c 	.word	0x0801313c
 8005bf4:	0801316c 	.word	0x0801316c
 8005bf8:	0801319c 	.word	0x0801319c

08005bfc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	3303      	adds	r3, #3
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e011      	b.n	8005c42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	885b      	ldrh	r3, [r3, #2]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	dbe7      	blt.n	8005c1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c62:	2300      	movs	r3, #0
 8005c64:	80fb      	strh	r3, [r7, #6]
 8005c66:	e009      	b.n	8005c7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <memp_init+0x30>)
 8005c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ffc3 	bl	8005bfc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	80fb      	strh	r3, [r7, #6]
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d9f2      	bls.n	8005c68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08015db4 	.word	0x08015db4

08005c90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8005c98:	f00b fb02 	bl	80112a0 <sys_arch_protect>
 8005c9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d015      	beq.n	8005cd8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <do_memp_malloc_pool+0x3e>
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <do_memp_malloc_pool+0x58>)
 8005cc2:	f240 1219 	movw	r2, #281	; 0x119
 8005cc6:	4909      	ldr	r1, [pc, #36]	; (8005cec <do_memp_malloc_pool+0x5c>)
 8005cc8:	4809      	ldr	r0, [pc, #36]	; (8005cf0 <do_memp_malloc_pool+0x60>)
 8005cca:	f00c f99d 	bl	8012008 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f00b faf4 	bl	80112bc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	e003      	b.n	8005ce0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f00b faef 	bl	80112bc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	080131c0 	.word	0x080131c0
 8005cec:	080131f0 	.word	0x080131f0
 8005cf0:	08013214 	.word	0x08013214

08005cf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d908      	bls.n	8005d16 <memp_malloc+0x22>
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <memp_malloc+0x3c>)
 8005d06:	f240 1257 	movw	r2, #343	; 0x157
 8005d0a:	490a      	ldr	r1, [pc, #40]	; (8005d34 <memp_malloc+0x40>)
 8005d0c:	480a      	ldr	r0, [pc, #40]	; (8005d38 <memp_malloc+0x44>)
 8005d0e:	f00c f97b 	bl	8012008 <iprintf>
 8005d12:	2300      	movs	r3, #0
 8005d14:	e008      	b.n	8005d28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <memp_malloc+0x48>)
 8005d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff ffb6 	bl	8005c90 <do_memp_malloc_pool>
 8005d24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005d26:	68fb      	ldr	r3, [r7, #12]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	080131c0 	.word	0x080131c0
 8005d34:	08013250 	.word	0x08013250
 8005d38:	08013214 	.word	0x08013214
 8005d3c:	08015db4 	.word	0x08015db4

08005d40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d006      	beq.n	8005d62 <do_memp_free_pool+0x22>
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <do_memp_free_pool+0x4c>)
 8005d56:	f240 126d 	movw	r2, #365	; 0x16d
 8005d5a:	490d      	ldr	r1, [pc, #52]	; (8005d90 <do_memp_free_pool+0x50>)
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <do_memp_free_pool+0x54>)
 8005d5e:	f00c f953 	bl	8012008 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8005d66:	f00b fa9b 	bl	80112a0 <sys_arch_protect>
 8005d6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8005d7e:	68b8      	ldr	r0, [r7, #8]
 8005d80:	f00b fa9c 	bl	80112bc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	080131c0 	.word	0x080131c0
 8005d90:	08013270 	.word	0x08013270
 8005d94:	08013214 	.word	0x08013214

08005d98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d907      	bls.n	8005dba <memp_free+0x22>
 8005daa:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <memp_free+0x44>)
 8005dac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005db0:	490b      	ldr	r1, [pc, #44]	; (8005de0 <memp_free+0x48>)
 8005db2:	480c      	ldr	r0, [pc, #48]	; (8005de4 <memp_free+0x4c>)
 8005db4:	f00c f928 	bl	8012008 <iprintf>
 8005db8:	e00c      	b.n	8005dd4 <memp_free+0x3c>

  if (mem == NULL) {
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <memp_free+0x50>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ffb8 	bl	8005d40 <do_memp_free_pool>
 8005dd0:	e000      	b.n	8005dd4 <memp_free+0x3c>
    return;
 8005dd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	080131c0 	.word	0x080131c0
 8005de0:	08013290 	.word	0x08013290
 8005de4:	08013214 	.word	0x08013214
 8005de8:	08015db4 	.word	0x08015db4

08005dec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <netif_add+0x26>
 8005e10:	4b59      	ldr	r3, [pc, #356]	; (8005f78 <netif_add+0x17c>)
 8005e12:	f240 1227 	movw	r2, #295	; 0x127
 8005e16:	4959      	ldr	r1, [pc, #356]	; (8005f7c <netif_add+0x180>)
 8005e18:	4859      	ldr	r0, [pc, #356]	; (8005f80 <netif_add+0x184>)
 8005e1a:	f00c f8f5 	bl	8012008 <iprintf>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e0a6      	b.n	8005f70 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <netif_add+0x3e>
 8005e28:	4b53      	ldr	r3, [pc, #332]	; (8005f78 <netif_add+0x17c>)
 8005e2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005e2e:	4955      	ldr	r1, [pc, #340]	; (8005f84 <netif_add+0x188>)
 8005e30:	4853      	ldr	r0, [pc, #332]	; (8005f80 <netif_add+0x184>)
 8005e32:	f00c f8e9 	bl	8012008 <iprintf>
 8005e36:	2300      	movs	r3, #0
 8005e38:	e09a      	b.n	8005f70 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005e40:	4b51      	ldr	r3, [pc, #324]	; (8005f88 <netif_add+0x18c>)
 8005e42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005e4a:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <netif_add+0x18c>)
 8005e4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005e54:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <netif_add+0x18c>)
 8005e56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a47      	ldr	r2, [pc, #284]	; (8005f8c <netif_add+0x190>)
 8005e6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3320      	adds	r3, #32
 8005e82:	2204      	movs	r2, #4
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f00c f8b6 	bl	8011ff8 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8005e92:	4b3f      	ldr	r3, [pc, #252]	; (8005f90 <netif_add+0x194>)
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f913 	bl	80060d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <netif_add+0xc2>
    return NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e058      	b.n	8005f70 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ec4:	2bff      	cmp	r3, #255	; 0xff
 8005ec6:	d103      	bne.n	8005ed0 <netif_add+0xd4>
        netif->num = 0;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ed4:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <netif_add+0x198>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e02b      	b.n	8005f34 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d106      	bne.n	8005ef2 <netif_add+0xf6>
 8005ee4:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <netif_add+0x17c>)
 8005ee6:	f240 128b 	movw	r2, #395	; 0x18b
 8005eea:	492b      	ldr	r1, [pc, #172]	; (8005f98 <netif_add+0x19c>)
 8005eec:	4824      	ldr	r0, [pc, #144]	; (8005f80 <netif_add+0x184>)
 8005eee:	f00c f88b 	bl	8012008 <iprintf>
        num_netifs++;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2bff      	cmp	r3, #255	; 0xff
 8005efc:	dd06      	ble.n	8005f0c <netif_add+0x110>
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <netif_add+0x17c>)
 8005f00:	f240 128d 	movw	r2, #397	; 0x18d
 8005f04:	4925      	ldr	r1, [pc, #148]	; (8005f9c <netif_add+0x1a0>)
 8005f06:	481e      	ldr	r0, [pc, #120]	; (8005f80 <netif_add+0x184>)
 8005f08:	f00c f87e 	bl	8012008 <iprintf>
        if (netif2->num == netif->num) {
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d108      	bne.n	8005f2e <netif_add+0x132>
          netif->num++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f22:	3301      	adds	r3, #1
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005f2c:	e005      	b.n	8005f3a <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1d0      	bne.n	8005edc <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1be      	bne.n	8005ebe <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f46:	2bfe      	cmp	r3, #254	; 0xfe
 8005f48:	d103      	bne.n	8005f52 <netif_add+0x156>
    netif_num = 0;
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <netif_add+0x194>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e006      	b.n	8005f60 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <netif_add+0x194>)
 8005f5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <netif_add+0x198>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005f68:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <netif_add+0x198>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	080132ac 	.word	0x080132ac
 8005f7c:	08013340 	.word	0x08013340
 8005f80:	080132fc 	.word	0x080132fc
 8005f84:	0801335c 	.word	0x0801335c
 8005f88:	08015e38 	.word	0x08015e38
 8005f8c:	080062c5 	.word	0x080062c5
 8005f90:	20003e3c 	.word	0x20003e3c
 8005f94:	200076c4 	.word	0x200076c4
 8005f98:	08013380 	.word	0x08013380
 8005f9c:	08013394 	.word	0x08013394

08005fa0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 fb07 	bl	80085c0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f006 ff27 	bl	800ce08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <netif_do_set_ipaddr+0x20>
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <netif_do_set_ipaddr+0x88>)
 8005fd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005fdc:	491c      	ldr	r1, [pc, #112]	; (8006050 <netif_do_set_ipaddr+0x8c>)
 8005fde:	481d      	ldr	r0, [pc, #116]	; (8006054 <netif_do_set_ipaddr+0x90>)
 8005fe0:	f00c f812 	bl	8012008 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <netif_do_set_ipaddr+0x34>
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <netif_do_set_ipaddr+0x88>)
 8005fec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005ff0:	4917      	ldr	r1, [pc, #92]	; (8006050 <netif_do_set_ipaddr+0x8c>)
 8005ff2:	4818      	ldr	r0, [pc, #96]	; (8006054 <netif_do_set_ipaddr+0x90>)
 8005ff4:	f00c f808 	bl	8012008 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3304      	adds	r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d01c      	beq.n	8006040 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3304      	adds	r3, #4
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006016:	f107 0314 	add.w	r3, r7, #20
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ffbf 	bl	8005fa0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <netif_do_set_ipaddr+0x6a>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e000      	b.n	8006030 <netif_do_set_ipaddr+0x6c>
 800602e:	2300      	movs	r3, #0
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006034:	2101      	movs	r1, #1
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f8d2 	bl	80061e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	080132ac 	.word	0x080132ac
 8006050:	080133c4 	.word	0x080133c4
 8006054:	080132fc 	.word	0x080132fc

08006058 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3308      	adds	r3, #8
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d00a      	beq.n	8006088 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <netif_do_set_netmask+0x26>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	e000      	b.n	8006080 <netif_do_set_netmask+0x28>
 800607e:	2300      	movs	r3, #0
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	330c      	adds	r3, #12
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d00a      	beq.n	80060c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <netif_do_set_gw+0x26>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	e000      	b.n	80060be <netif_do_set_gw+0x28>
 80060bc:	2300      	movs	r3, #0
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80060f0:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <netif_set_addr+0x90>)
 80060f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <netif_set_addr+0x90>)
 80060fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006104:	4b17      	ldr	r3, [pc, #92]	; (8006164 <netif_set_addr+0x90>)
 8006106:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <netif_set_addr+0x42>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <netif_set_addr+0x46>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <netif_set_addr+0x48>
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d006      	beq.n	8006132 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	461a      	mov	r2, r3
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff ff49 	bl	8005fc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff ff8e 	bl	8006058 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ffa8 	bl	8006096 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800614c:	f107 0310 	add.w	r3, r7, #16
 8006150:	461a      	mov	r2, r3
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff ff35 	bl	8005fc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800615a:	bf00      	nop
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	08015e38 	.word	0x08015e38

08006168 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006170:	4a04      	ldr	r2, [pc, #16]	; (8006184 <netif_set_default+0x1c>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	200076c8 	.word	0x200076c8

08006188 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d107      	bne.n	80061a6 <netif_set_up+0x1e>
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <netif_set_up+0x4c>)
 8006198:	f44f 7254 	mov.w	r2, #848	; 0x350
 800619c:	490e      	ldr	r1, [pc, #56]	; (80061d8 <netif_set_up+0x50>)
 800619e:	480f      	ldr	r0, [pc, #60]	; (80061dc <netif_set_up+0x54>)
 80061a0:	f00b ff32 	bl	8012008 <iprintf>
 80061a4:	e013      	b.n	80061ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10c      	bne.n	80061ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80061c6:	2103      	movs	r1, #3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f809 	bl	80061e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	080132ac 	.word	0x080132ac
 80061d8:	08013434 	.word	0x08013434
 80061dc:	080132fc 	.word	0x080132fc

080061e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <netif_issue_reports+0x20>
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <netif_issue_reports+0x74>)
 80061f4:	f240 326d 	movw	r2, #877	; 0x36d
 80061f8:	4917      	ldr	r1, [pc, #92]	; (8006258 <netif_issue_reports+0x78>)
 80061fa:	4818      	ldr	r0, [pc, #96]	; (800625c <netif_issue_reports+0x7c>)
 80061fc:	f00b ff04 	bl	8012008 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01e      	beq.n	800624c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006214:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3304      	adds	r3, #4
 800622a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f009 fba3 	bl	800f990 <etharp_request>
 800624a:	e000      	b.n	800624e <netif_issue_reports+0x6e>
    return;
 800624c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	080132ac 	.word	0x080132ac
 8006258:	08013450 	.word	0x08013450
 800625c:	080132fc 	.word	0x080132fc

08006260 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d107      	bne.n	800627e <netif_set_down+0x1e>
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <netif_set_down+0x58>)
 8006270:	f240 329b 	movw	r2, #923	; 0x39b
 8006274:	4911      	ldr	r1, [pc, #68]	; (80062bc <netif_set_down+0x5c>)
 8006276:	4812      	ldr	r0, [pc, #72]	; (80062c0 <netif_set_down+0x60>)
 8006278:	f00b fec6 	bl	8012008 <iprintf>
 800627c:	e019      	b.n	80062b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f008 ff29 	bl	800f104 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	080132ac 	.word	0x080132ac
 80062bc:	08013474 	.word	0x08013474
 80062c0:	080132fc 	.word	0x080132fc

080062c4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80062d0:	f06f 030b 	mvn.w	r3, #11
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d013      	beq.n	8006318 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80062f0:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <netif_get_by_index+0x48>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e00c      	b.n	8006312 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062fe:	3301      	adds	r3, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	79fa      	ldrb	r2, [r7, #7]
 8006304:	429a      	cmp	r2, r3
 8006306:	d101      	bne.n	800630c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	e006      	b.n	800631a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1ef      	bne.n	80062f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	200076c4 	.word	0x200076c4

0800632c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006332:	f00a ffb5 	bl	80112a0 <sys_arch_protect>
 8006336:	6038      	str	r0, [r7, #0]
 8006338:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <pbuf_free_ooseq+0x44>)
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	6838      	ldr	r0, [r7, #0]
 8006340:	f00a ffbc 	bl	80112bc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <pbuf_free_ooseq+0x48>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	e00a      	b.n	8006362 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f002 f971 	bl	800863c <tcp_free_ooseq>
      return;
 800635a:	e005      	b.n	8006368 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f1      	bne.n	800634c <pbuf_free_ooseq+0x20>
    }
  }
}
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	200076cc 	.word	0x200076cc
 8006374:	200076d4 	.word	0x200076d4

08006378 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8006380:	f7ff ffd4 	bl	800632c <pbuf_free_ooseq>
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8006392:	f00a ff85 	bl	80112a0 <sys_arch_protect>
 8006396:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <pbuf_pool_is_empty+0x4c>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <pbuf_pool_is_empty+0x4c>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f00a ff89 	bl	80112bc <sys_arch_unprotect>

  if (!queued) {
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10f      	bne.n	80063d0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80063b0:	2100      	movs	r1, #0
 80063b2:	480a      	ldr	r0, [pc, #40]	; (80063dc <pbuf_pool_is_empty+0x50>)
 80063b4:	f7fe ff5e 	bl	8005274 <tcpip_try_callback>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <pbuf_pool_is_empty+0x44>
 80063be:	f00a ff6f 	bl	80112a0 <sys_arch_protect>
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <pbuf_pool_is_empty+0x4c>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f00a ff76 	bl	80112bc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	200076cc 	.word	0x200076cc
 80063dc:	08006379 	.word	0x08006379

080063e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	460b      	mov	r3, r1
 80063f0:	80fb      	strh	r3, [r7, #6]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88ba      	ldrh	r2, [r7, #4]
 800640c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800640e:	8b3b      	ldrh	r3, [r7, #24]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	7f3a      	ldrb	r2, [r7, #28]
 800641a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	73da      	strb	r2, [r3, #15]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	; 0x30
 8006438:	af02      	add	r7, sp, #8
 800643a:	4603      	mov	r3, r0
 800643c:	71fb      	strb	r3, [r7, #7]
 800643e:	460b      	mov	r3, r1
 8006440:	80bb      	strh	r3, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800644a:	887b      	ldrh	r3, [r7, #2]
 800644c:	2b41      	cmp	r3, #65	; 0x41
 800644e:	d00b      	beq.n	8006468 <pbuf_alloc+0x34>
 8006450:	2b41      	cmp	r3, #65	; 0x41
 8006452:	dc02      	bgt.n	800645a <pbuf_alloc+0x26>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d007      	beq.n	8006468 <pbuf_alloc+0x34>
 8006458:	e0c2      	b.n	80065e0 <pbuf_alloc+0x1ac>
 800645a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800645e:	d00b      	beq.n	8006478 <pbuf_alloc+0x44>
 8006460:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006464:	d070      	beq.n	8006548 <pbuf_alloc+0x114>
 8006466:	e0bb      	b.n	80065e0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006468:	887a      	ldrh	r2, [r7, #2]
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	4619      	mov	r1, r3
 800646e:	2000      	movs	r0, #0
 8006470:	f000 f8d2 	bl	8006618 <pbuf_alloc_reference>
 8006474:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006476:	e0bd      	b.n	80065f4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006480:	88bb      	ldrh	r3, [r7, #4]
 8006482:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006484:	200c      	movs	r0, #12
 8006486:	f7ff fc35 	bl	8005cf4 <memp_malloc>
 800648a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8006492:	f7ff ff7b 	bl	800638c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800649c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800649e:	f000 faa9 	bl	80069f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e0a7      	b.n	80065f6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80064a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064a8:	3303      	adds	r3, #3
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f023 0303 	bic.w	r3, r3, #3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8b7a      	ldrh	r2, [r7, #26]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bf28      	it	cs
 80064be:	4613      	movcs	r3, r2
 80064c0:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80064c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064c4:	3310      	adds	r3, #16
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4413      	add	r3, r2
 80064ca:	3303      	adds	r3, #3
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	4618      	mov	r0, r3
 80064d2:	89f9      	ldrh	r1, [r7, #14]
 80064d4:	8b7a      	ldrh	r2, [r7, #26]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	887b      	ldrh	r3, [r7, #2]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	460b      	mov	r3, r1
 80064e0:	4601      	mov	r1, r0
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7ff ff7c 	bl	80063e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d006      	beq.n	8006502 <pbuf_alloc+0xce>
 80064f4:	4b42      	ldr	r3, [pc, #264]	; (8006600 <pbuf_alloc+0x1cc>)
 80064f6:	f240 1201 	movw	r2, #257	; 0x101
 80064fa:	4942      	ldr	r1, [pc, #264]	; (8006604 <pbuf_alloc+0x1d0>)
 80064fc:	4842      	ldr	r0, [pc, #264]	; (8006608 <pbuf_alloc+0x1d4>)
 80064fe:	f00b fd83 	bl	8012008 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006504:	3303      	adds	r3, #3
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800650e:	d106      	bne.n	800651e <pbuf_alloc+0xea>
 8006510:	4b3b      	ldr	r3, [pc, #236]	; (8006600 <pbuf_alloc+0x1cc>)
 8006512:	f240 1203 	movw	r2, #259	; 0x103
 8006516:	493d      	ldr	r1, [pc, #244]	; (800660c <pbuf_alloc+0x1d8>)
 8006518:	483b      	ldr	r0, [pc, #236]	; (8006608 <pbuf_alloc+0x1d4>)
 800651a:	f00b fd75 	bl	8012008 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
 8006528:	e002      	b.n	8006530 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006534:	8b7a      	ldrh	r2, [r7, #26]
 8006536:	89fb      	ldrh	r3, [r7, #14]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006540:	8b7b      	ldrh	r3, [r7, #26]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d19e      	bne.n	8006484 <pbuf_alloc+0x50>
      break;
 8006546:	e055      	b.n	80065f4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800654a:	3303      	adds	r3, #3
 800654c:	b29b      	uxth	r3, r3
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	b29a      	uxth	r2, r3
 8006554:	88bb      	ldrh	r3, [r7, #4]
 8006556:	3303      	adds	r3, #3
 8006558:	b29b      	uxth	r3, r3
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	b29b      	uxth	r3, r3
 8006560:	4413      	add	r3, r2
 8006562:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006564:	8b3b      	ldrh	r3, [r7, #24]
 8006566:	3310      	adds	r3, #16
 8006568:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800656a:	8b3a      	ldrh	r2, [r7, #24]
 800656c:	88bb      	ldrh	r3, [r7, #4]
 800656e:	3303      	adds	r3, #3
 8006570:	f023 0303 	bic.w	r3, r3, #3
 8006574:	429a      	cmp	r2, r3
 8006576:	d306      	bcc.n	8006586 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006578:	8afa      	ldrh	r2, [r7, #22]
 800657a:	88bb      	ldrh	r3, [r7, #4]
 800657c:	3303      	adds	r3, #3
 800657e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006582:	429a      	cmp	r2, r3
 8006584:	d201      	bcs.n	800658a <pbuf_alloc+0x156>
        return NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	e035      	b.n	80065f6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800658a:	8afb      	ldrh	r3, [r7, #22]
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fa2f 	bl	80059f0 <mem_malloc>
 8006592:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <pbuf_alloc+0x16a>
        return NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	e02b      	b.n	80065f6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800659e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a0:	3310      	adds	r3, #16
 80065a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a4:	4413      	add	r3, r2
 80065a6:	3303      	adds	r3, #3
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	4618      	mov	r0, r3
 80065ae:	88b9      	ldrh	r1, [r7, #4]
 80065b0:	88ba      	ldrh	r2, [r7, #4]
 80065b2:	2300      	movs	r3, #0
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	887b      	ldrh	r3, [r7, #2]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	460b      	mov	r3, r1
 80065bc:	4601      	mov	r1, r0
 80065be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c0:	f7ff ff0e 	bl	80063e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <pbuf_alloc+0x1be>
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <pbuf_alloc+0x1cc>)
 80065d2:	f240 1223 	movw	r2, #291	; 0x123
 80065d6:	490e      	ldr	r1, [pc, #56]	; (8006610 <pbuf_alloc+0x1dc>)
 80065d8:	480b      	ldr	r0, [pc, #44]	; (8006608 <pbuf_alloc+0x1d4>)
 80065da:	f00b fd15 	bl	8012008 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80065de:	e008      	b.n	80065f2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <pbuf_alloc+0x1cc>)
 80065e2:	f240 1227 	movw	r2, #295	; 0x127
 80065e6:	490b      	ldr	r1, [pc, #44]	; (8006614 <pbuf_alloc+0x1e0>)
 80065e8:	4807      	ldr	r0, [pc, #28]	; (8006608 <pbuf_alloc+0x1d4>)
 80065ea:	f00b fd0d 	bl	8012008 <iprintf>
      return NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e001      	b.n	80065f6 <pbuf_alloc+0x1c2>
      break;
 80065f2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3728      	adds	r7, #40	; 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	080134dc 	.word	0x080134dc
 8006604:	0801350c 	.word	0x0801350c
 8006608:	0801353c 	.word	0x0801353c
 800660c:	08013564 	.word	0x08013564
 8006610:	08013598 	.word	0x08013598
 8006614:	080135c4 	.word	0x080135c4

08006618 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
 8006624:	4613      	mov	r3, r2
 8006626:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006628:	883b      	ldrh	r3, [r7, #0]
 800662a:	2b41      	cmp	r3, #65	; 0x41
 800662c:	d009      	beq.n	8006642 <pbuf_alloc_reference+0x2a>
 800662e:	883b      	ldrh	r3, [r7, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d006      	beq.n	8006642 <pbuf_alloc_reference+0x2a>
 8006634:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <pbuf_alloc_reference+0x5c>)
 8006636:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800663a:	490f      	ldr	r1, [pc, #60]	; (8006678 <pbuf_alloc_reference+0x60>)
 800663c:	480f      	ldr	r0, [pc, #60]	; (800667c <pbuf_alloc_reference+0x64>)
 800663e:	f00b fce3 	bl	8012008 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006642:	200b      	movs	r0, #11
 8006644:	f7ff fb56 	bl	8005cf4 <memp_malloc>
 8006648:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	e00b      	b.n	800666c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006654:	8879      	ldrh	r1, [r7, #2]
 8006656:	887a      	ldrh	r2, [r7, #2]
 8006658:	2300      	movs	r3, #0
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	883b      	ldrh	r3, [r7, #0]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	460b      	mov	r3, r1
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff febb 	bl	80063e0 <pbuf_init_alloced_pbuf>
  return p;
 800666a:	68fb      	ldr	r3, [r7, #12]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	080134dc 	.word	0x080134dc
 8006678:	080135e0 	.word	0x080135e0
 800667c:	0801353c 	.word	0x0801353c

08006680 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
 800668c:	460b      	mov	r3, r1
 800668e:	81bb      	strh	r3, [r7, #12]
 8006690:	4613      	mov	r3, r2
 8006692:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006698:	8a7b      	ldrh	r3, [r7, #18]
 800669a:	3303      	adds	r3, #3
 800669c:	f023 0203 	bic.w	r2, r3, #3
 80066a0:	89bb      	ldrh	r3, [r7, #12]
 80066a2:	441a      	add	r2, r3
 80066a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d901      	bls.n	80066ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e018      	b.n	80066e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80066b4:	8a7b      	ldrh	r3, [r7, #18]
 80066b6:	3303      	adds	r3, #3
 80066b8:	f023 0303 	bic.w	r3, r3, #3
 80066bc:	6a3a      	ldr	r2, [r7, #32]
 80066be:	4413      	add	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	e001      	b.n	80066c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	89b9      	ldrh	r1, [r7, #12]
 80066cc:	89ba      	ldrh	r2, [r7, #12]
 80066ce:	2302      	movs	r3, #2
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	460b      	mov	r3, r1
 80066d8:	6979      	ldr	r1, [r7, #20]
 80066da:	f7ff fe81 	bl	80063e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80066de:	687b      	ldr	r3, [r7, #4]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <pbuf_realloc+0x20>
 80066fa:	4b3a      	ldr	r3, [pc, #232]	; (80067e4 <pbuf_realloc+0xfc>)
 80066fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006700:	4939      	ldr	r1, [pc, #228]	; (80067e8 <pbuf_realloc+0x100>)
 8006702:	483a      	ldr	r0, [pc, #232]	; (80067ec <pbuf_realloc+0x104>)
 8006704:	f00b fc80 	bl	8012008 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	891b      	ldrh	r3, [r3, #8]
 800670c:	887a      	ldrh	r2, [r7, #2]
 800670e:	429a      	cmp	r2, r3
 8006710:	d264      	bcs.n	80067dc <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	891a      	ldrh	r2, [r3, #8]
 8006716:	887b      	ldrh	r3, [r7, #2]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800671c:	887b      	ldrh	r3, [r7, #2]
 800671e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006724:	e018      	b.n	8006758 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	895b      	ldrh	r3, [r3, #10]
 800672a:	897a      	ldrh	r2, [r7, #10]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	891a      	ldrh	r2, [r3, #8]
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <pbuf_realloc+0x70>
 800674a:	4b26      	ldr	r3, [pc, #152]	; (80067e4 <pbuf_realloc+0xfc>)
 800674c:	f240 12af 	movw	r2, #431	; 0x1af
 8006750:	4927      	ldr	r1, [pc, #156]	; (80067f0 <pbuf_realloc+0x108>)
 8006752:	4826      	ldr	r0, [pc, #152]	; (80067ec <pbuf_realloc+0x104>)
 8006754:	f00b fc58 	bl	8012008 <iprintf>
  while (rem_len > q->len) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	895b      	ldrh	r3, [r3, #10]
 800675c:	897a      	ldrh	r2, [r7, #10]
 800675e:	429a      	cmp	r2, r3
 8006760:	d8e1      	bhi.n	8006726 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	7b1b      	ldrb	r3, [r3, #12]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	2b00      	cmp	r3, #0
 800676c:	d122      	bne.n	80067b4 <pbuf_realloc+0xcc>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	895b      	ldrh	r3, [r3, #10]
 8006772:	897a      	ldrh	r2, [r7, #10]
 8006774:	429a      	cmp	r2, r3
 8006776:	d01d      	beq.n	80067b4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	7b5b      	ldrb	r3, [r3, #13]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d117      	bne.n	80067b4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	461a      	mov	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	b29a      	uxth	r2, r3
 8006790:	897b      	ldrh	r3, [r7, #10]
 8006792:	4413      	add	r3, r2
 8006794:	b29b      	uxth	r3, r3
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff f81f 	bl	80057dc <mem_trim>
 800679e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <pbuf_realloc+0xcc>
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <pbuf_realloc+0xfc>)
 80067a8:	f240 12bd 	movw	r2, #445	; 0x1bd
 80067ac:	4911      	ldr	r1, [pc, #68]	; (80067f4 <pbuf_realloc+0x10c>)
 80067ae:	480f      	ldr	r0, [pc, #60]	; (80067ec <pbuf_realloc+0x104>)
 80067b0:	f00b fc2a 	bl	8012008 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	897a      	ldrh	r2, [r7, #10]
 80067b8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	895a      	ldrh	r2, [r3, #10]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f910 	bl	80069f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e000      	b.n	80067de <pbuf_realloc+0xf6>
    return;
 80067dc:	bf00      	nop

}
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	080134dc 	.word	0x080134dc
 80067e8:	080135f4 	.word	0x080135f4
 80067ec:	0801353c 	.word	0x0801353c
 80067f0:	0801360c 	.word	0x0801360c
 80067f4:	08013624 	.word	0x08013624

080067f8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <pbuf_add_header_impl+0x22>
 800680c:	4b2b      	ldr	r3, [pc, #172]	; (80068bc <pbuf_add_header_impl+0xc4>)
 800680e:	f240 12df 	movw	r2, #479	; 0x1df
 8006812:	492b      	ldr	r1, [pc, #172]	; (80068c0 <pbuf_add_header_impl+0xc8>)
 8006814:	482b      	ldr	r0, [pc, #172]	; (80068c4 <pbuf_add_header_impl+0xcc>)
 8006816:	f00b fbf7 	bl	8012008 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <pbuf_add_header_impl+0x30>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006826:	d301      	bcc.n	800682c <pbuf_add_header_impl+0x34>
    return 1;
 8006828:	2301      	movs	r3, #1
 800682a:	e043      	b.n	80068b4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <pbuf_add_header_impl+0x3e>
    return 0;
 8006832:	2300      	movs	r3, #0
 8006834:	e03e      	b.n	80068b4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	891a      	ldrh	r2, [r3, #8]
 800683e:	8a7b      	ldrh	r3, [r7, #18]
 8006840:	4413      	add	r3, r2
 8006842:	b29b      	uxth	r3, r3
 8006844:	8a7a      	ldrh	r2, [r7, #18]
 8006846:	429a      	cmp	r2, r3
 8006848:	d901      	bls.n	800684e <pbuf_add_header_impl+0x56>
    return 1;
 800684a:	2301      	movs	r3, #1
 800684c:	e032      	b.n	80068b4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	7b1b      	ldrb	r3, [r3, #12]
 8006852:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006854:	8a3b      	ldrh	r3, [r7, #16]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00c      	beq.n	8006878 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	425b      	negs	r3, r3
 8006866:	4413      	add	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3310      	adds	r3, #16
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	429a      	cmp	r2, r3
 8006872:	d20d      	bcs.n	8006890 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006874:	2301      	movs	r3, #1
 8006876:	e01d      	b.n	80068b4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d006      	beq.n	800688c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	425b      	negs	r3, r3
 8006886:	4413      	add	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	e001      	b.n	8006890 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800688c:	2301      	movs	r3, #1
 800688e:	e011      	b.n	80068b4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	895a      	ldrh	r2, [r3, #10]
 800689a:	8a7b      	ldrh	r3, [r7, #18]
 800689c:	4413      	add	r3, r2
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	891a      	ldrh	r2, [r3, #8]
 80068a8:	8a7b      	ldrh	r3, [r7, #18]
 80068aa:	4413      	add	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	811a      	strh	r2, [r3, #8]


  return 0;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	080134dc 	.word	0x080134dc
 80068c0:	08013640 	.word	0x08013640
 80068c4:	0801353c 	.word	0x0801353c

080068c8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80068d2:	2200      	movs	r2, #0
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff ff8e 	bl	80067f8 <pbuf_add_header_impl>
 80068dc:	4603      	mov	r3, r0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <pbuf_remove_header+0x1e>
 80068f8:	4b20      	ldr	r3, [pc, #128]	; (800697c <pbuf_remove_header+0x94>)
 80068fa:	f240 224b 	movw	r2, #587	; 0x24b
 80068fe:	4920      	ldr	r1, [pc, #128]	; (8006980 <pbuf_remove_header+0x98>)
 8006900:	4820      	ldr	r0, [pc, #128]	; (8006984 <pbuf_remove_header+0x9c>)
 8006902:	f00b fb81 	bl	8012008 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <pbuf_remove_header+0x2c>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006912:	d301      	bcc.n	8006918 <pbuf_remove_header+0x30>
    return 1;
 8006914:	2301      	movs	r3, #1
 8006916:	e02c      	b.n	8006972 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <pbuf_remove_header+0x3a>
    return 0;
 800691e:	2300      	movs	r3, #0
 8006920:	e027      	b.n	8006972 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	895b      	ldrh	r3, [r3, #10]
 800692a:	89fa      	ldrh	r2, [r7, #14]
 800692c:	429a      	cmp	r2, r3
 800692e:	d908      	bls.n	8006942 <pbuf_remove_header+0x5a>
 8006930:	4b12      	ldr	r3, [pc, #72]	; (800697c <pbuf_remove_header+0x94>)
 8006932:	f240 2255 	movw	r2, #597	; 0x255
 8006936:	4914      	ldr	r1, [pc, #80]	; (8006988 <pbuf_remove_header+0xa0>)
 8006938:	4812      	ldr	r0, [pc, #72]	; (8006984 <pbuf_remove_header+0x9c>)
 800693a:	f00b fb65 	bl	8012008 <iprintf>
 800693e:	2301      	movs	r3, #1
 8006940:	e017      	b.n	8006972 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	895a      	ldrh	r2, [r3, #10]
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	891a      	ldrh	r2, [r3, #8]
 8006966:	89fb      	ldrh	r3, [r7, #14]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	080134dc 	.word	0x080134dc
 8006980:	08013640 	.word	0x08013640
 8006984:	0801353c 	.word	0x0801353c
 8006988:	0801364c 	.word	0x0801364c

0800698c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
 8006998:	4613      	mov	r3, r2
 800699a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800699c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da08      	bge.n	80069b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80069a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069a8:	425b      	negs	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff9b 	bl	80068e8 <pbuf_remove_header>
 80069b2:	4603      	mov	r3, r0
 80069b4:	e007      	b.n	80069c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80069b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069ba:	787a      	ldrb	r2, [r7, #1]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ff1a 	bl	80067f8 <pbuf_add_header_impl>
 80069c4:	4603      	mov	r3, r0
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80069da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069de:	2201      	movs	r2, #1
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff ffd2 	bl	800698c <pbuf_header_impl>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <pbuf_free+0x22>
 8006a08:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <pbuf_free+0x104>)
 8006a0a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006a0e:	493b      	ldr	r1, [pc, #236]	; (8006afc <pbuf_free+0x108>)
 8006a10:	483b      	ldr	r0, [pc, #236]	; (8006b00 <pbuf_free+0x10c>)
 8006a12:	f00b faf9 	bl	8012008 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e069      	b.n	8006aee <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006a1e:	e062      	b.n	8006ae6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8006a20:	f00a fc3e 	bl	80112a0 <sys_arch_protect>
 8006a24:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7b9b      	ldrb	r3, [r3, #14]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <pbuf_free+0x48>
 8006a2e:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <pbuf_free+0x104>)
 8006a30:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006a34:	4933      	ldr	r1, [pc, #204]	; (8006b04 <pbuf_free+0x110>)
 8006a36:	4832      	ldr	r0, [pc, #200]	; (8006b00 <pbuf_free+0x10c>)
 8006a38:	f00b fae6 	bl	8012008 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7b9b      	ldrb	r3, [r3, #14]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	739a      	strb	r2, [r3, #14]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7b9b      	ldrb	r3, [r3, #14]
 8006a4c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8006a4e:	69b8      	ldr	r0, [r7, #24]
 8006a50:	f00a fc34 	bl	80112bc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d143      	bne.n	8006ae2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7b1b      	ldrb	r3, [r3, #12]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7b5b      	ldrb	r3, [r3, #13]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d011      	beq.n	8006a9a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <pbuf_free+0x9c>
 8006a82:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <pbuf_free+0x104>)
 8006a84:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006a88:	491f      	ldr	r1, [pc, #124]	; (8006b08 <pbuf_free+0x114>)
 8006a8a:	481d      	ldr	r0, [pc, #116]	; (8006b00 <pbuf_free+0x10c>)
 8006a8c:	f00b fabc 	bl	8012008 <iprintf>
        pc->custom_free_function(p);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
 8006a98:	e01d      	b.n	8006ad6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d104      	bne.n	8006aaa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	200c      	movs	r0, #12
 8006aa4:	f7ff f978 	bl	8005d98 <memp_free>
 8006aa8:	e015      	b.n	8006ad6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d104      	bne.n	8006aba <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	200b      	movs	r0, #11
 8006ab4:	f7ff f970 	bl	8005d98 <memp_free>
 8006ab8:	e00d      	b.n	8006ad6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <pbuf_free+0xd4>
          mem_free(p);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fe fdfb 	bl	80056bc <mem_free>
 8006ac6:	e006      	b.n	8006ad6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <pbuf_free+0x104>)
 8006aca:	f240 320f 	movw	r2, #783	; 0x30f
 8006ace:	490f      	ldr	r1, [pc, #60]	; (8006b0c <pbuf_free+0x118>)
 8006ad0:	480b      	ldr	r0, [pc, #44]	; (8006b00 <pbuf_free+0x10c>)
 8006ad2:	f00b fa99 	bl	8012008 <iprintf>
        }
      }
      count++;
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	e001      	b.n	8006ae6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d199      	bne.n	8006a20 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	080134dc 	.word	0x080134dc
 8006afc:	08013640 	.word	0x08013640
 8006b00:	0801353c 	.word	0x0801353c
 8006b04:	0801366c 	.word	0x0801366c
 8006b08:	08013684 	.word	0x08013684
 8006b0c:	080136a8 	.word	0x080136a8

08006b10 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006b1c:	e005      	b.n	8006b2a <pbuf_clen+0x1a>
    ++len;
 8006b1e:	89fb      	ldrh	r3, [r7, #14]
 8006b20:	3301      	adds	r3, #1
 8006b22:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f6      	bne.n	8006b1e <pbuf_clen+0xe>
  }
  return len;
 8006b30:	89fb      	ldrh	r3, [r7, #14]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d016      	beq.n	8006b7c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006b4e:	f00a fba7 	bl	80112a0 <sys_arch_protect>
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7b9b      	ldrb	r3, [r3, #14]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	739a      	strb	r2, [r3, #14]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f00a fbab 	bl	80112bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7b9b      	ldrb	r3, [r3, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <pbuf_ref+0x3c>
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <pbuf_ref+0x44>)
 8006b70:	f240 3242 	movw	r2, #834	; 0x342
 8006b74:	4904      	ldr	r1, [pc, #16]	; (8006b88 <pbuf_ref+0x48>)
 8006b76:	4805      	ldr	r0, [pc, #20]	; (8006b8c <pbuf_ref+0x4c>)
 8006b78:	f00b fa46 	bl	8012008 <iprintf>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	080134dc 	.word	0x080134dc
 8006b88:	080136bc 	.word	0x080136bc
 8006b8c:	0801353c 	.word	0x0801353c

08006b90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <pbuf_cat+0x16>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <pbuf_cat+0x26>
 8006ba6:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <pbuf_cat+0x98>)
 8006ba8:	f240 325a 	movw	r2, #858	; 0x35a
 8006bac:	491f      	ldr	r1, [pc, #124]	; (8006c2c <pbuf_cat+0x9c>)
 8006bae:	4820      	ldr	r0, [pc, #128]	; (8006c30 <pbuf_cat+0xa0>)
 8006bb0:	f00b fa2a 	bl	8012008 <iprintf>
 8006bb4:	e034      	b.n	8006c20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e00a      	b.n	8006bd2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	891a      	ldrh	r2, [r3, #8]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	891b      	ldrh	r3, [r3, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	891a      	ldrh	r2, [r3, #8]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	895b      	ldrh	r3, [r3, #10]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d006      	beq.n	8006bf4 <pbuf_cat+0x64>
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <pbuf_cat+0x98>)
 8006be8:	f240 3262 	movw	r2, #866	; 0x362
 8006bec:	4911      	ldr	r1, [pc, #68]	; (8006c34 <pbuf_cat+0xa4>)
 8006bee:	4810      	ldr	r0, [pc, #64]	; (8006c30 <pbuf_cat+0xa0>)
 8006bf0:	f00b fa0a 	bl	8012008 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <pbuf_cat+0x7a>
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <pbuf_cat+0x98>)
 8006bfe:	f240 3263 	movw	r2, #867	; 0x363
 8006c02:	490d      	ldr	r1, [pc, #52]	; (8006c38 <pbuf_cat+0xa8>)
 8006c04:	480a      	ldr	r0, [pc, #40]	; (8006c30 <pbuf_cat+0xa0>)
 8006c06:	f00b f9ff 	bl	8012008 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	891a      	ldrh	r2, [r3, #8]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	891b      	ldrh	r3, [r3, #8]
 8006c12:	4413      	add	r3, r2
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	080134dc 	.word	0x080134dc
 8006c2c:	080136d0 	.word	0x080136d0
 8006c30:	0801353c 	.word	0x0801353c
 8006c34:	08013708 	.word	0x08013708
 8006c38:	08013738 	.word	0x08013738

08006c3c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ffa1 	bl	8006b90 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006c4e:	6838      	ldr	r0, [r7, #0]
 8006c50:	f7ff ff76 	bl	8006b40 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <pbuf_copy+0x2a>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <pbuf_copy+0x2a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	891a      	ldrh	r2, [r3, #8]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	891b      	ldrh	r3, [r3, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d209      	bcs.n	8006c9a <pbuf_copy+0x3e>
 8006c86:	4b57      	ldr	r3, [pc, #348]	; (8006de4 <pbuf_copy+0x188>)
 8006c88:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006c8c:	4956      	ldr	r1, [pc, #344]	; (8006de8 <pbuf_copy+0x18c>)
 8006c8e:	4857      	ldr	r0, [pc, #348]	; (8006dec <pbuf_copy+0x190>)
 8006c90:	f00b f9ba 	bl	8012008 <iprintf>
 8006c94:	f06f 030f 	mvn.w	r3, #15
 8006c98:	e09f      	b.n	8006dda <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	895b      	ldrh	r3, [r3, #10]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	895b      	ldrh	r3, [r3, #10]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1acb      	subs	r3, r1, r3
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d306      	bcc.n	8006cc0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	895b      	ldrh	r3, [r3, #10]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	e005      	b.n	8006ccc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	895b      	ldrh	r3, [r3, #10]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	18d0      	adds	r0, r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f00b f97f 	bl	8011fe2 <memcpy>
    offset_to += len;
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	895b      	ldrh	r3, [r3, #10]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d906      	bls.n	8006d0e <pbuf_copy+0xb2>
 8006d00:	4b38      	ldr	r3, [pc, #224]	; (8006de4 <pbuf_copy+0x188>)
 8006d02:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006d06:	493a      	ldr	r1, [pc, #232]	; (8006df0 <pbuf_copy+0x194>)
 8006d08:	4838      	ldr	r0, [pc, #224]	; (8006dec <pbuf_copy+0x190>)
 8006d0a:	f00b f97d 	bl	8012008 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	895b      	ldrh	r3, [r3, #10]
 8006d12:	461a      	mov	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d906      	bls.n	8006d28 <pbuf_copy+0xcc>
 8006d1a:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <pbuf_copy+0x188>)
 8006d1c:	f240 32da 	movw	r2, #986	; 0x3da
 8006d20:	4934      	ldr	r1, [pc, #208]	; (8006df4 <pbuf_copy+0x198>)
 8006d22:	4832      	ldr	r0, [pc, #200]	; (8006dec <pbuf_copy+0x190>)
 8006d24:	f00b f970 	bl	8012008 <iprintf>
    if (offset_from >= p_from->len) {
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	895b      	ldrh	r3, [r3, #10]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d304      	bcc.n	8006d3e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	895b      	ldrh	r3, [r3, #10]
 8006d42:	461a      	mov	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d114      	bne.n	8006d74 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10c      	bne.n	8006d74 <pbuf_copy+0x118>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <pbuf_copy+0x118>
 8006d60:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <pbuf_copy+0x188>)
 8006d62:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006d66:	4924      	ldr	r1, [pc, #144]	; (8006df8 <pbuf_copy+0x19c>)
 8006d68:	4820      	ldr	r0, [pc, #128]	; (8006dec <pbuf_copy+0x190>)
 8006d6a:	f00b f94d 	bl	8012008 <iprintf>
 8006d6e:	f06f 030f 	mvn.w	r3, #15
 8006d72:	e032      	b.n	8006dda <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d013      	beq.n	8006da2 <pbuf_copy+0x146>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	895a      	ldrh	r2, [r3, #10]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	891b      	ldrh	r3, [r3, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d10d      	bne.n	8006da2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <pbuf_copy+0x146>
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <pbuf_copy+0x188>)
 8006d90:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8006d94:	4919      	ldr	r1, [pc, #100]	; (8006dfc <pbuf_copy+0x1a0>)
 8006d96:	4815      	ldr	r0, [pc, #84]	; (8006dec <pbuf_copy+0x190>)
 8006d98:	f00b f936 	bl	8012008 <iprintf>
 8006d9c:	f06f 0305 	mvn.w	r3, #5
 8006da0:	e01b      	b.n	8006dda <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d013      	beq.n	8006dd0 <pbuf_copy+0x174>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	895a      	ldrh	r2, [r3, #10]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	891b      	ldrh	r3, [r3, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d10d      	bne.n	8006dd0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <pbuf_copy+0x174>
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <pbuf_copy+0x188>)
 8006dbe:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006dc2:	490e      	ldr	r1, [pc, #56]	; (8006dfc <pbuf_copy+0x1a0>)
 8006dc4:	4809      	ldr	r0, [pc, #36]	; (8006dec <pbuf_copy+0x190>)
 8006dc6:	f00b f91f 	bl	8012008 <iprintf>
 8006dca:	f06f 0305 	mvn.w	r3, #5
 8006dce:	e004      	b.n	8006dda <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f47f af61 	bne.w	8006c9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	080134dc 	.word	0x080134dc
 8006de8:	08013784 	.word	0x08013784
 8006dec:	0801353c 	.word	0x0801353c
 8006df0:	080137b4 	.word	0x080137b4
 8006df4:	080137cc 	.word	0x080137cc
 8006df8:	080137e8 	.word	0x080137e8
 8006dfc:	080137f8 	.word	0x080137f8

08006e00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	460b      	mov	r3, r1
 8006e10:	80fb      	strh	r3, [r7, #6]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d108      	bne.n	8006e36 <pbuf_copy_partial+0x36>
 8006e24:	4b2b      	ldr	r3, [pc, #172]	; (8006ed4 <pbuf_copy_partial+0xd4>)
 8006e26:	f240 420a 	movw	r2, #1034	; 0x40a
 8006e2a:	492b      	ldr	r1, [pc, #172]	; (8006ed8 <pbuf_copy_partial+0xd8>)
 8006e2c:	482b      	ldr	r0, [pc, #172]	; (8006edc <pbuf_copy_partial+0xdc>)
 8006e2e:	f00b f8eb 	bl	8012008 <iprintf>
 8006e32:	2300      	movs	r3, #0
 8006e34:	e04a      	b.n	8006ecc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <pbuf_copy_partial+0x4e>
 8006e3c:	4b25      	ldr	r3, [pc, #148]	; (8006ed4 <pbuf_copy_partial+0xd4>)
 8006e3e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006e42:	4927      	ldr	r1, [pc, #156]	; (8006ee0 <pbuf_copy_partial+0xe0>)
 8006e44:	4825      	ldr	r0, [pc, #148]	; (8006edc <pbuf_copy_partial+0xdc>)
 8006e46:	f00b f8df 	bl	8012008 <iprintf>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e03e      	b.n	8006ecc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	e034      	b.n	8006ebe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006e54:	88bb      	ldrh	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <pbuf_copy_partial+0x70>
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	895b      	ldrh	r3, [r3, #10]
 8006e5e:	88ba      	ldrh	r2, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d305      	bcc.n	8006e70 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	895b      	ldrh	r3, [r3, #10]
 8006e68:	88ba      	ldrh	r2, [r7, #4]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	80bb      	strh	r3, [r7, #4]
 8006e6e:	e023      	b.n	8006eb8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	895a      	ldrh	r2, [r3, #10]
 8006e74:	88bb      	ldrh	r3, [r7, #4]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006e7a:	8b3a      	ldrh	r2, [r7, #24]
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d901      	bls.n	8006e86 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006e86:	8b7b      	ldrh	r3, [r7, #26]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	18d0      	adds	r0, r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	88bb      	ldrh	r3, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	8b3a      	ldrh	r2, [r7, #24]
 8006e96:	4619      	mov	r1, r3
 8006e98:	f00b f8a3 	bl	8011fe2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006e9c:	8afa      	ldrh	r2, [r7, #22]
 8006e9e:	8b3b      	ldrh	r3, [r7, #24]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006ea4:	8b7a      	ldrh	r2, [r7, #26]
 8006ea6:	8b3b      	ldrh	r3, [r7, #24]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006eac:	88fa      	ldrh	r2, [r7, #6]
 8006eae:	8b3b      	ldrh	r3, [r7, #24]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <pbuf_copy_partial+0xca>
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1c4      	bne.n	8006e54 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006eca:	8afb      	ldrh	r3, [r7, #22]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	080134dc 	.word	0x080134dc
 8006ed8:	08013824 	.word	0x08013824
 8006edc:	0801353c 	.word	0x0801353c
 8006ee0:	08013844 	.word	0x08013844

08006ee4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	603a      	str	r2, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	8919      	ldrh	r1, [r3, #8]
 8006ef8:	88ba      	ldrh	r2, [r7, #4]
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fa99 	bl	8006434 <pbuf_alloc>
 8006f02:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <pbuf_clone+0x2a>
    return NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e011      	b.n	8006f32 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fea3 	bl	8006c5c <pbuf_copy>
 8006f16:	4603      	mov	r3, r0
 8006f18:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006f1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d006      	beq.n	8006f30 <pbuf_clone+0x4c>
 8006f22:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <pbuf_clone+0x58>)
 8006f24:	f240 5224 	movw	r2, #1316	; 0x524
 8006f28:	4905      	ldr	r1, [pc, #20]	; (8006f40 <pbuf_clone+0x5c>)
 8006f2a:	4806      	ldr	r0, [pc, #24]	; (8006f44 <pbuf_clone+0x60>)
 8006f2c:	f00b f86c 	bl	8012008 <iprintf>
  return q;
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	080134dc 	.word	0x080134dc
 8006f40:	08013950 	.word	0x08013950
 8006f44:	0801353c 	.word	0x0801353c

08006f48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006f4c:	f00b f874 	bl	8012038 <rand>
 8006f50:	4603      	mov	r3, r0
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	4b01      	ldr	r3, [pc, #4]	; (8006f68 <tcp_init+0x20>)
 8006f62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006f64:	bf00      	nop
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	2000000c 	.word	0x2000000c

08006f6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7d1b      	ldrb	r3, [r3, #20]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d105      	bne.n	8006f88 <tcp_free+0x1c>
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <tcp_free+0x2c>)
 8006f7e:	22d4      	movs	r2, #212	; 0xd4
 8006f80:	4906      	ldr	r1, [pc, #24]	; (8006f9c <tcp_free+0x30>)
 8006f82:	4807      	ldr	r0, [pc, #28]	; (8006fa0 <tcp_free+0x34>)
 8006f84:	f00b f840 	bl	8012008 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	f7fe ff04 	bl	8005d98 <memp_free>
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	080139dc 	.word	0x080139dc
 8006f9c:	08013a0c 	.word	0x08013a0c
 8006fa0:	08013a20 	.word	0x08013a20

08006fa4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7d1b      	ldrb	r3, [r3, #20]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d105      	bne.n	8006fc0 <tcp_free_listen+0x1c>
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <tcp_free_listen+0x2c>)
 8006fb6:	22df      	movs	r2, #223	; 0xdf
 8006fb8:	4906      	ldr	r1, [pc, #24]	; (8006fd4 <tcp_free_listen+0x30>)
 8006fba:	4807      	ldr	r0, [pc, #28]	; (8006fd8 <tcp_free_listen+0x34>)
 8006fbc:	f00b f824 	bl	8012008 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	2002      	movs	r0, #2
 8006fc4:	f7fe fee8 	bl	8005d98 <memp_free>
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	080139dc 	.word	0x080139dc
 8006fd4:	08013a48 	.word	0x08013a48
 8006fd8:	08013a20 	.word	0x08013a20

08006fdc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006fe0:	f000 fe98 	bl	8007d14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006fe4:	4b07      	ldr	r3, [pc, #28]	; (8007004 <tcp_tmr+0x28>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <tcp_tmr+0x28>)
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <tcp_tmr+0x28>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006ffc:	f000 fb4c 	bl	8007698 <tcp_slowtmr>
  }
}
 8007000:	bf00      	nop
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20003e3d 	.word	0x20003e3d

08007008 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d105      	bne.n	8007024 <tcp_remove_listener+0x1c>
 8007018:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <tcp_remove_listener+0x48>)
 800701a:	22ff      	movs	r2, #255	; 0xff
 800701c:	490d      	ldr	r1, [pc, #52]	; (8007054 <tcp_remove_listener+0x4c>)
 800701e:	480e      	ldr	r0, [pc, #56]	; (8007058 <tcp_remove_listener+0x50>)
 8007020:	f00a fff2 	bl	8012008 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e00a      	b.n	8007040 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d102      	bne.n	800703a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f1      	bne.n	800702a <tcp_remove_listener+0x22>
    }
  }
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	080139dc 	.word	0x080139dc
 8007054:	08013a64 	.word	0x08013a64
 8007058:	08013a20 	.word	0x08013a20

0800705c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <tcp_listen_closed+0x1c>
 800706a:	4b14      	ldr	r3, [pc, #80]	; (80070bc <tcp_listen_closed+0x60>)
 800706c:	f240 1211 	movw	r2, #273	; 0x111
 8007070:	4913      	ldr	r1, [pc, #76]	; (80070c0 <tcp_listen_closed+0x64>)
 8007072:	4814      	ldr	r0, [pc, #80]	; (80070c4 <tcp_listen_closed+0x68>)
 8007074:	f00a ffc8 	bl	8012008 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7d1b      	ldrb	r3, [r3, #20]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d006      	beq.n	800708e <tcp_listen_closed+0x32>
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <tcp_listen_closed+0x60>)
 8007082:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007086:	4910      	ldr	r1, [pc, #64]	; (80070c8 <tcp_listen_closed+0x6c>)
 8007088:	480e      	ldr	r0, [pc, #56]	; (80070c4 <tcp_listen_closed+0x68>)
 800708a:	f00a ffbd 	bl	8012008 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800708e:	2301      	movs	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	e00b      	b.n	80070ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007094:	4a0d      	ldr	r2, [pc, #52]	; (80070cc <tcp_listen_closed+0x70>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff ffb1 	bl	8007008 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d9f0      	bls.n	8007094 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	080139dc 	.word	0x080139dc
 80070c0:	08013a8c 	.word	0x08013a8c
 80070c4:	08013a20 	.word	0x08013a20
 80070c8:	08013a98 	.word	0x08013a98
 80070cc:	08015e00 	.word	0x08015e00

080070d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80070d0:	b5b0      	push	{r4, r5, r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <tcp_close_shutdown+0x20>
 80070e2:	4b61      	ldr	r3, [pc, #388]	; (8007268 <tcp_close_shutdown+0x198>)
 80070e4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80070e8:	4960      	ldr	r1, [pc, #384]	; (800726c <tcp_close_shutdown+0x19c>)
 80070ea:	4861      	ldr	r0, [pc, #388]	; (8007270 <tcp_close_shutdown+0x1a0>)
 80070ec:	f00a ff8c 	bl	8012008 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d066      	beq.n	80071c4 <tcp_close_shutdown+0xf4>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	7d1b      	ldrb	r3, [r3, #20]
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d003      	beq.n	8007106 <tcp_close_shutdown+0x36>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7d1b      	ldrb	r3, [r3, #20]
 8007102:	2b07      	cmp	r3, #7
 8007104:	d15e      	bne.n	80071c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <tcp_close_shutdown+0x48>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007112:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007116:	d055      	beq.n	80071c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8b5b      	ldrh	r3, [r3, #26]
 800711c:	f003 0310 	and.w	r3, r3, #16
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <tcp_close_shutdown+0x62>
 8007124:	4b50      	ldr	r3, [pc, #320]	; (8007268 <tcp_close_shutdown+0x198>)
 8007126:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800712a:	4952      	ldr	r1, [pc, #328]	; (8007274 <tcp_close_shutdown+0x1a4>)
 800712c:	4850      	ldr	r0, [pc, #320]	; (8007270 <tcp_close_shutdown+0x1a0>)
 800712e:	f00a ff6b 	bl	8012008 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800713a:	687d      	ldr	r5, [r7, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	8ad2      	ldrh	r2, [r2, #22]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	8b09      	ldrh	r1, [r1, #24]
 8007148:	9102      	str	r1, [sp, #8]
 800714a:	9201      	str	r2, [sp, #4]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	462b      	mov	r3, r5
 8007150:	4622      	mov	r2, r4
 8007152:	4601      	mov	r1, r0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f004 fe91 	bl	800be7c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 f8ba 	bl	80082d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007160:	4b45      	ldr	r3, [pc, #276]	; (8007278 <tcp_close_shutdown+0x1a8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	429a      	cmp	r2, r3
 8007168:	d105      	bne.n	8007176 <tcp_close_shutdown+0xa6>
 800716a:	4b43      	ldr	r3, [pc, #268]	; (8007278 <tcp_close_shutdown+0x1a8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4a41      	ldr	r2, [pc, #260]	; (8007278 <tcp_close_shutdown+0x1a8>)
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	e013      	b.n	800719e <tcp_close_shutdown+0xce>
 8007176:	4b40      	ldr	r3, [pc, #256]	; (8007278 <tcp_close_shutdown+0x1a8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	e00c      	b.n	8007198 <tcp_close_shutdown+0xc8>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d104      	bne.n	8007192 <tcp_close_shutdown+0xc2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e005      	b.n	800719e <tcp_close_shutdown+0xce>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ef      	bne.n	800717e <tcp_close_shutdown+0xae>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	4b35      	ldr	r3, [pc, #212]	; (800727c <tcp_close_shutdown+0x1ac>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80071aa:	4b35      	ldr	r3, [pc, #212]	; (8007280 <tcp_close_shutdown+0x1b0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d102      	bne.n	80071ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80071b4:	f003 fd4c 	bl	800ac50 <tcp_trigger_input_pcb_close>
 80071b8:	e002      	b.n	80071c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fed6 	bl	8006f6c <tcp_free>
      }
      return ERR_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e04d      	b.n	8007260 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7d1b      	ldrb	r3, [r3, #20]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d02d      	beq.n	8007228 <tcp_close_shutdown+0x158>
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d036      	beq.n	800723e <tcp_close_shutdown+0x16e>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d13f      	bne.n	8007254 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8adb      	ldrh	r3, [r3, #22]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d021      	beq.n	8007220 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80071dc:	4b29      	ldr	r3, [pc, #164]	; (8007284 <tcp_close_shutdown+0x1b4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d105      	bne.n	80071f2 <tcp_close_shutdown+0x122>
 80071e6:	4b27      	ldr	r3, [pc, #156]	; (8007284 <tcp_close_shutdown+0x1b4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4a25      	ldr	r2, [pc, #148]	; (8007284 <tcp_close_shutdown+0x1b4>)
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	e013      	b.n	800721a <tcp_close_shutdown+0x14a>
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <tcp_close_shutdown+0x1b4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	e00c      	b.n	8007214 <tcp_close_shutdown+0x144>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d104      	bne.n	800720e <tcp_close_shutdown+0x13e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	60da      	str	r2, [r3, #12]
 800720c:	e005      	b.n	800721a <tcp_close_shutdown+0x14a>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1ef      	bne.n	80071fa <tcp_close_shutdown+0x12a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff fea3 	bl	8006f6c <tcp_free>
      break;
 8007226:	e01a      	b.n	800725e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ff17 	bl	800705c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4815      	ldr	r0, [pc, #84]	; (8007288 <tcp_close_shutdown+0x1b8>)
 8007232:	f001 f89f 	bl	8008374 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff feb4 	bl	8006fa4 <tcp_free_listen>
      break;
 800723c:	e00f      	b.n	800725e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	480d      	ldr	r0, [pc, #52]	; (8007278 <tcp_close_shutdown+0x1a8>)
 8007242:	f001 f897 	bl	8008374 <tcp_pcb_remove>
 8007246:	4b0d      	ldr	r3, [pc, #52]	; (800727c <tcp_close_shutdown+0x1ac>)
 8007248:	2201      	movs	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fe8d 	bl	8006f6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007252:	e004      	b.n	800725e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f819 	bl	800728c <tcp_close_shutdown_fin>
 800725a:	4603      	mov	r3, r0
 800725c:	e000      	b.n	8007260 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bdb0      	pop	{r4, r5, r7, pc}
 8007268:	080139dc 	.word	0x080139dc
 800726c:	08013ab0 	.word	0x08013ab0
 8007270:	08013a20 	.word	0x08013a20
 8007274:	08013ad0 	.word	0x08013ad0
 8007278:	200076d4 	.word	0x200076d4
 800727c:	200076d0 	.word	0x200076d0
 8007280:	200076e8 	.word	0x200076e8
 8007284:	200076e0 	.word	0x200076e0
 8007288:	200076dc 	.word	0x200076dc

0800728c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <tcp_close_shutdown_fin+0x1c>
 800729a:	4b2c      	ldr	r3, [pc, #176]	; (800734c <tcp_close_shutdown_fin+0xc0>)
 800729c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80072a0:	492b      	ldr	r1, [pc, #172]	; (8007350 <tcp_close_shutdown_fin+0xc4>)
 80072a2:	482c      	ldr	r0, [pc, #176]	; (8007354 <tcp_close_shutdown_fin+0xc8>)
 80072a4:	f00a feb0 	bl	8012008 <iprintf>

  switch (pcb->state) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7d1b      	ldrb	r3, [r3, #20]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d010      	beq.n	80072d2 <tcp_close_shutdown_fin+0x46>
 80072b0:	2b07      	cmp	r3, #7
 80072b2:	d01b      	beq.n	80072ec <tcp_close_shutdown_fin+0x60>
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d126      	bne.n	8007306 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f003 fedb 	bl	800b074 <tcp_send_fin>
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80072c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d11f      	bne.n	800730a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2205      	movs	r2, #5
 80072ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80072d0:	e01b      	b.n	800730a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f003 fece 	bl	800b074 <tcp_send_fin>
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80072dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d114      	bne.n	800730e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2205      	movs	r2, #5
 80072e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80072ea:	e010      	b.n	800730e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f003 fec1 	bl	800b074 <tcp_send_fin>
 80072f2:	4603      	mov	r3, r0
 80072f4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80072f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2209      	movs	r2, #9
 8007302:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007304:	e005      	b.n	8007312 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e01c      	b.n	8007344 <tcp_close_shutdown_fin+0xb8>
      break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <tcp_close_shutdown_fin+0x88>
      break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <tcp_close_shutdown_fin+0x88>
      break;
 8007312:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d103      	bne.n	8007324 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f003 ffe7 	bl	800b2f0 <tcp_output>
 8007322:	e00d      	b.n	8007340 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732c:	d108      	bne.n	8007340 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8b5b      	ldrh	r3, [r3, #26]
 8007332:	f043 0308 	orr.w	r3, r3, #8
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e001      	b.n	8007344 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007340:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	080139dc 	.word	0x080139dc
 8007350:	08013a8c 	.word	0x08013a8c
 8007354:	08013a20 	.word	0x08013a20

08007358 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <tcp_close+0x22>
 8007366:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <tcp_close+0x4c>)
 8007368:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800736c:	490e      	ldr	r1, [pc, #56]	; (80073a8 <tcp_close+0x50>)
 800736e:	480f      	ldr	r0, [pc, #60]	; (80073ac <tcp_close+0x54>)
 8007370:	f00a fe4a 	bl	8012008 <iprintf>
 8007374:	f06f 030f 	mvn.w	r3, #15
 8007378:	e00f      	b.n	800739a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7d1b      	ldrb	r3, [r3, #20]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d006      	beq.n	8007390 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8b5b      	ldrh	r3, [r3, #26]
 8007386:	f043 0310 	orr.w	r3, r3, #16
 800738a:	b29a      	uxth	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007390:	2101      	movs	r1, #1
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fe9c 	bl	80070d0 <tcp_close_shutdown>
 8007398:	4603      	mov	r3, r0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	080139dc 	.word	0x080139dc
 80073a8:	08013aec 	.word	0x08013aec
 80073ac:	08013a20 	.word	0x08013a20

080073b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	; 0x38
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d107      	bne.n	80073d0 <tcp_abandon+0x20>
 80073c0:	4b52      	ldr	r3, [pc, #328]	; (800750c <tcp_abandon+0x15c>)
 80073c2:	f240 223d 	movw	r2, #573	; 0x23d
 80073c6:	4952      	ldr	r1, [pc, #328]	; (8007510 <tcp_abandon+0x160>)
 80073c8:	4852      	ldr	r0, [pc, #328]	; (8007514 <tcp_abandon+0x164>)
 80073ca:	f00a fe1d 	bl	8012008 <iprintf>
 80073ce:	e099      	b.n	8007504 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7d1b      	ldrb	r3, [r3, #20]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d106      	bne.n	80073e6 <tcp_abandon+0x36>
 80073d8:	4b4c      	ldr	r3, [pc, #304]	; (800750c <tcp_abandon+0x15c>)
 80073da:	f240 2241 	movw	r2, #577	; 0x241
 80073de:	494e      	ldr	r1, [pc, #312]	; (8007518 <tcp_abandon+0x168>)
 80073e0:	484c      	ldr	r0, [pc, #304]	; (8007514 <tcp_abandon+0x164>)
 80073e2:	f00a fe11 	bl	8012008 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7d1b      	ldrb	r3, [r3, #20]
 80073ea:	2b0a      	cmp	r3, #10
 80073ec:	d107      	bne.n	80073fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	484a      	ldr	r0, [pc, #296]	; (800751c <tcp_abandon+0x16c>)
 80073f2:	f000 ffbf 	bl	8008374 <tcp_pcb_remove>
    tcp_free(pcb);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff fdb8 	bl	8006f6c <tcp_free>
 80073fc:	e082      	b.n	8007504 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	7d1b      	ldrb	r3, [r3, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d126      	bne.n	8007476 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8adb      	ldrh	r3, [r3, #22]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d02e      	beq.n	800748e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007430:	4b3b      	ldr	r3, [pc, #236]	; (8007520 <tcp_abandon+0x170>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d105      	bne.n	8007446 <tcp_abandon+0x96>
 800743a:	4b39      	ldr	r3, [pc, #228]	; (8007520 <tcp_abandon+0x170>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	4a37      	ldr	r2, [pc, #220]	; (8007520 <tcp_abandon+0x170>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	e013      	b.n	800746e <tcp_abandon+0xbe>
 8007446:	4b36      	ldr	r3, [pc, #216]	; (8007520 <tcp_abandon+0x170>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e00c      	b.n	8007468 <tcp_abandon+0xb8>
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	429a      	cmp	r2, r3
 8007456:	d104      	bne.n	8007462 <tcp_abandon+0xb2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e005      	b.n	800746e <tcp_abandon+0xbe>
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1ef      	bne.n	800744e <tcp_abandon+0x9e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e00b      	b.n	800748e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8adb      	ldrh	r3, [r3, #22]
 800747e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4828      	ldr	r0, [pc, #160]	; (8007524 <tcp_abandon+0x174>)
 8007484:	f000 ff76 	bl	8008374 <tcp_pcb_remove>
 8007488:	4b27      	ldr	r3, [pc, #156]	; (8007528 <tcp_abandon+0x178>)
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fd1a 	bl	8007ed4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fd11 	bl	8007ed4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fd08 	bl	8007ed4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00e      	beq.n	80074e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3304      	adds	r3, #4
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	8b12      	ldrh	r2, [r2, #24]
 80074d4:	9202      	str	r2, [sp, #8]
 80074d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80074d8:	9201      	str	r2, [sp, #4]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	460b      	mov	r3, r1
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f004 fcca 	bl	800be7c <tcp_rst>
    }
    last_state = pcb->state;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7d1b      	ldrb	r3, [r3, #20]
 80074ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fd3c 	bl	8006f6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <tcp_abandon+0x154>
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f06f 010c 	mvn.w	r1, #12
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	4798      	blx	r3
  }
}
 8007504:	3728      	adds	r7, #40	; 0x28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	080139dc 	.word	0x080139dc
 8007510:	08013b20 	.word	0x08013b20
 8007514:	08013a20 	.word	0x08013a20
 8007518:	08013b3c 	.word	0x08013b3c
 800751c:	200076e4 	.word	0x200076e4
 8007520:	200076e0 	.word	0x200076e0
 8007524:	200076d4 	.word	0x200076d4
 8007528:	200076d0 	.word	0x200076d0

0800752c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007534:	2101      	movs	r1, #1
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ff3a 	bl	80073b0 <tcp_abandon>
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <tcp_update_rcv_ann_wnd+0x1c>
 8007552:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007554:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007558:	4924      	ldr	r1, [pc, #144]	; (80075ec <tcp_update_rcv_ann_wnd+0xa8>)
 800755a:	4825      	ldr	r0, [pc, #148]	; (80075f0 <tcp_update_rcv_ann_wnd+0xac>)
 800755c:	f00a fd54 	bl	8012008 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007568:	4413      	add	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007574:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007578:	bf28      	it	cs
 800757a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800757e:	b292      	uxth	r2, r2
 8007580:	4413      	add	r3, r2
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	db08      	blt.n	800759c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	e020      	b.n	80075de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dd03      	ble.n	80075b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075b0:	e014      	b.n	80075dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c4:	d306      	bcc.n	80075d4 <tcp_update_rcv_ann_wnd+0x90>
 80075c6:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <tcp_update_rcv_ann_wnd+0xa4>)
 80075c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80075cc:	4909      	ldr	r1, [pc, #36]	; (80075f4 <tcp_update_rcv_ann_wnd+0xb0>)
 80075ce:	4808      	ldr	r0, [pc, #32]	; (80075f0 <tcp_update_rcv_ann_wnd+0xac>)
 80075d0:	f00a fd1a 	bl	8012008 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80075dc:	2300      	movs	r3, #0
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	080139dc 	.word	0x080139dc
 80075ec:	08013c38 	.word	0x08013c38
 80075f0:	08013a20 	.word	0x08013a20
 80075f4:	08013c5c 	.word	0x08013c5c

080075f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d107      	bne.n	800761a <tcp_recved+0x22>
 800760a:	4b1f      	ldr	r3, [pc, #124]	; (8007688 <tcp_recved+0x90>)
 800760c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007610:	491e      	ldr	r1, [pc, #120]	; (800768c <tcp_recved+0x94>)
 8007612:	481f      	ldr	r0, [pc, #124]	; (8007690 <tcp_recved+0x98>)
 8007614:	f00a fcf8 	bl	8012008 <iprintf>
 8007618:	e032      	b.n	8007680 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7d1b      	ldrb	r3, [r3, #20]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d106      	bne.n	8007630 <tcp_recved+0x38>
 8007622:	4b19      	ldr	r3, [pc, #100]	; (8007688 <tcp_recved+0x90>)
 8007624:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007628:	491a      	ldr	r1, [pc, #104]	; (8007694 <tcp_recved+0x9c>)
 800762a:	4819      	ldr	r0, [pc, #100]	; (8007690 <tcp_recved+0x98>)
 800762c:	f00a fcec 	bl	8012008 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007634:	887b      	ldrh	r3, [r7, #2]
 8007636:	4413      	add	r3, r2
 8007638:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007640:	d804      	bhi.n	800764c <tcp_recved+0x54>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007646:	89fa      	ldrh	r2, [r7, #14]
 8007648:	429a      	cmp	r2, r3
 800764a:	d204      	bcs.n	8007656 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007652:	851a      	strh	r2, [r3, #40]	; 0x28
 8007654:	e002      	b.n	800765c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	89fa      	ldrh	r2, [r7, #14]
 800765a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff ff71 	bl	8007544 <tcp_update_rcv_ann_wnd>
 8007662:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800766a:	d309      	bcc.n	8007680 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	8b5b      	ldrh	r3, [r3, #26]
 8007670:	f043 0302 	orr.w	r3, r3, #2
 8007674:	b29a      	uxth	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f003 fe38 	bl	800b2f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	080139dc 	.word	0x080139dc
 800768c:	08013c78 	.word	0x08013c78
 8007690:	08013a20 	.word	0x08013a20
 8007694:	08013c90 	.word	0x08013c90

08007698 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007698:	b5b0      	push	{r4, r5, r7, lr}
 800769a:	b090      	sub	sp, #64	; 0x40
 800769c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80076a4:	4b94      	ldr	r3, [pc, #592]	; (80078f8 <tcp_slowtmr+0x260>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	4a93      	ldr	r2, [pc, #588]	; (80078f8 <tcp_slowtmr+0x260>)
 80076ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80076ae:	4b93      	ldr	r3, [pc, #588]	; (80078fc <tcp_slowtmr+0x264>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4b91      	ldr	r3, [pc, #580]	; (80078fc <tcp_slowtmr+0x264>)
 80076b8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80076be:	4b90      	ldr	r3, [pc, #576]	; (8007900 <tcp_slowtmr+0x268>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80076c4:	e29d      	b.n	8007c02 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	7d1b      	ldrb	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <tcp_slowtmr+0x44>
 80076ce:	4b8d      	ldr	r3, [pc, #564]	; (8007904 <tcp_slowtmr+0x26c>)
 80076d0:	f240 42be 	movw	r2, #1214	; 0x4be
 80076d4:	498c      	ldr	r1, [pc, #560]	; (8007908 <tcp_slowtmr+0x270>)
 80076d6:	488d      	ldr	r0, [pc, #564]	; (800790c <tcp_slowtmr+0x274>)
 80076d8:	f00a fc96 	bl	8012008 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	7d1b      	ldrb	r3, [r3, #20]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d106      	bne.n	80076f2 <tcp_slowtmr+0x5a>
 80076e4:	4b87      	ldr	r3, [pc, #540]	; (8007904 <tcp_slowtmr+0x26c>)
 80076e6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80076ea:	4989      	ldr	r1, [pc, #548]	; (8007910 <tcp_slowtmr+0x278>)
 80076ec:	4887      	ldr	r0, [pc, #540]	; (800790c <tcp_slowtmr+0x274>)
 80076ee:	f00a fc8b 	bl	8012008 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	7d1b      	ldrb	r3, [r3, #20]
 80076f6:	2b0a      	cmp	r3, #10
 80076f8:	d106      	bne.n	8007708 <tcp_slowtmr+0x70>
 80076fa:	4b82      	ldr	r3, [pc, #520]	; (8007904 <tcp_slowtmr+0x26c>)
 80076fc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007700:	4984      	ldr	r1, [pc, #528]	; (8007914 <tcp_slowtmr+0x27c>)
 8007702:	4882      	ldr	r0, [pc, #520]	; (800790c <tcp_slowtmr+0x274>)
 8007704:	f00a fc80 	bl	8012008 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	7f9a      	ldrb	r2, [r3, #30]
 800770c:	4b7b      	ldr	r3, [pc, #492]	; (80078fc <tcp_slowtmr+0x264>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d105      	bne.n	8007720 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800771e:	e270      	b.n	8007c02 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007720:	4b76      	ldr	r3, [pc, #472]	; (80078fc <tcp_slowtmr+0x264>)
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	7d1b      	ldrb	r3, [r3, #20]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d10a      	bne.n	8007752 <tcp_slowtmr+0xba>
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007742:	2b05      	cmp	r3, #5
 8007744:	d905      	bls.n	8007752 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800774a:	3301      	adds	r3, #1
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007750:	e11e      	b.n	8007990 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007758:	2b0b      	cmp	r3, #11
 800775a:	d905      	bls.n	8007768 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800775c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007760:	3301      	adds	r3, #1
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007766:	e113      	b.n	8007990 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800776e:	2b00      	cmp	r3, #0
 8007770:	d075      	beq.n	800785e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <tcp_slowtmr+0xf0>
 800777a:	4b62      	ldr	r3, [pc, #392]	; (8007904 <tcp_slowtmr+0x26c>)
 800777c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007780:	4965      	ldr	r1, [pc, #404]	; (8007918 <tcp_slowtmr+0x280>)
 8007782:	4862      	ldr	r0, [pc, #392]	; (800790c <tcp_slowtmr+0x274>)
 8007784:	f00a fc40 	bl	8012008 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <tcp_slowtmr+0x106>
 8007790:	4b5c      	ldr	r3, [pc, #368]	; (8007904 <tcp_slowtmr+0x26c>)
 8007792:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007796:	4961      	ldr	r1, [pc, #388]	; (800791c <tcp_slowtmr+0x284>)
 8007798:	485c      	ldr	r0, [pc, #368]	; (800790c <tcp_slowtmr+0x274>)
 800779a:	f00a fc35 	bl	8012008 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80077a4:	2b0b      	cmp	r3, #11
 80077a6:	d905      	bls.n	80077b4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80077a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077ac:	3301      	adds	r3, #1
 80077ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077b2:	e0ed      	b.n	8007990 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80077ba:	3b01      	subs	r3, #1
 80077bc:	4a58      	ldr	r2, [pc, #352]	; (8007920 <tcp_slowtmr+0x288>)
 80077be:	5cd3      	ldrb	r3, [r2, r3]
 80077c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80077c8:	7c7a      	ldrb	r2, [r7, #17]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d907      	bls.n	80077de <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80077d4:	3301      	adds	r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80077e4:	7c7a      	ldrb	r2, [r7, #17]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f200 80d2 	bhi.w	8007990 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80077ec:	2301      	movs	r3, #1
 80077ee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d108      	bne.n	800780c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80077fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077fc:	f004 fc32 	bl	800c064 <tcp_zero_window_probe>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d014      	beq.n	8007830 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007806:	2300      	movs	r3, #0
 8007808:	623b      	str	r3, [r7, #32]
 800780a:	e011      	b.n	8007830 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007812:	4619      	mov	r1, r3
 8007814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007816:	f003 fae5 	bl	800ade4 <tcp_split_unsent_seg>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d107      	bne.n	8007830 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007822:	f003 fd65 	bl	800b2f0 <tcp_output>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80ac 	beq.w	8007990 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007846:	2b06      	cmp	r3, #6
 8007848:	f200 80a2 	bhi.w	8007990 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007852:	3301      	adds	r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800785c:	e098      	b.n	8007990 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007864:	2b00      	cmp	r3, #0
 8007866:	db0f      	blt.n	8007888 <tcp_slowtmr+0x1f0>
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800786e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007872:	4293      	cmp	r3, r2
 8007874:	d008      	beq.n	8007888 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800787c:	b29b      	uxth	r3, r3
 800787e:	3301      	adds	r3, #1
 8007880:	b29b      	uxth	r3, r3
 8007882:	b21a      	sxth	r2, r3
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007894:	429a      	cmp	r2, r3
 8007896:	db7b      	blt.n	8007990 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800789a:	f004 f821 	bl	800b8e0 <tcp_rexmit_rto_prepare>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <tcp_slowtmr+0x21c>
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d171      	bne.n	8007990 <tcp_slowtmr+0x2f8>
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d06d      	beq.n	8007990 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	7d1b      	ldrb	r3, [r3, #20]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d03a      	beq.n	8007932 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	bf28      	it	cs
 80078c6:	230c      	movcs	r3, #12
 80078c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80078d0:	10db      	asrs	r3, r3, #3
 80078d2:	b21b      	sxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80078dc:	4413      	add	r3, r2
 80078de:	7efa      	ldrb	r2, [r7, #27]
 80078e0:	4910      	ldr	r1, [pc, #64]	; (8007924 <tcp_slowtmr+0x28c>)
 80078e2:	5c8a      	ldrb	r2, [r1, r2]
 80078e4:	4093      	lsls	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80078ee:	4293      	cmp	r3, r2
 80078f0:	dc1a      	bgt.n	8007928 <tcp_slowtmr+0x290>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	b21a      	sxth	r2, r3
 80078f6:	e019      	b.n	800792c <tcp_slowtmr+0x294>
 80078f8:	200076d8 	.word	0x200076d8
 80078fc:	20003e3e 	.word	0x20003e3e
 8007900:	200076d4 	.word	0x200076d4
 8007904:	080139dc 	.word	0x080139dc
 8007908:	08013d20 	.word	0x08013d20
 800790c:	08013a20 	.word	0x08013a20
 8007910:	08013d4c 	.word	0x08013d4c
 8007914:	08013d78 	.word	0x08013d78
 8007918:	08013da8 	.word	0x08013da8
 800791c:	08013ddc 	.word	0x08013ddc
 8007920:	08015df8 	.word	0x08015df8
 8007924:	08015de8 	.word	0x08015de8
 8007928:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	2200      	movs	r2, #0
 8007936:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007944:	4293      	cmp	r3, r2
 8007946:	bf28      	it	cs
 8007948:	4613      	movcs	r3, r2
 800794a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800794c:	8a7b      	ldrh	r3, [r7, #18]
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	b29b      	uxth	r3, r3
 8007966:	429a      	cmp	r2, r3
 8007968:	d206      	bcs.n	8007978 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	2200      	movs	r2, #0
 8007986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800798a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800798c:	f004 f818 	bl	800b9c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	7d1b      	ldrb	r3, [r3, #20]
 8007994:	2b06      	cmp	r3, #6
 8007996:	d111      	bne.n	80079bc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	8b5b      	ldrh	r3, [r3, #26]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079a4:	4b9c      	ldr	r3, [pc, #624]	; (8007c18 <tcp_slowtmr+0x580>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b28      	cmp	r3, #40	; 0x28
 80079b0:	d904      	bls.n	80079bc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80079b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079b6:	3301      	adds	r3, #1
 80079b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	7a5b      	ldrb	r3, [r3, #9]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d04a      	beq.n	8007a5e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d003      	beq.n	80079d8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80079d4:	2b07      	cmp	r3, #7
 80079d6:	d142      	bne.n	8007a5e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079d8:	4b8f      	ldr	r3, [pc, #572]	; (8007c18 <tcp_slowtmr+0x580>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80079e8:	4b8c      	ldr	r3, [pc, #560]	; (8007c1c <tcp_slowtmr+0x584>)
 80079ea:	440b      	add	r3, r1
 80079ec:	498c      	ldr	r1, [pc, #560]	; (8007c20 <tcp_slowtmr+0x588>)
 80079ee:	fba1 1303 	umull	r1, r3, r1, r3
 80079f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d90a      	bls.n	8007a0e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80079f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079fc:	3301      	adds	r3, #1
 80079fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a06:	3301      	adds	r3, #1
 8007a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a0c:	e027      	b.n	8007a5e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a0e:	4b82      	ldr	r3, [pc, #520]	; (8007c18 <tcp_slowtmr+0x580>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007a24:	4618      	mov	r0, r3
 8007a26:	4b7f      	ldr	r3, [pc, #508]	; (8007c24 <tcp_slowtmr+0x58c>)
 8007a28:	fb03 f300 	mul.w	r3, r3, r0
 8007a2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007a2e:	497c      	ldr	r1, [pc, #496]	; (8007c20 <tcp_slowtmr+0x588>)
 8007a30:	fba1 1303 	umull	r1, r3, r1, r3
 8007a34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d911      	bls.n	8007a5e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a3c:	f004 fad2 	bl	800bfe4 <tcp_keepalive>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007a46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007a54:	3301      	adds	r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d011      	beq.n	8007a8a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007a66:	4b6c      	ldr	r3, [pc, #432]	; (8007c18 <tcp_slowtmr+0x580>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a76:	4619      	mov	r1, r3
 8007a78:	460b      	mov	r3, r1
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	440b      	add	r3, r1
 8007a7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a86:	f000 fdd9 	bl	800863c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	7d1b      	ldrb	r3, [r3, #20]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d10b      	bne.n	8007aaa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a92:	4b61      	ldr	r3, [pc, #388]	; (8007c18 <tcp_slowtmr+0x580>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b28      	cmp	r3, #40	; 0x28
 8007a9e:	d904      	bls.n	8007aaa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	7d1b      	ldrb	r3, [r3, #20]
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	d10b      	bne.n	8007aca <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ab2:	4b59      	ldr	r3, [pc, #356]	; (8007c18 <tcp_slowtmr+0x580>)
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2bf0      	cmp	r3, #240	; 0xf0
 8007abe:	d904      	bls.n	8007aca <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d060      	beq.n	8007b94 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007adc:	f000 fbfa 	bl	80082d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d010      	beq.n	8007b08 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007ae6:	4b50      	ldr	r3, [pc, #320]	; (8007c28 <tcp_slowtmr+0x590>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d106      	bne.n	8007afe <tcp_slowtmr+0x466>
 8007af0:	4b4e      	ldr	r3, [pc, #312]	; (8007c2c <tcp_slowtmr+0x594>)
 8007af2:	f240 526d 	movw	r2, #1389	; 0x56d
 8007af6:	494e      	ldr	r1, [pc, #312]	; (8007c30 <tcp_slowtmr+0x598>)
 8007af8:	484e      	ldr	r0, [pc, #312]	; (8007c34 <tcp_slowtmr+0x59c>)
 8007afa:	f00a fa85 	bl	8012008 <iprintf>
        prev->next = pcb->next;
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	60da      	str	r2, [r3, #12]
 8007b06:	e00f      	b.n	8007b28 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007b08:	4b47      	ldr	r3, [pc, #284]	; (8007c28 <tcp_slowtmr+0x590>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d006      	beq.n	8007b20 <tcp_slowtmr+0x488>
 8007b12:	4b46      	ldr	r3, [pc, #280]	; (8007c2c <tcp_slowtmr+0x594>)
 8007b14:	f240 5271 	movw	r2, #1393	; 0x571
 8007b18:	4947      	ldr	r1, [pc, #284]	; (8007c38 <tcp_slowtmr+0x5a0>)
 8007b1a:	4846      	ldr	r0, [pc, #280]	; (8007c34 <tcp_slowtmr+0x59c>)
 8007b1c:	f00a fa74 	bl	8012008 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	4a40      	ldr	r2, [pc, #256]	; (8007c28 <tcp_slowtmr+0x590>)
 8007b26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d013      	beq.n	8007b58 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007b38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b40:	8ad2      	ldrh	r2, [r2, #22]
 8007b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b44:	8b09      	ldrh	r1, [r1, #24]
 8007b46:	9102      	str	r1, [sp, #8]
 8007b48:	9201      	str	r2, [sp, #4]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	4622      	mov	r2, r4
 8007b50:	4601      	mov	r1, r0
 8007b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b54:	f004 f992 	bl	800be7c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	7d1b      	ldrb	r3, [r3, #20]
 8007b62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007b6e:	6838      	ldr	r0, [r7, #0]
 8007b70:	f7ff f9fc 	bl	8006f6c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007b74:	4b31      	ldr	r3, [pc, #196]	; (8007c3c <tcp_slowtmr+0x5a4>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <tcp_slowtmr+0x4f2>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f06f 010c 	mvn.w	r1, #12
 8007b86:	68b8      	ldr	r0, [r7, #8]
 8007b88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007b8a:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <tcp_slowtmr+0x5a4>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d037      	beq.n	8007c02 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007b92:	e592      	b.n	80076ba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	7f1b      	ldrb	r3, [r3, #28]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	7f1a      	ldrb	r2, [r3, #28]
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	7f5b      	ldrb	r3, [r3, #29]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d325      	bcc.n	8007c02 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007bbc:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <tcp_slowtmr+0x5a4>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <tcp_slowtmr+0x54c>
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bd4:	6912      	ldr	r2, [r2, #16]
 8007bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007be2:	e002      	b.n	8007bea <tcp_slowtmr+0x552>
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007bea:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <tcp_slowtmr+0x5a4>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d000      	beq.n	8007bf4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007bf2:	e562      	b.n	80076ba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007bf4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bfe:	f003 fb77 	bl	800b2f0 <tcp_output>
  while (pcb != NULL) {
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f ad5e 	bne.w	80076c6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <tcp_slowtmr+0x5a8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007c14:	e069      	b.n	8007cea <tcp_slowtmr+0x652>
 8007c16:	bf00      	nop
 8007c18:	200076d8 	.word	0x200076d8
 8007c1c:	000a4cb8 	.word	0x000a4cb8
 8007c20:	10624dd3 	.word	0x10624dd3
 8007c24:	000124f8 	.word	0x000124f8
 8007c28:	200076d4 	.word	0x200076d4
 8007c2c:	080139dc 	.word	0x080139dc
 8007c30:	08013e14 	.word	0x08013e14
 8007c34:	08013a20 	.word	0x08013a20
 8007c38:	08013e40 	.word	0x08013e40
 8007c3c:	200076d0 	.word	0x200076d0
 8007c40:	200076e4 	.word	0x200076e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	7d1b      	ldrb	r3, [r3, #20]
 8007c48:	2b0a      	cmp	r3, #10
 8007c4a:	d006      	beq.n	8007c5a <tcp_slowtmr+0x5c2>
 8007c4c:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <tcp_slowtmr+0x660>)
 8007c4e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007c52:	492a      	ldr	r1, [pc, #168]	; (8007cfc <tcp_slowtmr+0x664>)
 8007c54:	482a      	ldr	r0, [pc, #168]	; (8007d00 <tcp_slowtmr+0x668>)
 8007c56:	f00a f9d7 	bl	8012008 <iprintf>
    pcb_remove = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c60:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <tcp_slowtmr+0x66c>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2bf0      	cmp	r3, #240	; 0xf0
 8007c6c:	d904      	bls.n	8007c78 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c72:	3301      	adds	r3, #1
 8007c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d02f      	beq.n	8007ce0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c82:	f000 fb27 	bl	80082d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d010      	beq.n	8007cae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <tcp_slowtmr+0x670>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d106      	bne.n	8007ca4 <tcp_slowtmr+0x60c>
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <tcp_slowtmr+0x660>)
 8007c98:	f240 52af 	movw	r2, #1455	; 0x5af
 8007c9c:	491b      	ldr	r1, [pc, #108]	; (8007d0c <tcp_slowtmr+0x674>)
 8007c9e:	4818      	ldr	r0, [pc, #96]	; (8007d00 <tcp_slowtmr+0x668>)
 8007ca0:	f00a f9b2 	bl	8012008 <iprintf>
        prev->next = pcb->next;
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	60da      	str	r2, [r3, #12]
 8007cac:	e00f      	b.n	8007cce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <tcp_slowtmr+0x670>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d006      	beq.n	8007cc6 <tcp_slowtmr+0x62e>
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <tcp_slowtmr+0x660>)
 8007cba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007cbe:	4914      	ldr	r1, [pc, #80]	; (8007d10 <tcp_slowtmr+0x678>)
 8007cc0:	480f      	ldr	r0, [pc, #60]	; (8007d00 <tcp_slowtmr+0x668>)
 8007cc2:	f00a f9a1 	bl	8012008 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	4a0f      	ldr	r2, [pc, #60]	; (8007d08 <tcp_slowtmr+0x670>)
 8007ccc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007cd8:	69f8      	ldr	r0, [r7, #28]
 8007cda:	f7ff f947 	bl	8006f6c <tcp_free>
 8007cde:	e004      	b.n	8007cea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1a9      	bne.n	8007c44 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	3730      	adds	r7, #48	; 0x30
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8007cf8:	080139dc 	.word	0x080139dc
 8007cfc:	08013e6c 	.word	0x08013e6c
 8007d00:	08013a20 	.word	0x08013a20
 8007d04:	200076d8 	.word	0x200076d8
 8007d08:	200076e4 	.word	0x200076e4
 8007d0c:	08013e9c 	.word	0x08013e9c
 8007d10:	08013ec4 	.word	0x08013ec4

08007d14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007d1a:	4b2d      	ldr	r3, [pc, #180]	; (8007dd0 <tcp_fasttmr+0xbc>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <tcp_fasttmr+0xbc>)
 8007d24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007d26:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <tcp_fasttmr+0xc0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007d2c:	e048      	b.n	8007dc0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7f9a      	ldrb	r2, [r3, #30]
 8007d32:	4b27      	ldr	r3, [pc, #156]	; (8007dd0 <tcp_fasttmr+0xbc>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d03f      	beq.n	8007dba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007d3a:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <tcp_fasttmr+0xbc>)
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8b5b      	ldrh	r3, [r3, #26]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8b5b      	ldrh	r3, [r3, #26]
 8007d52:	f043 0302 	orr.w	r3, r3, #2
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f003 fac7 	bl	800b2f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8b5b      	ldrh	r3, [r3, #26]
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8b5b      	ldrh	r3, [r3, #26]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8b5b      	ldrh	r3, [r3, #26]
 8007d80:	f023 0308 	bic.w	r3, r3, #8
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff fa7e 	bl	800728c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <tcp_fasttmr+0xc4>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f819 	bl	8007ddc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007daa:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <tcp_fasttmr+0xc4>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d000      	beq.n	8007db4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007db2:	e7b8      	b.n	8007d26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	e002      	b.n	8007dc0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1b3      	bne.n	8007d2e <tcp_fasttmr+0x1a>
    }
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20003e3e 	.word	0x20003e3e
 8007dd4:	200076d4 	.word	0x200076d4
 8007dd8:	200076d0 	.word	0x200076d0

08007ddc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <tcp_process_refused_data+0x22>
 8007dea:	4b37      	ldr	r3, [pc, #220]	; (8007ec8 <tcp_process_refused_data+0xec>)
 8007dec:	f240 6209 	movw	r2, #1545	; 0x609
 8007df0:	4936      	ldr	r1, [pc, #216]	; (8007ecc <tcp_process_refused_data+0xf0>)
 8007df2:	4837      	ldr	r0, [pc, #220]	; (8007ed0 <tcp_process_refused_data+0xf4>)
 8007df4:	f00a f908 	bl	8012008 <iprintf>
 8007df8:	f06f 030f 	mvn.w	r3, #15
 8007dfc:	e060      	b.n	8007ec0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e02:	7b5b      	ldrb	r3, [r3, #13]
 8007e04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <tcp_process_refused_data+0x58>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6918      	ldr	r0, [r3, #16]
 8007e26:	2300      	movs	r3, #0
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	47a0      	blx	r4
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e007      	b.n	8007e44 <tcp_process_refused_data+0x68>
 8007e34:	2300      	movs	r3, #0
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f000 f8a2 	bl	8007f84 <tcp_recv_null>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d12a      	bne.n	8007ea2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d033      	beq.n	8007ebe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007e5e:	d005      	beq.n	8007e6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e64:	3301      	adds	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <tcp_process_refused_data+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6918      	ldr	r0, [r3, #16]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	47a0      	blx	r4
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]
 8007e8c:	e001      	b.n	8007e92 <tcp_process_refused_data+0xb6>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e96:	f113 0f0d 	cmn.w	r3, #13
 8007e9a:	d110      	bne.n	8007ebe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007e9c:	f06f 030c 	mvn.w	r3, #12
 8007ea0:	e00e      	b.n	8007ec0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ea6:	f113 0f0d 	cmn.w	r3, #13
 8007eaa:	d102      	bne.n	8007eb2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007eac:	f06f 030c 	mvn.w	r3, #12
 8007eb0:	e006      	b.n	8007ec0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007eb8:	f06f 0304 	mvn.w	r3, #4
 8007ebc:	e000      	b.n	8007ec0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd90      	pop	{r4, r7, pc}
 8007ec8:	080139dc 	.word	0x080139dc
 8007ecc:	08013eec 	.word	0x08013eec
 8007ed0:	08013a20 	.word	0x08013a20

08007ed4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007edc:	e007      	b.n	8007eee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f809 	bl	8007efc <tcp_seg_free>
    seg = next;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f4      	bne.n	8007ede <tcp_segs_free+0xa>
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00c      	beq.n	8007f24 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fd6c 	bl	80069f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	2003      	movs	r0, #3
 8007f20:	f7fd ff3a 	bl	8005d98 <memp_free>
  }
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <tcp_seg_copy+0x1c>
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <tcp_seg_copy+0x4c>)
 8007f3c:	f240 6282 	movw	r2, #1666	; 0x682
 8007f40:	490e      	ldr	r1, [pc, #56]	; (8007f7c <tcp_seg_copy+0x50>)
 8007f42:	480f      	ldr	r0, [pc, #60]	; (8007f80 <tcp_seg_copy+0x54>)
 8007f44:	f00a f860 	bl	8012008 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007f48:	2003      	movs	r0, #3
 8007f4a:	f7fd fed3 	bl	8005cf4 <memp_malloc>
 8007f4e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <tcp_seg_copy+0x2e>
    return NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e00a      	b.n	8007f70 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f00a f83f 	bl	8011fe2 <memcpy>
  pbuf_ref(cseg->p);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe fde9 	bl	8006b40 <pbuf_ref>
  return cseg;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	080139dc 	.word	0x080139dc
 8007f7c:	08013f30 	.word	0x08013f30
 8007f80:	08013a20 	.word	0x08013a20

08007f84 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <tcp_recv_null+0x28>
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <tcp_recv_null+0x60>)
 8007f9a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007f9e:	4912      	ldr	r1, [pc, #72]	; (8007fe8 <tcp_recv_null+0x64>)
 8007fa0:	4812      	ldr	r0, [pc, #72]	; (8007fec <tcp_recv_null+0x68>)
 8007fa2:	f00a f831 	bl	8012008 <iprintf>
 8007fa6:	f06f 030f 	mvn.w	r3, #15
 8007faa:	e016      	b.n	8007fda <tcp_recv_null+0x56>

  if (p != NULL) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	891b      	ldrh	r3, [r3, #8]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68b8      	ldr	r0, [r7, #8]
 8007fba:	f7ff fb1d 	bl	80075f8 <tcp_recved>
    pbuf_free(p);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fe fd18 	bl	80069f4 <pbuf_free>
 8007fc4:	e008      	b.n	8007fd8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007fce:	68b8      	ldr	r0, [r7, #8]
 8007fd0:	f7ff f9c2 	bl	8007358 <tcp_close>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	e000      	b.n	8007fda <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	080139dc 	.word	0x080139dc
 8007fe8:	08013f4c 	.word	0x08013f4c
 8007fec:	08013a20 	.word	0x08013a20

08007ff0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	db01      	blt.n	8008006 <tcp_kill_prio+0x16>
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	e000      	b.n	8008008 <tcp_kill_prio+0x18>
 8008006:	237f      	movs	r3, #127	; 0x7f
 8008008:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d034      	beq.n	800807a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	3b01      	subs	r3, #1
 8008014:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800801e:	4b19      	ldr	r3, [pc, #100]	; (8008084 <tcp_kill_prio+0x94>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	e01f      	b.n	8008066 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	7d5b      	ldrb	r3, [r3, #21]
 800802a:	7afa      	ldrb	r2, [r7, #11]
 800802c:	429a      	cmp	r2, r3
 800802e:	d80c      	bhi.n	800804a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008034:	7afa      	ldrb	r2, [r7, #11]
 8008036:	429a      	cmp	r2, r3
 8008038:	d112      	bne.n	8008060 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <tcp_kill_prio+0x98>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	429a      	cmp	r2, r3
 8008048:	d80a      	bhi.n	8008060 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <tcp_kill_prio+0x98>)
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	7d5b      	ldrb	r3, [r3, #21]
 800805e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1dc      	bne.n	8008026 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008072:	6938      	ldr	r0, [r7, #16]
 8008074:	f7ff fa5a 	bl	800752c <tcp_abort>
 8008078:	e000      	b.n	800807c <tcp_kill_prio+0x8c>
    return;
 800807a:	bf00      	nop
  }
}
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200076d4 	.word	0x200076d4
 8008088:	200076d8 	.word	0x200076d8

0800808c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b08      	cmp	r3, #8
 800809a:	d009      	beq.n	80080b0 <tcp_kill_state+0x24>
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	2b09      	cmp	r3, #9
 80080a0:	d006      	beq.n	80080b0 <tcp_kill_state+0x24>
 80080a2:	4b1a      	ldr	r3, [pc, #104]	; (800810c <tcp_kill_state+0x80>)
 80080a4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80080a8:	4919      	ldr	r1, [pc, #100]	; (8008110 <tcp_kill_state+0x84>)
 80080aa:	481a      	ldr	r0, [pc, #104]	; (8008114 <tcp_kill_state+0x88>)
 80080ac:	f009 ffac 	bl	8012008 <iprintf>

  inactivity = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080b8:	4b17      	ldr	r3, [pc, #92]	; (8008118 <tcp_kill_state+0x8c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e017      	b.n	80080f0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	7d1b      	ldrb	r3, [r3, #20]
 80080c4:	79fa      	ldrb	r2, [r7, #7]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d10f      	bne.n	80080ea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <tcp_kill_state+0x90>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d807      	bhi.n	80080ea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80080da:	4b10      	ldr	r3, [pc, #64]	; (800811c <tcp_kill_state+0x90>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e4      	bne.n	80080c0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80080fc:	2100      	movs	r1, #0
 80080fe:	6938      	ldr	r0, [r7, #16]
 8008100:	f7ff f956 	bl	80073b0 <tcp_abandon>
  }
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	080139dc 	.word	0x080139dc
 8008110:	08013f68 	.word	0x08013f68
 8008114:	08013a20 	.word	0x08013a20
 8008118:	200076d4 	.word	0x200076d4
 800811c:	200076d8 	.word	0x200076d8

08008120 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800812e:	4b12      	ldr	r3, [pc, #72]	; (8008178 <tcp_kill_timewait+0x58>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e012      	b.n	800815c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <tcp_kill_timewait+0x5c>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d807      	bhi.n	8008156 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008146:	4b0d      	ldr	r3, [pc, #52]	; (800817c <tcp_kill_timewait+0x5c>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e9      	bne.n	8008136 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008168:	68b8      	ldr	r0, [r7, #8]
 800816a:	f7ff f9df 	bl	800752c <tcp_abort>
  }
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	200076e4 	.word	0x200076e4
 800817c:	200076d8 	.word	0x200076d8

08008180 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <tcp_handle_closepend+0x48>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800818c:	e014      	b.n	80081b8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8b5b      	ldrh	r3, [r3, #26]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8b5b      	ldrh	r3, [r3, #26]
 80081a4:	f023 0308 	bic.w	r3, r3, #8
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff f86c 	bl	800728c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e7      	bne.n	800818e <tcp_handle_closepend+0xe>
  }
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200076d4 	.word	0x200076d4

080081cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80081d6:	2001      	movs	r0, #1
 80081d8:	f7fd fd8c 	bl	8005cf4 <memp_malloc>
 80081dc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d126      	bne.n	8008232 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80081e4:	f7ff ffcc 	bl	8008180 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80081e8:	f7ff ff9a 	bl	8008120 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80081ec:	2001      	movs	r0, #1
 80081ee:	f7fd fd81 	bl	8005cf4 <memp_malloc>
 80081f2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11b      	bne.n	8008232 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80081fa:	2009      	movs	r0, #9
 80081fc:	f7ff ff46 	bl	800808c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008200:	2001      	movs	r0, #1
 8008202:	f7fd fd77 	bl	8005cf4 <memp_malloc>
 8008206:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d111      	bne.n	8008232 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800820e:	2008      	movs	r0, #8
 8008210:	f7ff ff3c 	bl	800808c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008214:	2001      	movs	r0, #1
 8008216:	f7fd fd6d 	bl	8005cf4 <memp_malloc>
 800821a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d107      	bne.n	8008232 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff fee3 	bl	8007ff0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800822a:	2001      	movs	r0, #1
 800822c:	f7fd fd62 	bl	8005cf4 <memp_malloc>
 8008230:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d03f      	beq.n	80082b8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008238:	229c      	movs	r2, #156	; 0x9c
 800823a:	2100      	movs	r1, #0
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f009 fedb 	bl	8011ff8 <memset>
    pcb->prio = prio;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	79fa      	ldrb	r2, [r7, #7]
 8008246:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800824e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	22ff      	movs	r2, #255	; 0xff
 8008266:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800826e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2206      	movs	r2, #6
 8008274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2206      	movs	r2, #6
 800827c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008284:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800828e:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <tcp_alloc+0xf8>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <tcp_alloc+0xfc>)
 8008298:	781a      	ldrb	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80082a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <tcp_alloc+0x100>)
 80082ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a07      	ldr	r2, [pc, #28]	; (80082d0 <tcp_alloc+0x104>)
 80082b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80082b8:	68fb      	ldr	r3, [r7, #12]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200076d8 	.word	0x200076d8
 80082c8:	20003e3e 	.word	0x20003e3e
 80082cc:	08007f85 	.word	0x08007f85
 80082d0:	006ddd00 	.word	0x006ddd00

080082d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d107      	bne.n	80082f2 <tcp_pcb_purge+0x1e>
 80082e2:	4b21      	ldr	r3, [pc, #132]	; (8008368 <tcp_pcb_purge+0x94>)
 80082e4:	f640 0251 	movw	r2, #2129	; 0x851
 80082e8:	4920      	ldr	r1, [pc, #128]	; (800836c <tcp_pcb_purge+0x98>)
 80082ea:	4821      	ldr	r0, [pc, #132]	; (8008370 <tcp_pcb_purge+0x9c>)
 80082ec:	f009 fe8c 	bl	8012008 <iprintf>
 80082f0:	e037      	b.n	8008362 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	7d1b      	ldrb	r3, [r3, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d033      	beq.n	8008362 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80082fe:	2b0a      	cmp	r3, #10
 8008300:	d02f      	beq.n	8008362 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008306:	2b01      	cmp	r3, #1
 8008308:	d02b      	beq.n	8008362 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800830e:	2b00      	cmp	r3, #0
 8008310:	d007      	beq.n	8008322 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fb6c 	bl	80069f4 <pbuf_free>
      pcb->refused_data = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f986 	bl	800863c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008336:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fdc9 	bl	8007ed4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fdc4 	bl	8007ed4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	66da      	str	r2, [r3, #108]	; 0x6c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	080139dc 	.word	0x080139dc
 800836c:	08014028 	.word	0x08014028
 8008370:	08013a20 	.word	0x08013a20

08008374 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <tcp_pcb_remove+0x1e>
 8008384:	4b3e      	ldr	r3, [pc, #248]	; (8008480 <tcp_pcb_remove+0x10c>)
 8008386:	f640 0283 	movw	r2, #2179	; 0x883
 800838a:	493e      	ldr	r1, [pc, #248]	; (8008484 <tcp_pcb_remove+0x110>)
 800838c:	483e      	ldr	r0, [pc, #248]	; (8008488 <tcp_pcb_remove+0x114>)
 800838e:	f009 fe3b 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <tcp_pcb_remove+0x32>
 8008398:	4b39      	ldr	r3, [pc, #228]	; (8008480 <tcp_pcb_remove+0x10c>)
 800839a:	f640 0284 	movw	r2, #2180	; 0x884
 800839e:	493b      	ldr	r1, [pc, #236]	; (800848c <tcp_pcb_remove+0x118>)
 80083a0:	4839      	ldr	r0, [pc, #228]	; (8008488 <tcp_pcb_remove+0x114>)
 80083a2:	f009 fe31 	bl	8012008 <iprintf>

  TCP_RMV(pcblist, pcb);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d105      	bne.n	80083bc <tcp_pcb_remove+0x48>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	e013      	b.n	80083e4 <tcp_pcb_remove+0x70>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e00c      	b.n	80083de <tcp_pcb_remove+0x6a>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d104      	bne.n	80083d8 <tcp_pcb_remove+0x64>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e005      	b.n	80083e4 <tcp_pcb_remove+0x70>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1ef      	bne.n	80083c4 <tcp_pcb_remove+0x50>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80083ea:	6838      	ldr	r0, [r7, #0]
 80083ec:	f7ff ff72 	bl	80082d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	7d1b      	ldrb	r3, [r3, #20]
 80083f4:	2b0a      	cmp	r3, #10
 80083f6:	d013      	beq.n	8008420 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d00f      	beq.n	8008420 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	8b5b      	ldrh	r3, [r3, #26]
 8008404:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	8b5b      	ldrh	r3, [r3, #26]
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	b29a      	uxth	r2, r3
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800841a:	6838      	ldr	r0, [r7, #0]
 800841c:	f002 ff68 	bl	800b2f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	7d1b      	ldrb	r3, [r3, #20]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d020      	beq.n	800846a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d006      	beq.n	800843e <tcp_pcb_remove+0xca>
 8008430:	4b13      	ldr	r3, [pc, #76]	; (8008480 <tcp_pcb_remove+0x10c>)
 8008432:	f640 0293 	movw	r2, #2195	; 0x893
 8008436:	4916      	ldr	r1, [pc, #88]	; (8008490 <tcp_pcb_remove+0x11c>)
 8008438:	4813      	ldr	r0, [pc, #76]	; (8008488 <tcp_pcb_remove+0x114>)
 800843a:	f009 fde5 	bl	8012008 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <tcp_pcb_remove+0xe0>
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <tcp_pcb_remove+0x10c>)
 8008448:	f640 0294 	movw	r2, #2196	; 0x894
 800844c:	4911      	ldr	r1, [pc, #68]	; (8008494 <tcp_pcb_remove+0x120>)
 800844e:	480e      	ldr	r0, [pc, #56]	; (8008488 <tcp_pcb_remove+0x114>)
 8008450:	f009 fdda 	bl	8012008 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008458:	2b00      	cmp	r3, #0
 800845a:	d006      	beq.n	800846a <tcp_pcb_remove+0xf6>
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <tcp_pcb_remove+0x10c>)
 800845e:	f640 0296 	movw	r2, #2198	; 0x896
 8008462:	490d      	ldr	r1, [pc, #52]	; (8008498 <tcp_pcb_remove+0x124>)
 8008464:	4808      	ldr	r0, [pc, #32]	; (8008488 <tcp_pcb_remove+0x114>)
 8008466:	f009 fdcf 	bl	8012008 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2200      	movs	r2, #0
 800846e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008476:	bf00      	nop
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	080139dc 	.word	0x080139dc
 8008484:	08014044 	.word	0x08014044
 8008488:	08013a20 	.word	0x08013a20
 800848c:	08014060 	.word	0x08014060
 8008490:	08014080 	.word	0x08014080
 8008494:	08014098 	.word	0x08014098
 8008498:	080140b4 	.word	0x080140b4

0800849c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <tcp_next_iss+0x1c>
 80084aa:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <tcp_next_iss+0x38>)
 80084ac:	f640 02af 	movw	r2, #2223	; 0x8af
 80084b0:	4909      	ldr	r1, [pc, #36]	; (80084d8 <tcp_next_iss+0x3c>)
 80084b2:	480a      	ldr	r0, [pc, #40]	; (80084dc <tcp_next_iss+0x40>)
 80084b4:	f009 fda8 	bl	8012008 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80084b8:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <tcp_next_iss+0x44>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <tcp_next_iss+0x48>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4413      	add	r3, r2
 80084c2:	4a07      	ldr	r2, [pc, #28]	; (80084e0 <tcp_next_iss+0x44>)
 80084c4:	6013      	str	r3, [r2, #0]
  return iss;
 80084c6:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <tcp_next_iss+0x44>)
 80084c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	080139dc 	.word	0x080139dc
 80084d8:	080140cc 	.word	0x080140cc
 80084dc:	08013a20 	.word	0x08013a20
 80084e0:	20000010 	.word	0x20000010
 80084e4:	200076d8 	.word	0x200076d8

080084e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <tcp_eff_send_mss_netif+0x22>
 80084fc:	4b14      	ldr	r3, [pc, #80]	; (8008550 <tcp_eff_send_mss_netif+0x68>)
 80084fe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008502:	4914      	ldr	r1, [pc, #80]	; (8008554 <tcp_eff_send_mss_netif+0x6c>)
 8008504:	4814      	ldr	r0, [pc, #80]	; (8008558 <tcp_eff_send_mss_netif+0x70>)
 8008506:	f009 fd7f 	bl	8012008 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008510:	89fb      	ldrh	r3, [r7, #14]
 8008512:	e019      	b.n	8008548 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008518:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800851a:	8afb      	ldrh	r3, [r7, #22]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d012      	beq.n	8008546 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008520:	2328      	movs	r3, #40	; 0x28
 8008522:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008524:	8afa      	ldrh	r2, [r7, #22]
 8008526:	8abb      	ldrh	r3, [r7, #20]
 8008528:	429a      	cmp	r2, r3
 800852a:	d904      	bls.n	8008536 <tcp_eff_send_mss_netif+0x4e>
 800852c:	8afa      	ldrh	r2, [r7, #22]
 800852e:	8abb      	ldrh	r3, [r7, #20]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	b29b      	uxth	r3, r3
 8008534:	e000      	b.n	8008538 <tcp_eff_send_mss_netif+0x50>
 8008536:	2300      	movs	r3, #0
 8008538:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800853a:	8a7a      	ldrh	r2, [r7, #18]
 800853c:	89fb      	ldrh	r3, [r7, #14]
 800853e:	4293      	cmp	r3, r2
 8008540:	bf28      	it	cs
 8008542:	4613      	movcs	r3, r2
 8008544:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008546:	89fb      	ldrh	r3, [r7, #14]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	080139dc 	.word	0x080139dc
 8008554:	080140e8 	.word	0x080140e8
 8008558:	08013a20 	.word	0x08013a20

0800855c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d119      	bne.n	80085a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008570:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008572:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008576:	4910      	ldr	r1, [pc, #64]	; (80085b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008578:	4810      	ldr	r0, [pc, #64]	; (80085bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800857a:	f009 fd45 	bl	8012008 <iprintf>

  while (pcb != NULL) {
 800857e:	e011      	b.n	80085a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	d108      	bne.n	800859e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7fe ffca 	bl	800752c <tcp_abort>
      pcb = next;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	e002      	b.n	80085a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1ea      	bne.n	8008580 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	080139dc 	.word	0x080139dc
 80085b8:	08014110 	.word	0x08014110
 80085bc:	08013a20 	.word	0x08013a20

080085c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d02a      	beq.n	8008626 <tcp_netif_ip_addr_changed+0x66>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d026      	beq.n	8008626 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <tcp_netif_ip_addr_changed+0x70>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff ffbc 	bl	800855c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80085e4:	4b13      	ldr	r3, [pc, #76]	; (8008634 <tcp_netif_ip_addr_changed+0x74>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ffb6 	bl	800855c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d017      	beq.n	8008626 <tcp_netif_ip_addr_changed+0x66>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d013      	beq.n	8008626 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80085fe:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <tcp_netif_ip_addr_changed+0x78>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e00c      	b.n	8008620 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d103      	bne.n	800861a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1ef      	bne.n	8008606 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200076d4 	.word	0x200076d4
 8008634:	200076e0 	.word	0x200076e0
 8008638:	200076dc 	.word	0x200076dc

0800863c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fc3f 	bl	8007ed4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b08d      	sub	sp, #52	; 0x34
 8008668:	af04      	add	r7, sp, #16
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <tcp_input+0x1c>
 8008674:	4b9b      	ldr	r3, [pc, #620]	; (80088e4 <tcp_input+0x280>)
 8008676:	2283      	movs	r2, #131	; 0x83
 8008678:	499b      	ldr	r1, [pc, #620]	; (80088e8 <tcp_input+0x284>)
 800867a:	489c      	ldr	r0, [pc, #624]	; (80088ec <tcp_input+0x288>)
 800867c:	f009 fcc4 	bl	8012008 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4a9a      	ldr	r2, [pc, #616]	; (80088f0 <tcp_input+0x28c>)
 8008686:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	895b      	ldrh	r3, [r3, #10]
 800868c:	2b13      	cmp	r3, #19
 800868e:	f240 83c4 	bls.w	8008e1a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008692:	4b98      	ldr	r3, [pc, #608]	; (80088f4 <tcp_input+0x290>)
 8008694:	695a      	ldr	r2, [r3, #20]
 8008696:	4b97      	ldr	r3, [pc, #604]	; (80088f4 <tcp_input+0x290>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f007 fdc9 	bl	8010234 <ip4_addr_isbroadcast_u32>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f040 83ba 	bne.w	8008e1e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80086aa:	4b92      	ldr	r3, [pc, #584]	; (80088f4 <tcp_input+0x290>)
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80086b2:	2be0      	cmp	r3, #224	; 0xe0
 80086b4:	f000 83b3 	beq.w	8008e1e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80086b8:	4b8d      	ldr	r3, [pc, #564]	; (80088f0 <tcp_input+0x28c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	899b      	ldrh	r3, [r3, #12]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fc fe61 	bl	8005388 <lwip_htons>
 80086c6:	4603      	mov	r3, r0
 80086c8:	0b1b      	lsrs	r3, r3, #12
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80086d2:	7cbb      	ldrb	r3, [r7, #18]
 80086d4:	2b13      	cmp	r3, #19
 80086d6:	f240 83a2 	bls.w	8008e1e <tcp_input+0x7ba>
 80086da:	7cbb      	ldrb	r3, [r7, #18]
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	891b      	ldrh	r3, [r3, #8]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	f200 839b 	bhi.w	8008e1e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80086e8:	7cbb      	ldrb	r3, [r7, #18]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	3b14      	subs	r3, #20
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	4b81      	ldr	r3, [pc, #516]	; (80088f8 <tcp_input+0x294>)
 80086f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80086f4:	4b81      	ldr	r3, [pc, #516]	; (80088fc <tcp_input+0x298>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	895a      	ldrh	r2, [r3, #10]
 80086fe:	7cbb      	ldrb	r3, [r7, #18]
 8008700:	b29b      	uxth	r3, r3
 8008702:	429a      	cmp	r2, r3
 8008704:	d309      	bcc.n	800871a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008706:	4b7c      	ldr	r3, [pc, #496]	; (80088f8 <tcp_input+0x294>)
 8008708:	881a      	ldrh	r2, [r3, #0]
 800870a:	4b7d      	ldr	r3, [pc, #500]	; (8008900 <tcp_input+0x29c>)
 800870c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800870e:	7cbb      	ldrb	r3, [r7, #18]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fe f8e8 	bl	80068e8 <pbuf_remove_header>
 8008718:	e04e      	b.n	80087b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d105      	bne.n	800872e <tcp_input+0xca>
 8008722:	4b70      	ldr	r3, [pc, #448]	; (80088e4 <tcp_input+0x280>)
 8008724:	22c2      	movs	r2, #194	; 0xc2
 8008726:	4977      	ldr	r1, [pc, #476]	; (8008904 <tcp_input+0x2a0>)
 8008728:	4870      	ldr	r0, [pc, #448]	; (80088ec <tcp_input+0x288>)
 800872a:	f009 fc6d 	bl	8012008 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800872e:	2114      	movs	r1, #20
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fe f8d9 	bl	80068e8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	895a      	ldrh	r2, [r3, #10]
 800873a:	4b71      	ldr	r3, [pc, #452]	; (8008900 <tcp_input+0x29c>)
 800873c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800873e:	4b6e      	ldr	r3, [pc, #440]	; (80088f8 <tcp_input+0x294>)
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	4b6f      	ldr	r3, [pc, #444]	; (8008900 <tcp_input+0x29c>)
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800874a:	4b6d      	ldr	r3, [pc, #436]	; (8008900 <tcp_input+0x29c>)
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7fe f8c9 	bl	80068e8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	895b      	ldrh	r3, [r3, #10]
 800875c:	8a3a      	ldrh	r2, [r7, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	f200 835f 	bhi.w	8008e22 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	4a64      	ldr	r2, [pc, #400]	; (80088fc <tcp_input+0x298>)
 800876c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	8a3a      	ldrh	r2, [r7, #16]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe f8b6 	bl	80068e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	891a      	ldrh	r2, [r3, #8]
 8008780:	8a3b      	ldrh	r3, [r7, #16]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	b29a      	uxth	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <tcp_input+0x13a>
 8008792:	4b54      	ldr	r3, [pc, #336]	; (80088e4 <tcp_input+0x280>)
 8008794:	22df      	movs	r2, #223	; 0xdf
 8008796:	495c      	ldr	r1, [pc, #368]	; (8008908 <tcp_input+0x2a4>)
 8008798:	4854      	ldr	r0, [pc, #336]	; (80088ec <tcp_input+0x288>)
 800879a:	f009 fc35 	bl	8012008 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	891a      	ldrh	r2, [r3, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	891b      	ldrh	r3, [r3, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d005      	beq.n	80087b8 <tcp_input+0x154>
 80087ac:	4b4d      	ldr	r3, [pc, #308]	; (80088e4 <tcp_input+0x280>)
 80087ae:	22e0      	movs	r2, #224	; 0xe0
 80087b0:	4956      	ldr	r1, [pc, #344]	; (800890c <tcp_input+0x2a8>)
 80087b2:	484e      	ldr	r0, [pc, #312]	; (80088ec <tcp_input+0x288>)
 80087b4:	f009 fc28 	bl	8012008 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80087b8:	4b4d      	ldr	r3, [pc, #308]	; (80088f0 <tcp_input+0x28c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	4b4b      	ldr	r3, [pc, #300]	; (80088f0 <tcp_input+0x28c>)
 80087c2:	681c      	ldr	r4, [r3, #0]
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fc fddf 	bl	8005388 <lwip_htons>
 80087ca:	4603      	mov	r3, r0
 80087cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80087ce:	4b48      	ldr	r3, [pc, #288]	; (80088f0 <tcp_input+0x28c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	4b46      	ldr	r3, [pc, #280]	; (80088f0 <tcp_input+0x28c>)
 80087d8:	681c      	ldr	r4, [r3, #0]
 80087da:	4610      	mov	r0, r2
 80087dc:	f7fc fdd4 	bl	8005388 <lwip_htons>
 80087e0:	4603      	mov	r3, r0
 80087e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80087e4:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <tcp_input+0x28c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	4b41      	ldr	r3, [pc, #260]	; (80088f0 <tcp_input+0x28c>)
 80087ec:	681c      	ldr	r4, [r3, #0]
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fc fddf 	bl	80053b2 <lwip_htonl>
 80087f4:	4603      	mov	r3, r0
 80087f6:	6063      	str	r3, [r4, #4]
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	4a45      	ldr	r2, [pc, #276]	; (8008910 <tcp_input+0x2ac>)
 80087fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80087fe:	4b3c      	ldr	r3, [pc, #240]	; (80088f0 <tcp_input+0x28c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <tcp_input+0x28c>)
 8008806:	681c      	ldr	r4, [r3, #0]
 8008808:	4610      	mov	r0, r2
 800880a:	f7fc fdd2 	bl	80053b2 <lwip_htonl>
 800880e:	4603      	mov	r3, r0
 8008810:	60a3      	str	r3, [r4, #8]
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	4a3f      	ldr	r2, [pc, #252]	; (8008914 <tcp_input+0x2b0>)
 8008816:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008818:	4b35      	ldr	r3, [pc, #212]	; (80088f0 <tcp_input+0x28c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	89db      	ldrh	r3, [r3, #14]
 800881e:	b29a      	uxth	r2, r3
 8008820:	4b33      	ldr	r3, [pc, #204]	; (80088f0 <tcp_input+0x28c>)
 8008822:	681c      	ldr	r4, [r3, #0]
 8008824:	4610      	mov	r0, r2
 8008826:	f7fc fdaf 	bl	8005388 <lwip_htons>
 800882a:	4603      	mov	r3, r0
 800882c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800882e:	4b30      	ldr	r3, [pc, #192]	; (80088f0 <tcp_input+0x28c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	899b      	ldrh	r3, [r3, #12]
 8008834:	b29b      	uxth	r3, r3
 8008836:	4618      	mov	r0, r3
 8008838:	f7fc fda6 	bl	8005388 <lwip_htons>
 800883c:	4603      	mov	r3, r0
 800883e:	b2db      	uxtb	r3, r3
 8008840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008844:	b2da      	uxtb	r2, r3
 8008846:	4b34      	ldr	r3, [pc, #208]	; (8008918 <tcp_input+0x2b4>)
 8008848:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	891a      	ldrh	r2, [r3, #8]
 800884e:	4b33      	ldr	r3, [pc, #204]	; (800891c <tcp_input+0x2b8>)
 8008850:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008852:	4b31      	ldr	r3, [pc, #196]	; (8008918 <tcp_input+0x2b4>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00c      	beq.n	8008878 <tcp_input+0x214>
    tcplen++;
 800885e:	4b2f      	ldr	r3, [pc, #188]	; (800891c <tcp_input+0x2b8>)
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	3301      	adds	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	4b2d      	ldr	r3, [pc, #180]	; (800891c <tcp_input+0x2b8>)
 8008868:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	891a      	ldrh	r2, [r3, #8]
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <tcp_input+0x2b8>)
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	f200 82d7 	bhi.w	8008e26 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008878:	2300      	movs	r3, #0
 800887a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800887c:	4b28      	ldr	r3, [pc, #160]	; (8008920 <tcp_input+0x2bc>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	e09d      	b.n	80089c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	7d1b      	ldrb	r3, [r3, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d105      	bne.n	8008898 <tcp_input+0x234>
 800888c:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <tcp_input+0x280>)
 800888e:	22fb      	movs	r2, #251	; 0xfb
 8008890:	4924      	ldr	r1, [pc, #144]	; (8008924 <tcp_input+0x2c0>)
 8008892:	4816      	ldr	r0, [pc, #88]	; (80088ec <tcp_input+0x288>)
 8008894:	f009 fbb8 	bl	8012008 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	7d1b      	ldrb	r3, [r3, #20]
 800889c:	2b0a      	cmp	r3, #10
 800889e:	d105      	bne.n	80088ac <tcp_input+0x248>
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <tcp_input+0x280>)
 80088a2:	22fc      	movs	r2, #252	; 0xfc
 80088a4:	4920      	ldr	r1, [pc, #128]	; (8008928 <tcp_input+0x2c4>)
 80088a6:	4811      	ldr	r0, [pc, #68]	; (80088ec <tcp_input+0x288>)
 80088a8:	f009 fbae 	bl	8012008 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	7d1b      	ldrb	r3, [r3, #20]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d105      	bne.n	80088c0 <tcp_input+0x25c>
 80088b4:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <tcp_input+0x280>)
 80088b6:	22fd      	movs	r2, #253	; 0xfd
 80088b8:	491c      	ldr	r1, [pc, #112]	; (800892c <tcp_input+0x2c8>)
 80088ba:	480c      	ldr	r0, [pc, #48]	; (80088ec <tcp_input+0x288>)
 80088bc:	f009 fba4 	bl	8012008 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	7a1b      	ldrb	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d033      	beq.n	8008930 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	7a1a      	ldrb	r2, [r3, #8]
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <tcp_input+0x290>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088d4:	3301      	adds	r3, #1
 80088d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80088d8:	429a      	cmp	r2, r3
 80088da:	d029      	beq.n	8008930 <tcp_input+0x2cc>
      prev = pcb;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	61bb      	str	r3, [r7, #24]
      continue;
 80088e0:	e06b      	b.n	80089ba <tcp_input+0x356>
 80088e2:	bf00      	nop
 80088e4:	08014144 	.word	0x08014144
 80088e8:	08014178 	.word	0x08014178
 80088ec:	08014190 	.word	0x08014190
 80088f0:	20003e50 	.word	0x20003e50
 80088f4:	20003fa0 	.word	0x20003fa0
 80088f8:	20003e54 	.word	0x20003e54
 80088fc:	20003e58 	.word	0x20003e58
 8008900:	20003e56 	.word	0x20003e56
 8008904:	080141b8 	.word	0x080141b8
 8008908:	080141c8 	.word	0x080141c8
 800890c:	080141d4 	.word	0x080141d4
 8008910:	20003e60 	.word	0x20003e60
 8008914:	20003e64 	.word	0x20003e64
 8008918:	20003e6c 	.word	0x20003e6c
 800891c:	20003e6a 	.word	0x20003e6a
 8008920:	200076d4 	.word	0x200076d4
 8008924:	080141f4 	.word	0x080141f4
 8008928:	0801421c 	.word	0x0801421c
 800892c:	08014248 	.word	0x08014248
    }

    if (pcb->remote_port == tcphdr->src &&
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	8b1a      	ldrh	r2, [r3, #24]
 8008934:	4b94      	ldr	r3, [pc, #592]	; (8008b88 <tcp_input+0x524>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	429a      	cmp	r2, r3
 800893e:	d13a      	bne.n	80089b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	8ada      	ldrh	r2, [r3, #22]
 8008944:	4b90      	ldr	r3, [pc, #576]	; (8008b88 <tcp_input+0x524>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800894c:	429a      	cmp	r2, r3
 800894e:	d132      	bne.n	80089b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	4b8d      	ldr	r3, [pc, #564]	; (8008b8c <tcp_input+0x528>)
 8008956:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008958:	429a      	cmp	r2, r3
 800895a:	d12c      	bne.n	80089b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	4b8a      	ldr	r3, [pc, #552]	; (8008b8c <tcp_input+0x528>)
 8008962:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008964:	429a      	cmp	r2, r3
 8008966:	d126      	bne.n	80089b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	429a      	cmp	r2, r3
 8008970:	d106      	bne.n	8008980 <tcp_input+0x31c>
 8008972:	4b87      	ldr	r3, [pc, #540]	; (8008b90 <tcp_input+0x52c>)
 8008974:	f240 120d 	movw	r2, #269	; 0x10d
 8008978:	4986      	ldr	r1, [pc, #536]	; (8008b94 <tcp_input+0x530>)
 800897a:	4887      	ldr	r0, [pc, #540]	; (8008b98 <tcp_input+0x534>)
 800897c:	f009 fb44 	bl	8012008 <iprintf>
      if (prev != NULL) {
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <tcp_input+0x338>
        prev->next = pcb->next;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800898e:	4b83      	ldr	r3, [pc, #524]	; (8008b9c <tcp_input+0x538>)
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008996:	4a81      	ldr	r2, [pc, #516]	; (8008b9c <tcp_input+0x538>)
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d111      	bne.n	80089ca <tcp_input+0x366>
 80089a6:	4b7a      	ldr	r3, [pc, #488]	; (8008b90 <tcp_input+0x52c>)
 80089a8:	f240 1215 	movw	r2, #277	; 0x115
 80089ac:	497c      	ldr	r1, [pc, #496]	; (8008ba0 <tcp_input+0x53c>)
 80089ae:	487a      	ldr	r0, [pc, #488]	; (8008b98 <tcp_input+0x534>)
 80089b0:	f009 fb2a 	bl	8012008 <iprintf>
      break;
 80089b4:	e009      	b.n	80089ca <tcp_input+0x366>
    }
    prev = pcb;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f47f af5e 	bne.w	8008884 <tcp_input+0x220>
 80089c8:	e000      	b.n	80089cc <tcp_input+0x368>
      break;
 80089ca:	bf00      	nop
  }

  if (pcb == NULL) {
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 8095 	bne.w	8008afe <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80089d4:	4b73      	ldr	r3, [pc, #460]	; (8008ba4 <tcp_input+0x540>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	e03f      	b.n	8008a5c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	7d1b      	ldrb	r3, [r3, #20]
 80089e0:	2b0a      	cmp	r3, #10
 80089e2:	d006      	beq.n	80089f2 <tcp_input+0x38e>
 80089e4:	4b6a      	ldr	r3, [pc, #424]	; (8008b90 <tcp_input+0x52c>)
 80089e6:	f240 121f 	movw	r2, #287	; 0x11f
 80089ea:	496f      	ldr	r1, [pc, #444]	; (8008ba8 <tcp_input+0x544>)
 80089ec:	486a      	ldr	r0, [pc, #424]	; (8008b98 <tcp_input+0x534>)
 80089ee:	f009 fb0b 	bl	8012008 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	7a1b      	ldrb	r3, [r3, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	7a1a      	ldrb	r2, [r3, #8]
 80089fe:	4b63      	ldr	r3, [pc, #396]	; (8008b8c <tcp_input+0x528>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a06:	3301      	adds	r3, #1
 8008a08:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d122      	bne.n	8008a54 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	8b1a      	ldrh	r2, [r3, #24]
 8008a12:	4b5d      	ldr	r3, [pc, #372]	; (8008b88 <tcp_input+0x524>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d11b      	bne.n	8008a56 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	8ada      	ldrh	r2, [r3, #22]
 8008a22:	4b59      	ldr	r3, [pc, #356]	; (8008b88 <tcp_input+0x524>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	885b      	ldrh	r3, [r3, #2]
 8008a28:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d113      	bne.n	8008a56 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	4b56      	ldr	r3, [pc, #344]	; (8008b8c <tcp_input+0x528>)
 8008a34:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d10d      	bne.n	8008a56 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b53      	ldr	r3, [pc, #332]	; (8008b8c <tcp_input+0x528>)
 8008a40:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d107      	bne.n	8008a56 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008a46:	69f8      	ldr	r0, [r7, #28]
 8008a48:	f000 fb52 	bl	80090f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7fd ffd1 	bl	80069f4 <pbuf_free>
        return;
 8008a52:	e1ee      	b.n	8008e32 <tcp_input+0x7ce>
        continue;
 8008a54:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	61fb      	str	r3, [r7, #28]
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1bc      	bne.n	80089dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a66:	4b51      	ldr	r3, [pc, #324]	; (8008bac <tcp_input+0x548>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	e02a      	b.n	8008ac4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	7a1b      	ldrb	r3, [r3, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00c      	beq.n	8008a90 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	7a1a      	ldrb	r2, [r3, #8]
 8008a7a:	4b44      	ldr	r3, [pc, #272]	; (8008b8c <tcp_input+0x528>)
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a82:	3301      	adds	r3, #1
 8008a84:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d002      	beq.n	8008a90 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	61bb      	str	r3, [r7, #24]
        continue;
 8008a8e:	e016      	b.n	8008abe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	8ada      	ldrh	r2, [r3, #22]
 8008a94:	4b3c      	ldr	r3, [pc, #240]	; (8008b88 <tcp_input+0x524>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d10c      	bne.n	8008aba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <tcp_input+0x528>)
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d00f      	beq.n	8008acc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00d      	beq.n	8008ace <tcp_input+0x46a>
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1d1      	bne.n	8008a6e <tcp_input+0x40a>
 8008aca:	e000      	b.n	8008ace <tcp_input+0x46a>
            break;
 8008acc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d014      	beq.n	8008afe <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008ae2:	4b32      	ldr	r3, [pc, #200]	; (8008bac <tcp_input+0x548>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008aea:	4a30      	ldr	r2, [pc, #192]	; (8008bac <tcp_input+0x548>)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008af0:	6978      	ldr	r0, [r7, #20]
 8008af2:	f000 f9ff 	bl	8008ef4 <tcp_listen_input>
      }
      pbuf_free(p);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fd ff7c 	bl	80069f4 <pbuf_free>
      return;
 8008afc:	e199      	b.n	8008e32 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8160 	beq.w	8008dc6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008b06:	4b2a      	ldr	r3, [pc, #168]	; (8008bb0 <tcp_input+0x54c>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	891a      	ldrh	r2, [r3, #8]
 8008b10:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <tcp_input+0x54c>)
 8008b12:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <tcp_input+0x54c>)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <tcp_input+0x524>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a24      	ldr	r2, [pc, #144]	; (8008bb0 <tcp_input+0x54c>)
 8008b20:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008b22:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <tcp_input+0x550>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008b28:	4b23      	ldr	r3, [pc, #140]	; (8008bb8 <tcp_input+0x554>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008b2e:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <tcp_input+0x558>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008b34:	4b22      	ldr	r3, [pc, #136]	; (8008bc0 <tcp_input+0x55c>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7b5b      	ldrb	r3, [r3, #13]
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d038      	beq.n	8008bc8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008b56:	69f8      	ldr	r0, [r7, #28]
 8008b58:	f7ff f940 	bl	8007ddc <tcp_process_refused_data>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f113 0f0d 	cmn.w	r3, #13
 8008b62:	d007      	beq.n	8008b74 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d02d      	beq.n	8008bc8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008b6c:	4b15      	ldr	r3, [pc, #84]	; (8008bc4 <tcp_input+0x560>)
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d029      	beq.n	8008bc8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f040 8104 	bne.w	8008d86 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008b7e:	69f8      	ldr	r0, [r7, #28]
 8008b80:	f003 f9ce 	bl	800bf20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008b84:	e0ff      	b.n	8008d86 <tcp_input+0x722>
 8008b86:	bf00      	nop
 8008b88:	20003e50 	.word	0x20003e50
 8008b8c:	20003fa0 	.word	0x20003fa0
 8008b90:	08014144 	.word	0x08014144
 8008b94:	08014270 	.word	0x08014270
 8008b98:	08014190 	.word	0x08014190
 8008b9c:	200076d4 	.word	0x200076d4
 8008ba0:	0801429c 	.word	0x0801429c
 8008ba4:	200076e4 	.word	0x200076e4
 8008ba8:	080142c8 	.word	0x080142c8
 8008bac:	200076dc 	.word	0x200076dc
 8008bb0:	20003e40 	.word	0x20003e40
 8008bb4:	20003e70 	.word	0x20003e70
 8008bb8:	20003e6d 	.word	0x20003e6d
 8008bbc:	20003e68 	.word	0x20003e68
 8008bc0:	20003e6c 	.word	0x20003e6c
 8008bc4:	20003e6a 	.word	0x20003e6a
      }
    }
    tcp_input_pcb = pcb;
 8008bc8:	4a9b      	ldr	r2, [pc, #620]	; (8008e38 <tcp_input+0x7d4>)
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008bce:	69f8      	ldr	r0, [r7, #28]
 8008bd0:	f000 fb0a 	bl	80091e8 <tcp_process>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bdc:	f113 0f0d 	cmn.w	r3, #13
 8008be0:	f000 80d3 	beq.w	8008d8a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008be4:	4b95      	ldr	r3, [pc, #596]	; (8008e3c <tcp_input+0x7d8>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d015      	beq.n	8008c1c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <tcp_input+0x5a8>
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	6912      	ldr	r2, [r2, #16]
 8008c04:	f06f 010d 	mvn.w	r1, #13
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008c0c:	69f9      	ldr	r1, [r7, #28]
 8008c0e:	488c      	ldr	r0, [pc, #560]	; (8008e40 <tcp_input+0x7dc>)
 8008c10:	f7ff fbb0 	bl	8008374 <tcp_pcb_remove>
        tcp_free(pcb);
 8008c14:	69f8      	ldr	r0, [r7, #28]
 8008c16:	f7fe f9a9 	bl	8006f6c <tcp_free>
 8008c1a:	e0c1      	b.n	8008da0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008c20:	4b88      	ldr	r3, [pc, #544]	; (8008e44 <tcp_input+0x7e0>)
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01d      	beq.n	8008c64 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008c28:	4b86      	ldr	r3, [pc, #536]	; (8008e44 <tcp_input+0x7e0>)
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00a      	beq.n	8008c4e <tcp_input+0x5ea>
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	6910      	ldr	r0, [r2, #16]
 8008c42:	89fa      	ldrh	r2, [r7, #14]
 8008c44:	69f9      	ldr	r1, [r7, #28]
 8008c46:	4798      	blx	r3
 8008c48:	4603      	mov	r3, r0
 8008c4a:	74fb      	strb	r3, [r7, #19]
 8008c4c:	e001      	b.n	8008c52 <tcp_input+0x5ee>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008c52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c56:	f113 0f0d 	cmn.w	r3, #13
 8008c5a:	f000 8098 	beq.w	8008d8e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008c5e:	4b79      	ldr	r3, [pc, #484]	; (8008e44 <tcp_input+0x7e0>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008c64:	69f8      	ldr	r0, [r7, #28]
 8008c66:	f000 f905 	bl	8008e74 <tcp_input_delayed_close>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8090 	bne.w	8008d92 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008c72:	4b75      	ldr	r3, [pc, #468]	; (8008e48 <tcp_input+0x7e4>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d041      	beq.n	8008cfe <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <tcp_input+0x62c>
 8008c82:	4b72      	ldr	r3, [pc, #456]	; (8008e4c <tcp_input+0x7e8>)
 8008c84:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008c88:	4971      	ldr	r1, [pc, #452]	; (8008e50 <tcp_input+0x7ec>)
 8008c8a:	4872      	ldr	r0, [pc, #456]	; (8008e54 <tcp_input+0x7f0>)
 8008c8c:	f009 f9bc 	bl	8012008 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	8b5b      	ldrh	r3, [r3, #26]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008c9c:	4b6a      	ldr	r3, [pc, #424]	; (8008e48 <tcp_input+0x7e4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fd fea7 	bl	80069f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008ca6:	69f8      	ldr	r0, [r7, #28]
 8008ca8:	f7fe fc40 	bl	800752c <tcp_abort>
            goto aborted;
 8008cac:	e078      	b.n	8008da0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00c      	beq.n	8008cd2 <tcp_input+0x66e>
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	6918      	ldr	r0, [r3, #16]
 8008cc2:	4b61      	ldr	r3, [pc, #388]	; (8008e48 <tcp_input+0x7e4>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	69f9      	ldr	r1, [r7, #28]
 8008cca:	47a0      	blx	r4
 8008ccc:	4603      	mov	r3, r0
 8008cce:	74fb      	strb	r3, [r7, #19]
 8008cd0:	e008      	b.n	8008ce4 <tcp_input+0x680>
 8008cd2:	4b5d      	ldr	r3, [pc, #372]	; (8008e48 <tcp_input+0x7e4>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	69f9      	ldr	r1, [r7, #28]
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f7ff f952 	bl	8007f84 <tcp_recv_null>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008ce4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ce8:	f113 0f0d 	cmn.w	r3, #13
 8008cec:	d053      	beq.n	8008d96 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008cee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008cf6:	4b54      	ldr	r3, [pc, #336]	; (8008e48 <tcp_input+0x7e4>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008cfe:	4b4f      	ldr	r3, [pc, #316]	; (8008e3c <tcp_input+0x7d8>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d030      	beq.n	8008d6c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d16:	7b5a      	ldrb	r2, [r3, #13]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d1c:	f042 0220 	orr.w	r2, r2, #32
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	735a      	strb	r2, [r3, #13]
 8008d24:	e022      	b.n	8008d6c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008d2e:	d005      	beq.n	8008d3c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d34:	3301      	adds	r3, #1
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <tcp_input+0x6fa>
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	6918      	ldr	r0, [r3, #16]
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	69f9      	ldr	r1, [r7, #28]
 8008d56:	47a0      	blx	r4
 8008d58:	4603      	mov	r3, r0
 8008d5a:	74fb      	strb	r3, [r7, #19]
 8008d5c:	e001      	b.n	8008d62 <tcp_input+0x6fe>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008d62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d66:	f113 0f0d 	cmn.w	r3, #13
 8008d6a:	d016      	beq.n	8008d9a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008d6c:	4b32      	ldr	r3, [pc, #200]	; (8008e38 <tcp_input+0x7d4>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008d72:	69f8      	ldr	r0, [r7, #28]
 8008d74:	f000 f87e 	bl	8008e74 <tcp_input_delayed_close>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10f      	bne.n	8008d9e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008d7e:	69f8      	ldr	r0, [r7, #28]
 8008d80:	f002 fab6 	bl	800b2f0 <tcp_output>
 8008d84:	e00c      	b.n	8008da0 <tcp_input+0x73c>
        goto aborted;
 8008d86:	bf00      	nop
 8008d88:	e00a      	b.n	8008da0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008d8a:	bf00      	nop
 8008d8c:	e008      	b.n	8008da0 <tcp_input+0x73c>
              goto aborted;
 8008d8e:	bf00      	nop
 8008d90:	e006      	b.n	8008da0 <tcp_input+0x73c>
          goto aborted;
 8008d92:	bf00      	nop
 8008d94:	e004      	b.n	8008da0 <tcp_input+0x73c>
            goto aborted;
 8008d96:	bf00      	nop
 8008d98:	e002      	b.n	8008da0 <tcp_input+0x73c>
              goto aborted;
 8008d9a:	bf00      	nop
 8008d9c:	e000      	b.n	8008da0 <tcp_input+0x73c>
          goto aborted;
 8008d9e:	bf00      	nop
    tcp_input_pcb = NULL;
 8008da0:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <tcp_input+0x7d4>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008da6:	4b28      	ldr	r3, [pc, #160]	; (8008e48 <tcp_input+0x7e4>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008dac:	4b2a      	ldr	r3, [pc, #168]	; (8008e58 <tcp_input+0x7f4>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d03d      	beq.n	8008e30 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8008db4:	4b28      	ldr	r3, [pc, #160]	; (8008e58 <tcp_input+0x7f4>)
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fd fe1b 	bl	80069f4 <pbuf_free>
      inseg.p = NULL;
 8008dbe:	4b26      	ldr	r3, [pc, #152]	; (8008e58 <tcp_input+0x7f4>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008dc4:	e034      	b.n	8008e30 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008dc6:	4b25      	ldr	r3, [pc, #148]	; (8008e5c <tcp_input+0x7f8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	899b      	ldrh	r3, [r3, #12]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fc fada 	bl	8005388 <lwip_htons>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d118      	bne.n	8008e12 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008de0:	4b1f      	ldr	r3, [pc, #124]	; (8008e60 <tcp_input+0x7fc>)
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	4b1f      	ldr	r3, [pc, #124]	; (8008e64 <tcp_input+0x800>)
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	4b1f      	ldr	r3, [pc, #124]	; (8008e68 <tcp_input+0x804>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008df0:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <tcp_input+0x7f8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008df4:	885b      	ldrh	r3, [r3, #2]
 8008df6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008df8:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <tcp_input+0x7f8>)
 8008dfa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dfc:	8812      	ldrh	r2, [r2, #0]
 8008dfe:	b292      	uxth	r2, r2
 8008e00:	9202      	str	r2, [sp, #8]
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <tcp_input+0x808>)
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <tcp_input+0x80c>)
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f003 f835 	bl	800be7c <tcp_rst>
    pbuf_free(p);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fd fdee 	bl	80069f4 <pbuf_free>
  return;
 8008e18:	e00a      	b.n	8008e30 <tcp_input+0x7cc>
    goto dropped;
 8008e1a:	bf00      	nop
 8008e1c:	e004      	b.n	8008e28 <tcp_input+0x7c4>
dropped:
 8008e1e:	bf00      	nop
 8008e20:	e002      	b.n	8008e28 <tcp_input+0x7c4>
      goto dropped;
 8008e22:	bf00      	nop
 8008e24:	e000      	b.n	8008e28 <tcp_input+0x7c4>
      goto dropped;
 8008e26:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7fd fde3 	bl	80069f4 <pbuf_free>
 8008e2e:	e000      	b.n	8008e32 <tcp_input+0x7ce>
  return;
 8008e30:	bf00      	nop
}
 8008e32:	3724      	adds	r7, #36	; 0x24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd90      	pop	{r4, r7, pc}
 8008e38:	200076e8 	.word	0x200076e8
 8008e3c:	20003e6d 	.word	0x20003e6d
 8008e40:	200076d4 	.word	0x200076d4
 8008e44:	20003e68 	.word	0x20003e68
 8008e48:	20003e70 	.word	0x20003e70
 8008e4c:	08014144 	.word	0x08014144
 8008e50:	080142f8 	.word	0x080142f8
 8008e54:	08014190 	.word	0x08014190
 8008e58:	20003e40 	.word	0x20003e40
 8008e5c:	20003e50 	.word	0x20003e50
 8008e60:	20003e64 	.word	0x20003e64
 8008e64:	20003e6a 	.word	0x20003e6a
 8008e68:	20003e60 	.word	0x20003e60
 8008e6c:	20003fb0 	.word	0x20003fb0
 8008e70:	20003fb4 	.word	0x20003fb4

08008e74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d106      	bne.n	8008e90 <tcp_input_delayed_close+0x1c>
 8008e82:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <tcp_input_delayed_close+0x6c>)
 8008e84:	f240 225a 	movw	r2, #602	; 0x25a
 8008e88:	4916      	ldr	r1, [pc, #88]	; (8008ee4 <tcp_input_delayed_close+0x70>)
 8008e8a:	4817      	ldr	r0, [pc, #92]	; (8008ee8 <tcp_input_delayed_close+0x74>)
 8008e8c:	f009 f8bc 	bl	8012008 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008e90:	4b16      	ldr	r3, [pc, #88]	; (8008eec <tcp_input_delayed_close+0x78>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01c      	beq.n	8008ed6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8b5b      	ldrh	r3, [r3, #26]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10d      	bne.n	8008ec4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <tcp_input_delayed_close+0x50>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6912      	ldr	r2, [r2, #16]
 8008ebc:	f06f 010e 	mvn.w	r1, #14
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	480a      	ldr	r0, [pc, #40]	; (8008ef0 <tcp_input_delayed_close+0x7c>)
 8008ec8:	f7ff fa54 	bl	8008374 <tcp_pcb_remove>
    tcp_free(pcb);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fe f84d 	bl	8006f6c <tcp_free>
    return 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	08014144 	.word	0x08014144
 8008ee4:	08014314 	.word	0x08014314
 8008ee8:	08014190 	.word	0x08014190
 8008eec:	20003e6d 	.word	0x20003e6d
 8008ef0:	200076d4 	.word	0x200076d4

08008ef4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b08b      	sub	sp, #44	; 0x2c
 8008ef8:	af04      	add	r7, sp, #16
 8008efa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008efc:	4b6f      	ldr	r3, [pc, #444]	; (80090bc <tcp_listen_input+0x1c8>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f040 80d3 	bne.w	80090b0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <tcp_listen_input+0x2a>
 8008f10:	4b6b      	ldr	r3, [pc, #428]	; (80090c0 <tcp_listen_input+0x1cc>)
 8008f12:	f240 2281 	movw	r2, #641	; 0x281
 8008f16:	496b      	ldr	r1, [pc, #428]	; (80090c4 <tcp_listen_input+0x1d0>)
 8008f18:	486b      	ldr	r0, [pc, #428]	; (80090c8 <tcp_listen_input+0x1d4>)
 8008f1a:	f009 f875 	bl	8012008 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008f1e:	4b67      	ldr	r3, [pc, #412]	; (80090bc <tcp_listen_input+0x1c8>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d019      	beq.n	8008f5e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f2a:	4b68      	ldr	r3, [pc, #416]	; (80090cc <tcp_listen_input+0x1d8>)
 8008f2c:	6819      	ldr	r1, [r3, #0]
 8008f2e:	4b68      	ldr	r3, [pc, #416]	; (80090d0 <tcp_listen_input+0x1dc>)
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	4b67      	ldr	r3, [pc, #412]	; (80090d4 <tcp_listen_input+0x1e0>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f3a:	4b67      	ldr	r3, [pc, #412]	; (80090d8 <tcp_listen_input+0x1e4>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f42:	4a65      	ldr	r2, [pc, #404]	; (80090d8 <tcp_listen_input+0x1e4>)
 8008f44:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f46:	8812      	ldrh	r2, [r2, #0]
 8008f48:	b292      	uxth	r2, r2
 8008f4a:	9202      	str	r2, [sp, #8]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	4b63      	ldr	r3, [pc, #396]	; (80090dc <tcp_listen_input+0x1e8>)
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4b63      	ldr	r3, [pc, #396]	; (80090e0 <tcp_listen_input+0x1ec>)
 8008f54:	4602      	mov	r2, r0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f002 ff90 	bl	800be7c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008f5c:	e0aa      	b.n	80090b4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8008f5e:	4b57      	ldr	r3, [pc, #348]	; (80090bc <tcp_listen_input+0x1c8>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 80a4 	beq.w	80090b4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7d5b      	ldrb	r3, [r3, #21]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff f92b 	bl	80081cc <tcp_alloc>
 8008f76:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d111      	bne.n	8008fa2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <tcp_listen_input+0xa8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6910      	ldr	r0, [r2, #16]
 8008f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f92:	2100      	movs	r1, #0
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	73bb      	strb	r3, [r7, #14]
      return;
 8008f9a:	e08c      	b.n	80090b6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008f9c:	23f0      	movs	r3, #240	; 0xf0
 8008f9e:	73bb      	strb	r3, [r7, #14]
      return;
 8008fa0:	e089      	b.n	80090b6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008fa2:	4b50      	ldr	r3, [pc, #320]	; (80090e4 <tcp_listen_input+0x1f0>)
 8008fa4:	695a      	ldr	r2, [r3, #20]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008faa:	4b4e      	ldr	r3, [pc, #312]	; (80090e4 <tcp_listen_input+0x1f0>)
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	8ada      	ldrh	r2, [r3, #22]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008fba:	4b47      	ldr	r3, [pc, #284]	; (80090d8 <tcp_listen_input+0x1e4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2203      	movs	r2, #3
 8008fca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008fcc:	4b41      	ldr	r3, [pc, #260]	; (80090d4 <tcp_listen_input+0x1e0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7ff fa5c 	bl	800849c <tcp_next_iss>
 8008fe4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008ffe:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <tcp_listen_input+0x1e0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	1e5a      	subs	r2, r3, #1
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	7a5b      	ldrb	r3, [r3, #9]
 800901a:	f003 030c 	and.w	r3, r3, #12
 800901e:	b2da      	uxtb	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7a1a      	ldrb	r2, [r3, #8]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800902c:	4b2e      	ldr	r3, [pc, #184]	; (80090e8 <tcp_listen_input+0x1f4>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	60da      	str	r2, [r3, #12]
 8009034:	4a2c      	ldr	r2, [pc, #176]	; (80090e8 <tcp_listen_input+0x1f4>)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	f003 f8e1 	bl	800c200 <tcp_timer_needed>
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <tcp_listen_input+0x1f8>)
 8009040:	2201      	movs	r2, #1
 8009042:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009044:	6978      	ldr	r0, [r7, #20]
 8009046:	f001 fd8f 	bl	800ab68 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800904a:	4b23      	ldr	r3, [pc, #140]	; (80090d8 <tcp_listen_input+0x1e4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	89db      	ldrh	r3, [r3, #14]
 8009050:	b29a      	uxth	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	3304      	adds	r3, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f006 fe2f 	bl	800fcd0 <ip4_route>
 8009072:	4601      	mov	r1, r0
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3304      	adds	r3, #4
 8009078:	461a      	mov	r2, r3
 800907a:	4620      	mov	r0, r4
 800907c:	f7ff fa34 	bl	80084e8 <tcp_eff_send_mss_netif>
 8009080:	4603      	mov	r3, r0
 8009082:	461a      	mov	r2, r3
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009088:	2112      	movs	r1, #18
 800908a:	6978      	ldr	r0, [r7, #20]
 800908c:	f002 f842 	bl	800b114 <tcp_enqueue_flags>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d004      	beq.n	80090a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800909c:	2100      	movs	r1, #0
 800909e:	6978      	ldr	r0, [r7, #20]
 80090a0:	f7fe f986 	bl	80073b0 <tcp_abandon>
      return;
 80090a4:	e007      	b.n	80090b6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80090a6:	6978      	ldr	r0, [r7, #20]
 80090a8:	f002 f922 	bl	800b2f0 <tcp_output>
  return;
 80090ac:	bf00      	nop
 80090ae:	e001      	b.n	80090b4 <tcp_listen_input+0x1c0>
    return;
 80090b0:	bf00      	nop
 80090b2:	e000      	b.n	80090b6 <tcp_listen_input+0x1c2>
  return;
 80090b4:	bf00      	nop
}
 80090b6:	371c      	adds	r7, #28
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd90      	pop	{r4, r7, pc}
 80090bc:	20003e6c 	.word	0x20003e6c
 80090c0:	08014144 	.word	0x08014144
 80090c4:	0801433c 	.word	0x0801433c
 80090c8:	08014190 	.word	0x08014190
 80090cc:	20003e64 	.word	0x20003e64
 80090d0:	20003e6a 	.word	0x20003e6a
 80090d4:	20003e60 	.word	0x20003e60
 80090d8:	20003e50 	.word	0x20003e50
 80090dc:	20003fb0 	.word	0x20003fb0
 80090e0:	20003fb4 	.word	0x20003fb4
 80090e4:	20003fa0 	.word	0x20003fa0
 80090e8:	200076d4 	.word	0x200076d4
 80090ec:	200076d0 	.word	0x200076d0

080090f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af04      	add	r7, sp, #16
 80090f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80090f8:	4b30      	ldr	r3, [pc, #192]	; (80091bc <tcp_timewait_input+0xcc>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d154      	bne.n	80091ae <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <tcp_timewait_input+0x28>
 800910a:	4b2d      	ldr	r3, [pc, #180]	; (80091c0 <tcp_timewait_input+0xd0>)
 800910c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009110:	492c      	ldr	r1, [pc, #176]	; (80091c4 <tcp_timewait_input+0xd4>)
 8009112:	482d      	ldr	r0, [pc, #180]	; (80091c8 <tcp_timewait_input+0xd8>)
 8009114:	f008 ff78 	bl	8012008 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009118:	4b28      	ldr	r3, [pc, #160]	; (80091bc <tcp_timewait_input+0xcc>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d02a      	beq.n	800917a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009124:	4b29      	ldr	r3, [pc, #164]	; (80091cc <tcp_timewait_input+0xdc>)
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	db2d      	blt.n	800918e <tcp_timewait_input+0x9e>
 8009132:	4b26      	ldr	r3, [pc, #152]	; (80091cc <tcp_timewait_input+0xdc>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800913e:	440b      	add	r3, r1
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	dc23      	bgt.n	800918e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009146:	4b22      	ldr	r3, [pc, #136]	; (80091d0 <tcp_timewait_input+0xe0>)
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	4b22      	ldr	r3, [pc, #136]	; (80091d4 <tcp_timewait_input+0xe4>)
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <tcp_timewait_input+0xdc>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009156:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <tcp_timewait_input+0xe8>)
 8009158:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <tcp_timewait_input+0xe8>)
 8009160:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009162:	8812      	ldrh	r2, [r2, #0]
 8009164:	b292      	uxth	r2, r2
 8009166:	9202      	str	r2, [sp, #8]
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <tcp_timewait_input+0xec>)
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <tcp_timewait_input+0xf0>)
 8009170:	4602      	mov	r2, r0
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f002 fe82 	bl	800be7c <tcp_rst>
      return;
 8009178:	e01c      	b.n	80091b4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800917a:	4b10      	ldr	r3, [pc, #64]	; (80091bc <tcp_timewait_input+0xcc>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009186:	4b17      	ldr	r3, [pc, #92]	; (80091e4 <tcp_timewait_input+0xf4>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800918e:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <tcp_timewait_input+0xe4>)
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8b5b      	ldrh	r3, [r3, #26]
 800919a:	f043 0302 	orr.w	r3, r3, #2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 f8a3 	bl	800b2f0 <tcp_output>
  }
  return;
 80091aa:	bf00      	nop
 80091ac:	e001      	b.n	80091b2 <tcp_timewait_input+0xc2>
    return;
 80091ae:	bf00      	nop
 80091b0:	e000      	b.n	80091b4 <tcp_timewait_input+0xc4>
  return;
 80091b2:	bf00      	nop
}
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20003e6c 	.word	0x20003e6c
 80091c0:	08014144 	.word	0x08014144
 80091c4:	0801435c 	.word	0x0801435c
 80091c8:	08014190 	.word	0x08014190
 80091cc:	20003e60 	.word	0x20003e60
 80091d0:	20003e64 	.word	0x20003e64
 80091d4:	20003e6a 	.word	0x20003e6a
 80091d8:	20003e50 	.word	0x20003e50
 80091dc:	20003fb0 	.word	0x20003fb0
 80091e0:	20003fb4 	.word	0x20003fb4
 80091e4:	200076d8 	.word	0x200076d8

080091e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80091e8:	b590      	push	{r4, r7, lr}
 80091ea:	b08d      	sub	sp, #52	; 0x34
 80091ec:	af04      	add	r7, sp, #16
 80091ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <tcp_process+0x24>
 80091fe:	4ba5      	ldr	r3, [pc, #660]	; (8009494 <tcp_process+0x2ac>)
 8009200:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009204:	49a4      	ldr	r1, [pc, #656]	; (8009498 <tcp_process+0x2b0>)
 8009206:	48a5      	ldr	r0, [pc, #660]	; (800949c <tcp_process+0x2b4>)
 8009208:	f008 fefe 	bl	8012008 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800920c:	4ba4      	ldr	r3, [pc, #656]	; (80094a0 <tcp_process+0x2b8>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d04e      	beq.n	80092b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7d1b      	ldrb	r3, [r3, #20]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d108      	bne.n	8009232 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009224:	4b9f      	ldr	r3, [pc, #636]	; (80094a4 <tcp_process+0x2bc>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d123      	bne.n	8009274 <tcp_process+0x8c>
        acceptable = 1;
 800922c:	2301      	movs	r3, #1
 800922e:	76fb      	strb	r3, [r7, #27]
 8009230:	e020      	b.n	8009274 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009236:	4b9c      	ldr	r3, [pc, #624]	; (80094a8 <tcp_process+0x2c0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d102      	bne.n	8009244 <tcp_process+0x5c>
        acceptable = 1;
 800923e:	2301      	movs	r3, #1
 8009240:	76fb      	strb	r3, [r7, #27]
 8009242:	e017      	b.n	8009274 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009244:	4b98      	ldr	r3, [pc, #608]	; (80094a8 <tcp_process+0x2c0>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	db10      	blt.n	8009274 <tcp_process+0x8c>
 8009252:	4b95      	ldr	r3, [pc, #596]	; (80094a8 <tcp_process+0x2c0>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800925e:	440b      	add	r3, r1
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	dc06      	bgt.n	8009274 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	8b5b      	ldrh	r3, [r3, #26]
 800926a:	f043 0302 	orr.w	r3, r3, #2
 800926e:	b29a      	uxth	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009274:	7efb      	ldrb	r3, [r7, #27]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d01b      	beq.n	80092b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7d1b      	ldrb	r3, [r3, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <tcp_process+0xa8>
 8009282:	4b84      	ldr	r3, [pc, #528]	; (8009494 <tcp_process+0x2ac>)
 8009284:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009288:	4988      	ldr	r1, [pc, #544]	; (80094ac <tcp_process+0x2c4>)
 800928a:	4884      	ldr	r0, [pc, #528]	; (800949c <tcp_process+0x2b4>)
 800928c:	f008 febc 	bl	8012008 <iprintf>
      recv_flags |= TF_RESET;
 8009290:	4b87      	ldr	r3, [pc, #540]	; (80094b0 <tcp_process+0x2c8>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f043 0308 	orr.w	r3, r3, #8
 8009298:	b2da      	uxtb	r2, r3
 800929a:	4b85      	ldr	r3, [pc, #532]	; (80094b0 <tcp_process+0x2c8>)
 800929c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	8b5b      	ldrh	r3, [r3, #26]
 80092a2:	f023 0301 	bic.w	r3, r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80092ac:	f06f 030d 	mvn.w	r3, #13
 80092b0:	e37a      	b.n	80099a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e378      	b.n	80099a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80092b6:	4b7a      	ldr	r3, [pc, #488]	; (80094a0 <tcp_process+0x2b8>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d010      	beq.n	80092e4 <tcp_process+0xfc>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7d1b      	ldrb	r3, [r3, #20]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d00c      	beq.n	80092e4 <tcp_process+0xfc>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	7d1b      	ldrb	r3, [r3, #20]
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d008      	beq.n	80092e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	8b5b      	ldrh	r3, [r3, #26]
 80092d6:	f043 0302 	orr.w	r3, r3, #2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e361      	b.n	80099a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8b5b      	ldrh	r3, [r3, #26]
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d103      	bne.n	80092f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80092f0:	4b70      	ldr	r3, [pc, #448]	; (80094b4 <tcp_process+0x2cc>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fc2d 	bl	800ab68 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7d1b      	ldrb	r3, [r3, #20]
 8009312:	3b02      	subs	r3, #2
 8009314:	2b07      	cmp	r3, #7
 8009316:	f200 8337 	bhi.w	8009988 <tcp_process+0x7a0>
 800931a:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <tcp_process+0x138>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009341 	.word	0x08009341
 8009324:	08009571 	.word	0x08009571
 8009328:	080096e9 	.word	0x080096e9
 800932c:	08009713 	.word	0x08009713
 8009330:	08009837 	.word	0x08009837
 8009334:	080096e9 	.word	0x080096e9
 8009338:	080098c3 	.word	0x080098c3
 800933c:	08009953 	.word	0x08009953
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009340:	4b57      	ldr	r3, [pc, #348]	; (80094a0 <tcp_process+0x2b8>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80e4 	beq.w	8009516 <tcp_process+0x32e>
 800934e:	4b54      	ldr	r3, [pc, #336]	; (80094a0 <tcp_process+0x2b8>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80dd 	beq.w	8009516 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	4b50      	ldr	r3, [pc, #320]	; (80094a4 <tcp_process+0x2bc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	f040 80d5 	bne.w	8009516 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800936c:	4b4e      	ldr	r3, [pc, #312]	; (80094a8 <tcp_process+0x2c0>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800937e:	4b49      	ldr	r3, [pc, #292]	; (80094a4 <tcp_process+0x2bc>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009386:	4b4c      	ldr	r3, [pc, #304]	; (80094b8 <tcp_process+0x2d0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	89db      	ldrh	r3, [r3, #14]
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80093a0:	4b41      	ldr	r3, [pc, #260]	; (80094a8 <tcp_process+0x2c0>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	1e5a      	subs	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2204      	movs	r2, #4
 80093ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f006 fc89 	bl	800fcd0 <ip4_route>
 80093be:	4601      	mov	r1, r0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3304      	adds	r3, #4
 80093c4:	461a      	mov	r2, r3
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7ff f88e 	bl	80084e8 <tcp_eff_send_mss_netif>
 80093cc:	4603      	mov	r3, r0
 80093ce:	461a      	mov	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093d8:	009a      	lsls	r2, r3, #2
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80093e4:	428b      	cmp	r3, r1
 80093e6:	bf38      	it	cc
 80093e8:	460b      	movcc	r3, r1
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d204      	bcs.n	80093f8 <tcp_process+0x210>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	e00d      	b.n	8009414 <tcp_process+0x22c>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8009402:	4293      	cmp	r3, r2
 8009404:	d904      	bls.n	8009410 <tcp_process+0x228>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	b29b      	uxth	r3, r3
 800940e:	e001      	b.n	8009414 <tcp_process+0x22c>
 8009410:	f241 131c 	movw	r3, #4380	; 0x111c
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <tcp_process+0x24a>
 8009424:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <tcp_process+0x2ac>)
 8009426:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800942a:	4924      	ldr	r1, [pc, #144]	; (80094bc <tcp_process+0x2d4>)
 800942c:	481b      	ldr	r0, [pc, #108]	; (800949c <tcp_process+0x2b4>)
 800942e:	f008 fdeb 	bl	8012008 <iprintf>
        --pcb->snd_queuelen;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009438:	3b01      	subs	r3, #1
 800943a:	b29a      	uxth	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009446:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d111      	bne.n	8009472 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009452:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <tcp_process+0x280>
 800945a:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <tcp_process+0x2ac>)
 800945c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009460:	4917      	ldr	r1, [pc, #92]	; (80094c0 <tcp_process+0x2d8>)
 8009462:	480e      	ldr	r0, [pc, #56]	; (800949c <tcp_process+0x2b4>)
 8009464:	f008 fdd0 	bl	8012008 <iprintf>
          pcb->unsent = rseg->next;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009470:	e003      	b.n	800947a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800947a:	69f8      	ldr	r0, [r7, #28]
 800947c:	f7fe fd3e 	bl	8007efc <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009484:	2b00      	cmp	r3, #0
 8009486:	d11d      	bne.n	80094c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800948e:	861a      	strh	r2, [r3, #48]	; 0x30
 8009490:	e01f      	b.n	80094d2 <tcp_process+0x2ea>
 8009492:	bf00      	nop
 8009494:	08014144 	.word	0x08014144
 8009498:	0801437c 	.word	0x0801437c
 800949c:	08014190 	.word	0x08014190
 80094a0:	20003e6c 	.word	0x20003e6c
 80094a4:	20003e64 	.word	0x20003e64
 80094a8:	20003e60 	.word	0x20003e60
 80094ac:	08014398 	.word	0x08014398
 80094b0:	20003e6d 	.word	0x20003e6d
 80094b4:	200076d8 	.word	0x200076d8
 80094b8:	20003e50 	.word	0x20003e50
 80094bc:	080143b8 	.word	0x080143b8
 80094c0:	080143d0 	.word	0x080143d0
        } else {
          pcb->rtime = 0;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00a      	beq.n	80094f2 <tcp_process+0x30a>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6910      	ldr	r0, [r2, #16]
 80094e6:	2200      	movs	r2, #0
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4798      	blx	r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	76bb      	strb	r3, [r7, #26]
 80094f0:	e001      	b.n	80094f6 <tcp_process+0x30e>
 80094f2:	2300      	movs	r3, #0
 80094f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80094f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80094fa:	f113 0f0d 	cmn.w	r3, #13
 80094fe:	d102      	bne.n	8009506 <tcp_process+0x31e>
          return ERR_ABRT;
 8009500:	f06f 030c 	mvn.w	r3, #12
 8009504:	e250      	b.n	80099a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	8b5b      	ldrh	r3, [r3, #26]
 800950a:	f043 0302 	orr.w	r3, r3, #2
 800950e:	b29a      	uxth	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009514:	e23a      	b.n	800998c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009516:	4b9d      	ldr	r3, [pc, #628]	; (800978c <tcp_process+0x5a4>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 8234 	beq.w	800998c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009524:	4b9a      	ldr	r3, [pc, #616]	; (8009790 <tcp_process+0x5a8>)
 8009526:	6819      	ldr	r1, [r3, #0]
 8009528:	4b9a      	ldr	r3, [pc, #616]	; (8009794 <tcp_process+0x5ac>)
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	4b9a      	ldr	r3, [pc, #616]	; (8009798 <tcp_process+0x5b0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009534:	4b99      	ldr	r3, [pc, #612]	; (800979c <tcp_process+0x5b4>)
 8009536:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800953c:	4a97      	ldr	r2, [pc, #604]	; (800979c <tcp_process+0x5b4>)
 800953e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009540:	8812      	ldrh	r2, [r2, #0]
 8009542:	b292      	uxth	r2, r2
 8009544:	9202      	str	r2, [sp, #8]
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	4b95      	ldr	r3, [pc, #596]	; (80097a0 <tcp_process+0x5b8>)
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	4b95      	ldr	r3, [pc, #596]	; (80097a4 <tcp_process+0x5bc>)
 800954e:	4602      	mov	r2, r0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f002 fc93 	bl	800be7c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800955c:	2b05      	cmp	r3, #5
 800955e:	f200 8215 	bhi.w	800998c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 fa51 	bl	800ba10 <tcp_rexmit_rto>
      break;
 800956e:	e20d      	b.n	800998c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009570:	4b86      	ldr	r3, [pc, #536]	; (800978c <tcp_process+0x5a4>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f003 0310 	and.w	r3, r3, #16
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 80a1 	beq.w	80096c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800957e:	4b84      	ldr	r3, [pc, #528]	; (8009790 <tcp_process+0x5a8>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	3b01      	subs	r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	db7e      	blt.n	800968c <tcp_process+0x4a4>
 800958e:	4b80      	ldr	r3, [pc, #512]	; (8009790 <tcp_process+0x5a8>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	dc77      	bgt.n	800968c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2204      	movs	r2, #4
 80095a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80095aa:	23fa      	movs	r3, #250	; 0xfa
 80095ac:	76bb      	strb	r3, [r7, #26]
 80095ae:	e01d      	b.n	80095ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <tcp_process+0x3e0>
 80095ba:	4b7b      	ldr	r3, [pc, #492]	; (80097a8 <tcp_process+0x5c0>)
 80095bc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80095c0:	497a      	ldr	r1, [pc, #488]	; (80097ac <tcp_process+0x5c4>)
 80095c2:	487b      	ldr	r0, [pc, #492]	; (80097b0 <tcp_process+0x5c8>)
 80095c4:	f008 fd20 	bl	8012008 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <tcp_process+0x400>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6910      	ldr	r0, [r2, #16]
 80095dc:	2200      	movs	r2, #0
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	4798      	blx	r3
 80095e2:	4603      	mov	r3, r0
 80095e4:	76bb      	strb	r3, [r7, #26]
 80095e6:	e001      	b.n	80095ec <tcp_process+0x404>
 80095e8:	23f0      	movs	r3, #240	; 0xf0
 80095ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80095ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00a      	beq.n	800960a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80095f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80095f8:	f113 0f0d 	cmn.w	r3, #13
 80095fc:	d002      	beq.n	8009604 <tcp_process+0x41c>
              tcp_abort(pcb);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7fd ff94 	bl	800752c <tcp_abort>
            }
            return ERR_ABRT;
 8009604:	f06f 030c 	mvn.w	r3, #12
 8009608:	e1ce      	b.n	80099a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fae0 	bl	8009bd0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009610:	4b68      	ldr	r3, [pc, #416]	; (80097b4 <tcp_process+0x5cc>)
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <tcp_process+0x43c>
            recv_acked--;
 8009618:	4b66      	ldr	r3, [pc, #408]	; (80097b4 <tcp_process+0x5cc>)
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	4b64      	ldr	r3, [pc, #400]	; (80097b4 <tcp_process+0x5cc>)
 8009622:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009628:	009a      	lsls	r2, r3, #2
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	f241 111c 	movw	r1, #4380	; 0x111c
 8009634:	428b      	cmp	r3, r1
 8009636:	bf38      	it	cc
 8009638:	460b      	movcc	r3, r1
 800963a:	429a      	cmp	r2, r3
 800963c:	d204      	bcs.n	8009648 <tcp_process+0x460>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	b29b      	uxth	r3, r3
 8009646:	e00d      	b.n	8009664 <tcp_process+0x47c>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009652:	4293      	cmp	r3, r2
 8009654:	d904      	bls.n	8009660 <tcp_process+0x478>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	b29b      	uxth	r3, r3
 800965e:	e001      	b.n	8009664 <tcp_process+0x47c>
 8009660:	f241 131c 	movw	r3, #4380	; 0x111c
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800966a:	4b53      	ldr	r3, [pc, #332]	; (80097b8 <tcp_process+0x5d0>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d037      	beq.n	80096e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	8b5b      	ldrh	r3, [r3, #26]
 800967a:	f043 0302 	orr.w	r3, r3, #2
 800967e:	b29a      	uxth	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2207      	movs	r2, #7
 8009688:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800968a:	e02c      	b.n	80096e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800968c:	4b40      	ldr	r3, [pc, #256]	; (8009790 <tcp_process+0x5a8>)
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	4b40      	ldr	r3, [pc, #256]	; (8009794 <tcp_process+0x5ac>)
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	4b40      	ldr	r3, [pc, #256]	; (8009798 <tcp_process+0x5b0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800969c:	4b3f      	ldr	r3, [pc, #252]	; (800979c <tcp_process+0x5b4>)
 800969e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096a0:	885b      	ldrh	r3, [r3, #2]
 80096a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096a4:	4a3d      	ldr	r2, [pc, #244]	; (800979c <tcp_process+0x5b4>)
 80096a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096a8:	8812      	ldrh	r2, [r2, #0]
 80096aa:	b292      	uxth	r2, r2
 80096ac:	9202      	str	r2, [sp, #8]
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	4b3b      	ldr	r3, [pc, #236]	; (80097a0 <tcp_process+0x5b8>)
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	4b3b      	ldr	r3, [pc, #236]	; (80097a4 <tcp_process+0x5bc>)
 80096b6:	4602      	mov	r2, r0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 fbdf 	bl	800be7c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80096be:	e167      	b.n	8009990 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80096c0:	4b32      	ldr	r3, [pc, #200]	; (800978c <tcp_process+0x5a4>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 8161 	beq.w	8009990 <tcp_process+0x7a8>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	1e5a      	subs	r2, r3, #1
 80096d4:	4b30      	ldr	r3, [pc, #192]	; (8009798 <tcp_process+0x5b0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	f040 8159 	bne.w	8009990 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f002 f9b8 	bl	800ba54 <tcp_rexmit>
      break;
 80096e4:	e154      	b.n	8009990 <tcp_process+0x7a8>
 80096e6:	e153      	b.n	8009990 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa71 	bl	8009bd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80096ee:	4b32      	ldr	r3, [pc, #200]	; (80097b8 <tcp_process+0x5d0>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 814c 	beq.w	8009994 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8b5b      	ldrh	r3, [r3, #26]
 8009700:	f043 0302 	orr.w	r3, r3, #2
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2207      	movs	r2, #7
 800970e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009710:	e140      	b.n	8009994 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa5c 	bl	8009bd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009718:	4b27      	ldr	r3, [pc, #156]	; (80097b8 <tcp_process+0x5d0>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f003 0320 	and.w	r3, r3, #32
 8009720:	2b00      	cmp	r3, #0
 8009722:	d071      	beq.n	8009808 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009724:	4b19      	ldr	r3, [pc, #100]	; (800978c <tcp_process+0x5a4>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 0310 	and.w	r3, r3, #16
 800972c:	2b00      	cmp	r3, #0
 800972e:	d060      	beq.n	80097f2 <tcp_process+0x60a>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <tcp_process+0x5a8>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	429a      	cmp	r2, r3
 800973a:	d15a      	bne.n	80097f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009740:	2b00      	cmp	r3, #0
 8009742:	d156      	bne.n	80097f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	8b5b      	ldrh	r3, [r3, #26]
 8009748:	f043 0302 	orr.w	r3, r3, #2
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7fe fdbe 	bl	80082d4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009758:	4b18      	ldr	r3, [pc, #96]	; (80097bc <tcp_process+0x5d4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d105      	bne.n	800976e <tcp_process+0x586>
 8009762:	4b16      	ldr	r3, [pc, #88]	; (80097bc <tcp_process+0x5d4>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	4a14      	ldr	r2, [pc, #80]	; (80097bc <tcp_process+0x5d4>)
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	e02e      	b.n	80097cc <tcp_process+0x5e4>
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <tcp_process+0x5d4>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e027      	b.n	80097c6 <tcp_process+0x5de>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d11f      	bne.n	80097c0 <tcp_process+0x5d8>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	60da      	str	r2, [r3, #12]
 8009788:	e020      	b.n	80097cc <tcp_process+0x5e4>
 800978a:	bf00      	nop
 800978c:	20003e6c 	.word	0x20003e6c
 8009790:	20003e64 	.word	0x20003e64
 8009794:	20003e6a 	.word	0x20003e6a
 8009798:	20003e60 	.word	0x20003e60
 800979c:	20003e50 	.word	0x20003e50
 80097a0:	20003fb0 	.word	0x20003fb0
 80097a4:	20003fb4 	.word	0x20003fb4
 80097a8:	08014144 	.word	0x08014144
 80097ac:	080143e4 	.word	0x080143e4
 80097b0:	08014190 	.word	0x08014190
 80097b4:	20003e68 	.word	0x20003e68
 80097b8:	20003e6d 	.word	0x20003e6d
 80097bc:	200076d4 	.word	0x200076d4
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1d4      	bne.n	8009776 <tcp_process+0x58e>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	4b77      	ldr	r3, [pc, #476]	; (80099b0 <tcp_process+0x7c8>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	220a      	movs	r2, #10
 80097dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80097de:	4b75      	ldr	r3, [pc, #468]	; (80099b4 <tcp_process+0x7cc>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	4a73      	ldr	r2, [pc, #460]	; (80099b4 <tcp_process+0x7cc>)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	f002 fd08 	bl	800c200 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80097f0:	e0d2      	b.n	8009998 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	8b5b      	ldrh	r3, [r3, #26]
 80097f6:	f043 0302 	orr.w	r3, r3, #2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2208      	movs	r2, #8
 8009804:	751a      	strb	r2, [r3, #20]
      break;
 8009806:	e0c7      	b.n	8009998 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009808:	4b6b      	ldr	r3, [pc, #428]	; (80099b8 <tcp_process+0x7d0>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80c1 	beq.w	8009998 <tcp_process+0x7b0>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800981a:	4b68      	ldr	r3, [pc, #416]	; (80099bc <tcp_process+0x7d4>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	f040 80ba 	bne.w	8009998 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009828:	2b00      	cmp	r3, #0
 800982a:	f040 80b5 	bne.w	8009998 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2206      	movs	r2, #6
 8009832:	751a      	strb	r2, [r3, #20]
      break;
 8009834:	e0b0      	b.n	8009998 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f9ca 	bl	8009bd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800983c:	4b60      	ldr	r3, [pc, #384]	; (80099c0 <tcp_process+0x7d8>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80a9 	beq.w	800999c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8b5b      	ldrh	r3, [r3, #26]
 800984e:	f043 0302 	orr.w	r3, r3, #2
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fe fd3b 	bl	80082d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800985e:	4b59      	ldr	r3, [pc, #356]	; (80099c4 <tcp_process+0x7dc>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d105      	bne.n	8009874 <tcp_process+0x68c>
 8009868:	4b56      	ldr	r3, [pc, #344]	; (80099c4 <tcp_process+0x7dc>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4a55      	ldr	r2, [pc, #340]	; (80099c4 <tcp_process+0x7dc>)
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	e013      	b.n	800989c <tcp_process+0x6b4>
 8009874:	4b53      	ldr	r3, [pc, #332]	; (80099c4 <tcp_process+0x7dc>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	e00c      	b.n	8009896 <tcp_process+0x6ae>
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d104      	bne.n	8009890 <tcp_process+0x6a8>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	60da      	str	r2, [r3, #12]
 800988e:	e005      	b.n	800989c <tcp_process+0x6b4>
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	613b      	str	r3, [r7, #16]
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1ef      	bne.n	800987c <tcp_process+0x694>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	60da      	str	r2, [r3, #12]
 80098a2:	4b43      	ldr	r3, [pc, #268]	; (80099b0 <tcp_process+0x7c8>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	220a      	movs	r2, #10
 80098ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80098ae:	4b41      	ldr	r3, [pc, #260]	; (80099b4 <tcp_process+0x7cc>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	4a3f      	ldr	r2, [pc, #252]	; (80099b4 <tcp_process+0x7cc>)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6013      	str	r3, [r2, #0]
 80098bc:	f002 fca0 	bl	800c200 <tcp_timer_needed>
      }
      break;
 80098c0:	e06c      	b.n	800999c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f984 	bl	8009bd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80098c8:	4b3b      	ldr	r3, [pc, #236]	; (80099b8 <tcp_process+0x7d0>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d065      	beq.n	80099a0 <tcp_process+0x7b8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098d8:	4b38      	ldr	r3, [pc, #224]	; (80099bc <tcp_process+0x7d4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d15f      	bne.n	80099a0 <tcp_process+0x7b8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d15b      	bne.n	80099a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fe fcf3 	bl	80082d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80098ee:	4b35      	ldr	r3, [pc, #212]	; (80099c4 <tcp_process+0x7dc>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d105      	bne.n	8009904 <tcp_process+0x71c>
 80098f8:	4b32      	ldr	r3, [pc, #200]	; (80099c4 <tcp_process+0x7dc>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	4a31      	ldr	r2, [pc, #196]	; (80099c4 <tcp_process+0x7dc>)
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	e013      	b.n	800992c <tcp_process+0x744>
 8009904:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <tcp_process+0x7dc>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	e00c      	b.n	8009926 <tcp_process+0x73e>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d104      	bne.n	8009920 <tcp_process+0x738>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	e005      	b.n	800992c <tcp_process+0x744>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1ef      	bne.n	800990c <tcp_process+0x724>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	60da      	str	r2, [r3, #12]
 8009932:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <tcp_process+0x7c8>)
 8009934:	2201      	movs	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	220a      	movs	r2, #10
 800993c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800993e:	4b1d      	ldr	r3, [pc, #116]	; (80099b4 <tcp_process+0x7cc>)
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60da      	str	r2, [r3, #12]
 8009946:	4a1b      	ldr	r2, [pc, #108]	; (80099b4 <tcp_process+0x7cc>)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	f002 fc58 	bl	800c200 <tcp_timer_needed>
      }
      break;
 8009950:	e026      	b.n	80099a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f93c 	bl	8009bd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009958:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <tcp_process+0x7d0>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01f      	beq.n	80099a4 <tcp_process+0x7bc>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009968:	4b14      	ldr	r3, [pc, #80]	; (80099bc <tcp_process+0x7d4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	429a      	cmp	r2, r3
 800996e:	d119      	bne.n	80099a4 <tcp_process+0x7bc>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d115      	bne.n	80099a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009978:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <tcp_process+0x7d8>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	f043 0310 	orr.w	r3, r3, #16
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4b0f      	ldr	r3, [pc, #60]	; (80099c0 <tcp_process+0x7d8>)
 8009984:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009986:	e00d      	b.n	80099a4 <tcp_process+0x7bc>
    default:
      break;
 8009988:	bf00      	nop
 800998a:	e00c      	b.n	80099a6 <tcp_process+0x7be>
      break;
 800998c:	bf00      	nop
 800998e:	e00a      	b.n	80099a6 <tcp_process+0x7be>
      break;
 8009990:	bf00      	nop
 8009992:	e008      	b.n	80099a6 <tcp_process+0x7be>
      break;
 8009994:	bf00      	nop
 8009996:	e006      	b.n	80099a6 <tcp_process+0x7be>
      break;
 8009998:	bf00      	nop
 800999a:	e004      	b.n	80099a6 <tcp_process+0x7be>
      break;
 800999c:	bf00      	nop
 800999e:	e002      	b.n	80099a6 <tcp_process+0x7be>
      break;
 80099a0:	bf00      	nop
 80099a2:	e000      	b.n	80099a6 <tcp_process+0x7be>
      break;
 80099a4:	bf00      	nop
  }
  return ERR_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3724      	adds	r7, #36	; 0x24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd90      	pop	{r4, r7, pc}
 80099b0:	200076d0 	.word	0x200076d0
 80099b4:	200076e4 	.word	0x200076e4
 80099b8:	20003e6c 	.word	0x20003e6c
 80099bc:	20003e64 	.word	0x20003e64
 80099c0:	20003e6d 	.word	0x20003e6d
 80099c4:	200076d4 	.word	0x200076d4

080099c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d106      	bne.n	80099e6 <tcp_oos_insert_segment+0x1e>
 80099d8:	4b3b      	ldr	r3, [pc, #236]	; (8009ac8 <tcp_oos_insert_segment+0x100>)
 80099da:	f240 421f 	movw	r2, #1055	; 0x41f
 80099de:	493b      	ldr	r1, [pc, #236]	; (8009acc <tcp_oos_insert_segment+0x104>)
 80099e0:	483b      	ldr	r0, [pc, #236]	; (8009ad0 <tcp_oos_insert_segment+0x108>)
 80099e2:	f008 fb11 	bl	8012008 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	899b      	ldrh	r3, [r3, #12]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fb fcca 	bl	8005388 <lwip_htons>
 80099f4:	4603      	mov	r3, r0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d028      	beq.n	8009a52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009a00:	6838      	ldr	r0, [r7, #0]
 8009a02:	f7fe fa67 	bl	8007ed4 <tcp_segs_free>
    next = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	e056      	b.n	8009aba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fb fcb7 	bl	8005388 <lwip_htons>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	899b      	ldrh	r3, [r3, #12]
 8009a2c:	b29c      	uxth	r4, r3
 8009a2e:	2001      	movs	r0, #1
 8009a30:	f7fb fcaa 	bl	8005388 <lwip_htons>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	4322      	orrs	r2, r4
 8009a3e:	b292      	uxth	r2, r2
 8009a40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7fe fa55 	bl	8007efc <tcp_seg_free>
    while (next &&
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00e      	beq.n	8009a76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	891b      	ldrh	r3, [r3, #8]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ad4 <tcp_oos_insert_segment+0x10c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	441a      	add	r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	8909      	ldrh	r1, [r1, #8]
 8009a6e:	440b      	add	r3, r1
 8009a70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	daca      	bge.n	8009a0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01e      	beq.n	8009aba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	891b      	ldrh	r3, [r3, #8]
 8009a80:	461a      	mov	r2, r3
 8009a82:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <tcp_oos_insert_segment+0x10c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	441a      	add	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dd12      	ble.n	8009aba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <tcp_oos_insert_segment+0x10c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	891b      	ldrh	r3, [r3, #8]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	f7fc fe17 	bl	80066e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	601a      	str	r2, [r3, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd90      	pop	{r4, r7, pc}
 8009ac8:	08014144 	.word	0x08014144
 8009acc:	08014404 	.word	0x08014404
 8009ad0:	08014190 	.word	0x08014190
 8009ad4:	20003e60 	.word	0x20003e60

08009ad8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009ad8:	b5b0      	push	{r4, r5, r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009ae6:	e03e      	b.n	8009b66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fd f80a 	bl	8006b10 <pbuf_clen>
 8009afc:	4603      	mov	r3, r0
 8009afe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b06:	8a7a      	ldrh	r2, [r7, #18]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d906      	bls.n	8009b1a <tcp_free_acked_segments+0x42>
 8009b0c:	4b2a      	ldr	r3, [pc, #168]	; (8009bb8 <tcp_free_acked_segments+0xe0>)
 8009b0e:	f240 4257 	movw	r2, #1111	; 0x457
 8009b12:	492a      	ldr	r1, [pc, #168]	; (8009bbc <tcp_free_acked_segments+0xe4>)
 8009b14:	482a      	ldr	r0, [pc, #168]	; (8009bc0 <tcp_free_acked_segments+0xe8>)
 8009b16:	f008 fa77 	bl	8012008 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009b20:	8a7b      	ldrh	r3, [r7, #18]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	891a      	ldrh	r2, [r3, #8]
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <tcp_free_acked_segments+0xec>)
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	4413      	add	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	4b22      	ldr	r3, [pc, #136]	; (8009bc4 <tcp_free_acked_segments+0xec>)
 8009b3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009b3c:	6978      	ldr	r0, [r7, #20]
 8009b3e:	f7fe f9dd 	bl	8007efc <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00c      	beq.n	8009b66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <tcp_free_acked_segments+0x8e>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <tcp_free_acked_segments+0x8e>
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <tcp_free_acked_segments+0xe0>)
 8009b5a:	f240 4262 	movw	r2, #1122	; 0x462
 8009b5e:	491a      	ldr	r1, [pc, #104]	; (8009bc8 <tcp_free_acked_segments+0xf0>)
 8009b60:	4817      	ldr	r0, [pc, #92]	; (8009bc0 <tcp_free_acked_segments+0xe8>)
 8009b62:	f008 fa51 	bl	8012008 <iprintf>
  while (seg_list != NULL &&
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d020      	beq.n	8009bae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fb fc1d 	bl	80053b2 <lwip_htonl>
 8009b78:	4604      	mov	r4, r0
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	891b      	ldrh	r3, [r3, #8]
 8009b7e:	461d      	mov	r5, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	899b      	ldrh	r3, [r3, #12]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fb fbfd 	bl	8005388 <lwip_htons>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <tcp_free_acked_segments+0xc6>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <tcp_free_acked_segments+0xc8>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	442b      	add	r3, r5
 8009ba2:	18e2      	adds	r2, r4, r3
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <tcp_free_acked_segments+0xf4>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dd9c      	ble.n	8009ae8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009bae:	68bb      	ldr	r3, [r7, #8]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb8:	08014144 	.word	0x08014144
 8009bbc:	0801442c 	.word	0x0801442c
 8009bc0:	08014190 	.word	0x08014190
 8009bc4:	20003e68 	.word	0x20003e68
 8009bc8:	08014454 	.word	0x08014454
 8009bcc:	20003e64 	.word	0x20003e64

08009bd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009bd0:	b5b0      	push	{r4, r5, r7, lr}
 8009bd2:	b094      	sub	sp, #80	; 0x50
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <tcp_receive+0x20>
 8009be2:	4ba6      	ldr	r3, [pc, #664]	; (8009e7c <tcp_receive+0x2ac>)
 8009be4:	f240 427b 	movw	r2, #1147	; 0x47b
 8009be8:	49a5      	ldr	r1, [pc, #660]	; (8009e80 <tcp_receive+0x2b0>)
 8009bea:	48a6      	ldr	r0, [pc, #664]	; (8009e84 <tcp_receive+0x2b4>)
 8009bec:	f008 fa0c 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	7d1b      	ldrb	r3, [r3, #20]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d806      	bhi.n	8009c06 <tcp_receive+0x36>
 8009bf8:	4ba0      	ldr	r3, [pc, #640]	; (8009e7c <tcp_receive+0x2ac>)
 8009bfa:	f240 427c 	movw	r2, #1148	; 0x47c
 8009bfe:	49a2      	ldr	r1, [pc, #648]	; (8009e88 <tcp_receive+0x2b8>)
 8009c00:	48a0      	ldr	r0, [pc, #640]	; (8009e84 <tcp_receive+0x2b4>)
 8009c02:	f008 fa01 	bl	8012008 <iprintf>

  if (flags & TCP_ACK) {
 8009c06:	4ba1      	ldr	r3, [pc, #644]	; (8009e8c <tcp_receive+0x2bc>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 0310 	and.w	r3, r3, #16
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 8263 	beq.w	800a0da <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c20:	4413      	add	r3, r2
 8009c22:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c28:	4b99      	ldr	r3, [pc, #612]	; (8009e90 <tcp_receive+0x2c0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	db1b      	blt.n	8009c6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c36:	4b96      	ldr	r3, [pc, #600]	; (8009e90 <tcp_receive+0x2c0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d106      	bne.n	8009c4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c42:	4b94      	ldr	r3, [pc, #592]	; (8009e94 <tcp_receive+0x2c4>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	db0e      	blt.n	8009c6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c50:	4b90      	ldr	r3, [pc, #576]	; (8009e94 <tcp_receive+0x2c4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d125      	bne.n	8009ca4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009c58:	4b8f      	ldr	r3, [pc, #572]	; (8009e98 <tcp_receive+0x2c8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	89db      	ldrh	r3, [r3, #14]
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d91c      	bls.n	8009ca4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009c6a:	4b8b      	ldr	r3, [pc, #556]	; (8009e98 <tcp_receive+0x2c8>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	89db      	ldrh	r3, [r3, #14]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d205      	bcs.n	8009c94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009c94:	4b7e      	ldr	r3, [pc, #504]	; (8009e90 <tcp_receive+0x2c0>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009c9c:	4b7d      	ldr	r3, [pc, #500]	; (8009e94 <tcp_receive+0x2c4>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ca4:	4b7b      	ldr	r3, [pc, #492]	; (8009e94 <tcp_receive+0x2c4>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	dc58      	bgt.n	8009d64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009cb2:	4b7a      	ldr	r3, [pc, #488]	; (8009e9c <tcp_receive+0x2cc>)
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d14b      	bne.n	8009d52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009cc4:	4413      	add	r3, r2
 8009cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d142      	bne.n	8009d52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	db3d      	blt.n	8009d52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cda:	4b6e      	ldr	r3, [pc, #440]	; (8009e94 <tcp_receive+0x2c4>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d137      	bne.n	8009d52 <tcp_receive+0x182>
              found_dupack = 1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cec:	2bff      	cmp	r3, #255	; 0xff
 8009cee:	d007      	beq.n	8009d00 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d91b      	bls.n	8009d42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d14:	4413      	add	r3, r2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d30a      	bcc.n	8009d38 <tcp_receive+0x168>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d2c:	4413      	add	r3, r2
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009d36:	e004      	b.n	8009d42 <tcp_receive+0x172>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d902      	bls.n	8009d52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 feed 	bl	800bb2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 8160 	bne.w	800a01a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d62:	e15a      	b.n	800a01a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d64:	4b4b      	ldr	r3, [pc, #300]	; (8009e94 <tcp_receive+0x2c4>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f2c0 814d 	blt.w	800a010 <tcp_receive+0x440>
 8009d76:	4b47      	ldr	r3, [pc, #284]	; (8009e94 <tcp_receive+0x2c4>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f300 8145 	bgt.w	800a010 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8b5b      	ldrh	r3, [r3, #26]
 8009d8a:	f003 0304 	and.w	r3, r3, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d010      	beq.n	8009db4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8b5b      	ldrh	r3, [r3, #26]
 8009d96:	f023 0304 	bic.w	r3, r3, #4
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009dc2:	10db      	asrs	r3, r3, #3
 8009dc4:	b21b      	sxth	r3, r3
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	4413      	add	r3, r2
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	b21a      	sxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009ddc:	4b2d      	ldr	r3, [pc, #180]	; (8009e94 <tcp_receive+0x2c4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009df4:	4b27      	ldr	r3, [pc, #156]	; (8009e94 <tcp_receive+0x2c4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	7d1b      	ldrb	r3, [r3, #20]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	f240 8096 	bls.w	8009f32 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d244      	bcs.n	8009ea0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	8b5b      	ldrh	r3, [r3, #26]
 8009e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <tcp_receive+0x256>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <tcp_receive+0x258>
 8009e26:	2302      	movs	r3, #2
 8009e28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009e2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e36:	fb12 f303 	smulbb	r3, r2, r3
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	bf28      	it	cs
 8009e42:	4613      	movcs	r3, r2
 8009e44:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e4e:	4413      	add	r3, r2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d309      	bcc.n	8009e70 <tcp_receive+0x2a0>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e64:	4413      	add	r3, r2
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009e6e:	e060      	b.n	8009f32 <tcp_receive+0x362>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009e7a:	e05a      	b.n	8009f32 <tcp_receive+0x362>
 8009e7c:	08014144 	.word	0x08014144
 8009e80:	08014474 	.word	0x08014474
 8009e84:	08014190 	.word	0x08014190
 8009e88:	08014490 	.word	0x08014490
 8009e8c:	20003e6c 	.word	0x20003e6c
 8009e90:	20003e60 	.word	0x20003e60
 8009e94:	20003e64 	.word	0x20003e64
 8009e98:	20003e50 	.word	0x20003e50
 8009e9c:	20003e6a 	.word	0x20003e6a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ea6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ea8:	4413      	add	r3, r2
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d309      	bcc.n	8009eca <tcp_receive+0x2fa>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ebc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ebe:	4413      	add	r3, r2
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ec8:	e004      	b.n	8009ed4 <tcp_receive+0x304>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d326      	bcc.n	8009f32 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f04:	4413      	add	r3, r2
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d30a      	bcc.n	8009f28 <tcp_receive+0x358>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f1c:	4413      	add	r3, r2
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009f26:	e004      	b.n	8009f32 <tcp_receive+0x362>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f3a:	4a98      	ldr	r2, [pc, #608]	; (800a19c <tcp_receive+0x5cc>)
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fdcb 	bl	8009ad8 <tcp_free_acked_segments>
 8009f42:	4602      	mov	r2, r0
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f50:	4a93      	ldr	r2, [pc, #588]	; (800a1a0 <tcp_receive+0x5d0>)
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff fdc0 	bl	8009ad8 <tcp_free_acked_segments>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f6c:	861a      	strh	r2, [r3, #48]	; 0x30
 8009f6e:	e002      	b.n	8009f76 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d103      	bne.n	8009f8c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009f92:	4b84      	ldr	r3, [pc, #528]	; (800a1a4 <tcp_receive+0x5d4>)
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8b5b      	ldrh	r3, [r3, #26]
 8009fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d035      	beq.n	800a018 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d118      	bne.n	8009fe6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00c      	beq.n	8009fd6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fb f9f2 	bl	80053b2 <lwip_htonl>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dc20      	bgt.n	800a018 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	8b5b      	ldrh	r3, [r3, #26]
 8009fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009fe4:	e018      	b.n	800a018 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fb f9dd 	bl	80053b2 <lwip_htonl>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	1ae3      	subs	r3, r4, r3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dc0b      	bgt.n	800a018 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	8b5b      	ldrh	r3, [r3, #26]
 800a004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a00e:	e003      	b.n	800a018 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 ff85 	bl	800bf20 <tcp_send_empty_ack>
 800a016:	e000      	b.n	800a01a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a018:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d05b      	beq.n	800a0da <tcp_receive+0x50a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a026:	4b60      	ldr	r3, [pc, #384]	; (800a1a8 <tcp_receive+0x5d8>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	da54      	bge.n	800a0da <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a030:	4b5e      	ldr	r3, [pc, #376]	; (800a1ac <tcp_receive+0x5dc>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	b29a      	uxth	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a044:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a04e:	10db      	asrs	r3, r3, #3
 800a050:	b21b      	sxth	r3, r3
 800a052:	b29b      	uxth	r3, r3
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	b29b      	uxth	r3, r3
 800a058:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a062:	b29a      	uxth	r2, r3
 800a064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a068:	4413      	add	r3, r2
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	b21a      	sxth	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a072:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a076:	2b00      	cmp	r3, #0
 800a078:	da05      	bge.n	800a086 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a07a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a07e:	425b      	negs	r3, r3
 800a080:	b29b      	uxth	r3, r3
 800a082:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a086:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a090:	109b      	asrs	r3, r3, #2
 800a092:	b21b      	sxth	r3, r3
 800a094:	b29b      	uxth	r3, r3
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0aa:	4413      	add	r3, r2
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	b21a      	sxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a0ba:	10db      	asrs	r3, r3, #3
 800a0bc:	b21b      	sxth	r3, r3
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	b21a      	sxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a0da:	4b35      	ldr	r3, [pc, #212]	; (800a1b0 <tcp_receive+0x5e0>)
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 84e1 	beq.w	800aaa6 <tcp_receive+0xed6>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7d1b      	ldrb	r3, [r3, #20]
 800a0e8:	2b06      	cmp	r3, #6
 800a0ea:	f200 84dc 	bhi.w	800aaa6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f2:	4b30      	ldr	r3, [pc, #192]	; (800a1b4 <tcp_receive+0x5e4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f2c0 808e 	blt.w	800a21c <tcp_receive+0x64c>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a104:	4b2a      	ldr	r3, [pc, #168]	; (800a1b0 <tcp_receive+0x5e0>)
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	4619      	mov	r1, r3
 800a10a:	4b2a      	ldr	r3, [pc, #168]	; (800a1b4 <tcp_receive+0x5e4>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	440b      	add	r3, r1
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	3301      	adds	r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	f300 8081 	bgt.w	800a21c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a11a:	4b27      	ldr	r3, [pc, #156]	; (800a1b8 <tcp_receive+0x5e8>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a124:	4b23      	ldr	r3, [pc, #140]	; (800a1b4 <tcp_receive+0x5e4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a12c:	4b22      	ldr	r3, [pc, #136]	; (800a1b8 <tcp_receive+0x5e8>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <tcp_receive+0x572>
 800a134:	4b21      	ldr	r3, [pc, #132]	; (800a1bc <tcp_receive+0x5ec>)
 800a136:	f240 5294 	movw	r2, #1428	; 0x594
 800a13a:	4921      	ldr	r1, [pc, #132]	; (800a1c0 <tcp_receive+0x5f0>)
 800a13c:	4821      	ldr	r0, [pc, #132]	; (800a1c4 <tcp_receive+0x5f4>)
 800a13e:	f007 ff63 	bl	8012008 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a148:	4293      	cmp	r3, r2
 800a14a:	d906      	bls.n	800a15a <tcp_receive+0x58a>
 800a14c:	4b1b      	ldr	r3, [pc, #108]	; (800a1bc <tcp_receive+0x5ec>)
 800a14e:	f240 5295 	movw	r2, #1429	; 0x595
 800a152:	491d      	ldr	r1, [pc, #116]	; (800a1c8 <tcp_receive+0x5f8>)
 800a154:	481b      	ldr	r0, [pc, #108]	; (800a1c4 <tcp_receive+0x5f4>)
 800a156:	f007 ff57 	bl	8012008 <iprintf>
      off = (u16_t)off32;
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a160:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <tcp_receive+0x5e8>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	891b      	ldrh	r3, [r3, #8]
 800a166:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d906      	bls.n	800a17c <tcp_receive+0x5ac>
 800a16e:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <tcp_receive+0x5ec>)
 800a170:	f240 5297 	movw	r2, #1431	; 0x597
 800a174:	4915      	ldr	r1, [pc, #84]	; (800a1cc <tcp_receive+0x5fc>)
 800a176:	4813      	ldr	r0, [pc, #76]	; (800a1c4 <tcp_receive+0x5f4>)
 800a178:	f007 ff46 	bl	8012008 <iprintf>
      inseg.len -= off;
 800a17c:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <tcp_receive+0x5e8>)
 800a17e:	891a      	ldrh	r2, [r3, #8]
 800a180:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	b29a      	uxth	r2, r3
 800a188:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <tcp_receive+0x5e8>)
 800a18a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a18c:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <tcp_receive+0x5e8>)
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	891a      	ldrh	r2, [r3, #8]
 800a192:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a19a:	e029      	b.n	800a1f0 <tcp_receive+0x620>
 800a19c:	080144ac 	.word	0x080144ac
 800a1a0:	080144b4 	.word	0x080144b4
 800a1a4:	20003e68 	.word	0x20003e68
 800a1a8:	20003e64 	.word	0x20003e64
 800a1ac:	200076d8 	.word	0x200076d8
 800a1b0:	20003e6a 	.word	0x20003e6a
 800a1b4:	20003e60 	.word	0x20003e60
 800a1b8:	20003e40 	.word	0x20003e40
 800a1bc:	08014144 	.word	0x08014144
 800a1c0:	080144bc 	.word	0x080144bc
 800a1c4:	08014190 	.word	0x08014190
 800a1c8:	080144cc 	.word	0x080144cc
 800a1cc:	080144dc 	.word	0x080144dc
        off -= p->len;
 800a1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d2:	895b      	ldrh	r3, [r3, #10]
 800a1d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a1e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f2:	895b      	ldrh	r3, [r3, #10]
 800a1f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d8e9      	bhi.n	800a1d0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a1fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a200:	4619      	mov	r1, r3
 800a202:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a204:	f7fc fb70 	bl	80068e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	4a91      	ldr	r2, [pc, #580]	; (800a454 <tcp_receive+0x884>)
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	4b91      	ldr	r3, [pc, #580]	; (800a458 <tcp_receive+0x888>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	4a8f      	ldr	r2, [pc, #572]	; (800a454 <tcp_receive+0x884>)
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a21a:	e00d      	b.n	800a238 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a21c:	4b8d      	ldr	r3, [pc, #564]	; (800a454 <tcp_receive+0x884>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	da06      	bge.n	800a238 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8b5b      	ldrh	r3, [r3, #26]
 800a22e:	f043 0302 	orr.w	r3, r3, #2
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a238:	4b86      	ldr	r3, [pc, #536]	; (800a454 <tcp_receive+0x884>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	f2c0 842a 	blt.w	800aa9c <tcp_receive+0xecc>
 800a248:	4b82      	ldr	r3, [pc, #520]	; (800a454 <tcp_receive+0x884>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a254:	440b      	add	r3, r1
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	3301      	adds	r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f300 841e 	bgt.w	800aa9c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a264:	4b7b      	ldr	r3, [pc, #492]	; (800a454 <tcp_receive+0x884>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	f040 829a 	bne.w	800a7a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a26e:	4b7a      	ldr	r3, [pc, #488]	; (800a458 <tcp_receive+0x888>)
 800a270:	891c      	ldrh	r4, [r3, #8]
 800a272:	4b79      	ldr	r3, [pc, #484]	; (800a458 <tcp_receive+0x888>)
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	899b      	ldrh	r3, [r3, #12]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fb f884 	bl	8005388 <lwip_htons>
 800a280:	4603      	mov	r3, r0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f003 0303 	and.w	r3, r3, #3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <tcp_receive+0x6c0>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <tcp_receive+0x6c2>
 800a290:	2300      	movs	r3, #0
 800a292:	4423      	add	r3, r4
 800a294:	b29a      	uxth	r2, r3
 800a296:	4b71      	ldr	r3, [pc, #452]	; (800a45c <tcp_receive+0x88c>)
 800a298:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a29e:	4b6f      	ldr	r3, [pc, #444]	; (800a45c <tcp_receive+0x88c>)
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d275      	bcs.n	800a392 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a2a6:	4b6c      	ldr	r3, [pc, #432]	; (800a458 <tcp_receive+0x888>)
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	899b      	ldrh	r3, [r3, #12]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fb f86a 	bl	8005388 <lwip_htons>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01f      	beq.n	800a300 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a2c0:	4b65      	ldr	r3, [pc, #404]	; (800a458 <tcp_receive+0x888>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	899b      	ldrh	r3, [r3, #12]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	b21b      	sxth	r3, r3
 800a2ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2ce:	b21c      	sxth	r4, r3
 800a2d0:	4b61      	ldr	r3, [pc, #388]	; (800a458 <tcp_receive+0x888>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	899b      	ldrh	r3, [r3, #12]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fb f855 	bl	8005388 <lwip_htons>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fb f84c 	bl	8005388 <lwip_htons>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	b21b      	sxth	r3, r3
 800a2f4:	4323      	orrs	r3, r4
 800a2f6:	b21a      	sxth	r2, r3
 800a2f8:	4b57      	ldr	r3, [pc, #348]	; (800a458 <tcp_receive+0x888>)
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	b292      	uxth	r2, r2
 800a2fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a304:	4b54      	ldr	r3, [pc, #336]	; (800a458 <tcp_receive+0x888>)
 800a306:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a308:	4b53      	ldr	r3, [pc, #332]	; (800a458 <tcp_receive+0x888>)
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	899b      	ldrh	r3, [r3, #12]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4618      	mov	r0, r3
 800a312:	f7fb f839 	bl	8005388 <lwip_htons>
 800a316:	4603      	mov	r3, r0
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <tcp_receive+0x75e>
            inseg.len -= 1;
 800a322:	4b4d      	ldr	r3, [pc, #308]	; (800a458 <tcp_receive+0x888>)
 800a324:	891b      	ldrh	r3, [r3, #8]
 800a326:	3b01      	subs	r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	4b4b      	ldr	r3, [pc, #300]	; (800a458 <tcp_receive+0x888>)
 800a32c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a32e:	4b4a      	ldr	r3, [pc, #296]	; (800a458 <tcp_receive+0x888>)
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	4b49      	ldr	r3, [pc, #292]	; (800a458 <tcp_receive+0x888>)
 800a334:	891b      	ldrh	r3, [r3, #8]
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f7fc f9d5 	bl	80066e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a33e:	4b46      	ldr	r3, [pc, #280]	; (800a458 <tcp_receive+0x888>)
 800a340:	891c      	ldrh	r4, [r3, #8]
 800a342:	4b45      	ldr	r3, [pc, #276]	; (800a458 <tcp_receive+0x888>)
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	899b      	ldrh	r3, [r3, #12]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fb f81c 	bl	8005388 <lwip_htons>
 800a350:	4603      	mov	r3, r0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <tcp_receive+0x790>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e000      	b.n	800a362 <tcp_receive+0x792>
 800a360:	2300      	movs	r3, #0
 800a362:	4423      	add	r3, r4
 800a364:	b29a      	uxth	r2, r3
 800a366:	4b3d      	ldr	r3, [pc, #244]	; (800a45c <tcp_receive+0x88c>)
 800a368:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a36a:	4b3c      	ldr	r3, [pc, #240]	; (800a45c <tcp_receive+0x88c>)
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	4b38      	ldr	r3, [pc, #224]	; (800a454 <tcp_receive+0x884>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	441a      	add	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a37e:	440b      	add	r3, r1
 800a380:	429a      	cmp	r2, r3
 800a382:	d006      	beq.n	800a392 <tcp_receive+0x7c2>
 800a384:	4b36      	ldr	r3, [pc, #216]	; (800a460 <tcp_receive+0x890>)
 800a386:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a38a:	4936      	ldr	r1, [pc, #216]	; (800a464 <tcp_receive+0x894>)
 800a38c:	4836      	ldr	r0, [pc, #216]	; (800a468 <tcp_receive+0x898>)
 800a38e:	f007 fe3b 	bl	8012008 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80e7 	beq.w	800a56a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a39c:	4b2e      	ldr	r3, [pc, #184]	; (800a458 <tcp_receive+0x888>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	899b      	ldrh	r3, [r3, #12]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fa ffef 	bl	8005388 <lwip_htons>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d010      	beq.n	800a3d8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a3b6:	e00a      	b.n	800a3ce <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3bc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7fd fd97 	bl	8007efc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1f0      	bne.n	800a3b8 <tcp_receive+0x7e8>
 800a3d6:	e0c8      	b.n	800a56a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a3de:	e052      	b.n	800a486 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	899b      	ldrh	r3, [r3, #12]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fa ffcd 	bl	8005388 <lwip_htons>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d03d      	beq.n	800a476 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a3fa:	4b17      	ldr	r3, [pc, #92]	; (800a458 <tcp_receive+0x888>)
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	899b      	ldrh	r3, [r3, #12]
 800a400:	b29b      	uxth	r3, r3
 800a402:	4618      	mov	r0, r3
 800a404:	f7fa ffc0 	bl	8005388 <lwip_htons>
 800a408:	4603      	mov	r3, r0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a410:	2b00      	cmp	r3, #0
 800a412:	d130      	bne.n	800a476 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a414:	4b10      	ldr	r3, [pc, #64]	; (800a458 <tcp_receive+0x888>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	899b      	ldrh	r3, [r3, #12]
 800a41a:	b29c      	uxth	r4, r3
 800a41c:	2001      	movs	r0, #1
 800a41e:	f7fa ffb3 	bl	8005388 <lwip_htons>
 800a422:	4603      	mov	r3, r0
 800a424:	461a      	mov	r2, r3
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <tcp_receive+0x888>)
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	4322      	orrs	r2, r4
 800a42c:	b292      	uxth	r2, r2
 800a42e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <tcp_receive+0x888>)
 800a432:	891c      	ldrh	r4, [r3, #8]
 800a434:	4b08      	ldr	r3, [pc, #32]	; (800a458 <tcp_receive+0x888>)
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	899b      	ldrh	r3, [r3, #12]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fa ffa3 	bl	8005388 <lwip_htons>
 800a442:	4603      	mov	r3, r0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00e      	beq.n	800a46c <tcp_receive+0x89c>
 800a44e:	2301      	movs	r3, #1
 800a450:	e00d      	b.n	800a46e <tcp_receive+0x89e>
 800a452:	bf00      	nop
 800a454:	20003e60 	.word	0x20003e60
 800a458:	20003e40 	.word	0x20003e40
 800a45c:	20003e6a 	.word	0x20003e6a
 800a460:	08014144 	.word	0x08014144
 800a464:	080144ec 	.word	0x080144ec
 800a468:	08014190 	.word	0x08014190
 800a46c:	2300      	movs	r3, #0
 800a46e:	4423      	add	r3, r4
 800a470:	b29a      	uxth	r2, r3
 800a472:	4b98      	ldr	r3, [pc, #608]	; (800a6d4 <tcp_receive+0xb04>)
 800a474:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a478:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a480:	6938      	ldr	r0, [r7, #16]
 800a482:	f7fd fd3b 	bl	8007efc <tcp_seg_free>
            while (next &&
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00e      	beq.n	800a4aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a48c:	4b91      	ldr	r3, [pc, #580]	; (800a6d4 <tcp_receive+0xb04>)
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	461a      	mov	r2, r3
 800a492:	4b91      	ldr	r3, [pc, #580]	; (800a6d8 <tcp_receive+0xb08>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	441a      	add	r2, r3
 800a498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4a0:	8909      	ldrh	r1, [r1, #8]
 800a4a2:	440b      	add	r3, r1
 800a4a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da9a      	bge.n	800a3e0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d059      	beq.n	800a564 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a4b0:	4b88      	ldr	r3, [pc, #544]	; (800a6d4 <tcp_receive+0xb04>)
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4b88      	ldr	r3, [pc, #544]	; (800a6d8 <tcp_receive+0xb08>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	441a      	add	r2, r3
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd4d      	ble.n	800a564 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	4b81      	ldr	r3, [pc, #516]	; (800a6d8 <tcp_receive+0xb08>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	4b80      	ldr	r3, [pc, #512]	; (800a6dc <tcp_receive+0xb0c>)
 800a4dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a4de:	4b7f      	ldr	r3, [pc, #508]	; (800a6dc <tcp_receive+0xb0c>)
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	899b      	ldrh	r3, [r3, #12]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fa ff4e 	bl	8005388 <lwip_htons>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d005      	beq.n	800a504 <tcp_receive+0x934>
                inseg.len -= 1;
 800a4f8:	4b78      	ldr	r3, [pc, #480]	; (800a6dc <tcp_receive+0xb0c>)
 800a4fa:	891b      	ldrh	r3, [r3, #8]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	4b76      	ldr	r3, [pc, #472]	; (800a6dc <tcp_receive+0xb0c>)
 800a502:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a504:	4b75      	ldr	r3, [pc, #468]	; (800a6dc <tcp_receive+0xb0c>)
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	4b74      	ldr	r3, [pc, #464]	; (800a6dc <tcp_receive+0xb0c>)
 800a50a:	891b      	ldrh	r3, [r3, #8]
 800a50c:	4619      	mov	r1, r3
 800a50e:	4610      	mov	r0, r2
 800a510:	f7fc f8ea 	bl	80066e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a514:	4b71      	ldr	r3, [pc, #452]	; (800a6dc <tcp_receive+0xb0c>)
 800a516:	891c      	ldrh	r4, [r3, #8]
 800a518:	4b70      	ldr	r3, [pc, #448]	; (800a6dc <tcp_receive+0xb0c>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	899b      	ldrh	r3, [r3, #12]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4618      	mov	r0, r3
 800a522:	f7fa ff31 	bl	8005388 <lwip_htons>
 800a526:	4603      	mov	r3, r0
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <tcp_receive+0x966>
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <tcp_receive+0x968>
 800a536:	2300      	movs	r3, #0
 800a538:	4423      	add	r3, r4
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	4b65      	ldr	r3, [pc, #404]	; (800a6d4 <tcp_receive+0xb04>)
 800a53e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a540:	4b64      	ldr	r3, [pc, #400]	; (800a6d4 <tcp_receive+0xb04>)
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	461a      	mov	r2, r3
 800a546:	4b64      	ldr	r3, [pc, #400]	; (800a6d8 <tcp_receive+0xb08>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	441a      	add	r2, r3
 800a54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	429a      	cmp	r2, r3
 800a554:	d006      	beq.n	800a564 <tcp_receive+0x994>
 800a556:	4b62      	ldr	r3, [pc, #392]	; (800a6e0 <tcp_receive+0xb10>)
 800a558:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800a55c:	4961      	ldr	r1, [pc, #388]	; (800a6e4 <tcp_receive+0xb14>)
 800a55e:	4862      	ldr	r0, [pc, #392]	; (800a6e8 <tcp_receive+0xb18>)
 800a560:	f007 fd52 	bl	8012008 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a568:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a56a:	4b5a      	ldr	r3, [pc, #360]	; (800a6d4 <tcp_receive+0xb04>)
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	4b59      	ldr	r3, [pc, #356]	; (800a6d8 <tcp_receive+0xb08>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	441a      	add	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a57e:	4b55      	ldr	r3, [pc, #340]	; (800a6d4 <tcp_receive+0xb04>)
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d206      	bcs.n	800a594 <tcp_receive+0x9c4>
 800a586:	4b56      	ldr	r3, [pc, #344]	; (800a6e0 <tcp_receive+0xb10>)
 800a588:	f240 6207 	movw	r2, #1543	; 0x607
 800a58c:	4957      	ldr	r1, [pc, #348]	; (800a6ec <tcp_receive+0xb1c>)
 800a58e:	4856      	ldr	r0, [pc, #344]	; (800a6e8 <tcp_receive+0xb18>)
 800a590:	f007 fd3a 	bl	8012008 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a598:	4b4e      	ldr	r3, [pc, #312]	; (800a6d4 <tcp_receive+0xb04>)
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7fc ffcd 	bl	8007544 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a5aa:	4b4c      	ldr	r3, [pc, #304]	; (800a6dc <tcp_receive+0xb0c>)
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	891b      	ldrh	r3, [r3, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a5b4:	4b49      	ldr	r3, [pc, #292]	; (800a6dc <tcp_receive+0xb0c>)
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4a4d      	ldr	r2, [pc, #308]	; (800a6f0 <tcp_receive+0xb20>)
 800a5ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a5bc:	4b47      	ldr	r3, [pc, #284]	; (800a6dc <tcp_receive+0xb0c>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5c2:	4b46      	ldr	r3, [pc, #280]	; (800a6dc <tcp_receive+0xb0c>)
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	899b      	ldrh	r3, [r3, #12]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fa fedc 	bl	8005388 <lwip_htons>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 80b8 	beq.w	800a74e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a5de:	4b45      	ldr	r3, [pc, #276]	; (800a6f4 <tcp_receive+0xb24>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f043 0320 	orr.w	r3, r3, #32
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	4b42      	ldr	r3, [pc, #264]	; (800a6f4 <tcp_receive+0xb24>)
 800a5ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a5ec:	e0af      	b.n	800a74e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	4a36      	ldr	r2, [pc, #216]	; (800a6d8 <tcp_receive+0xb08>)
 800a5fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	891b      	ldrh	r3, [r3, #8]
 800a604:	461c      	mov	r4, r3
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa feba 	bl	8005388 <lwip_htons>
 800a614:	4603      	mov	r3, r0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <tcp_receive+0xa54>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <tcp_receive+0xa56>
 800a624:	2300      	movs	r3, #0
 800a626:	191a      	adds	r2, r3, r4
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	441a      	add	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a636:	461c      	mov	r4, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	891b      	ldrh	r3, [r3, #8]
 800a63c:	461d      	mov	r5, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	899b      	ldrh	r3, [r3, #12]
 800a644:	b29b      	uxth	r3, r3
 800a646:	4618      	mov	r0, r3
 800a648:	f7fa fe9e 	bl	8005388 <lwip_htons>
 800a64c:	4603      	mov	r3, r0
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <tcp_receive+0xa8c>
 800a658:	2301      	movs	r3, #1
 800a65a:	e000      	b.n	800a65e <tcp_receive+0xa8e>
 800a65c:	2300      	movs	r3, #0
 800a65e:	442b      	add	r3, r5
 800a660:	429c      	cmp	r4, r3
 800a662:	d206      	bcs.n	800a672 <tcp_receive+0xaa2>
 800a664:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <tcp_receive+0xb10>)
 800a666:	f240 622c 	movw	r2, #1580	; 0x62c
 800a66a:	4923      	ldr	r1, [pc, #140]	; (800a6f8 <tcp_receive+0xb28>)
 800a66c:	481e      	ldr	r0, [pc, #120]	; (800a6e8 <tcp_receive+0xb18>)
 800a66e:	f007 fccb 	bl	8012008 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	891b      	ldrh	r3, [r3, #8]
 800a676:	461c      	mov	r4, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	899b      	ldrh	r3, [r3, #12]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	4618      	mov	r0, r3
 800a682:	f7fa fe81 	bl	8005388 <lwip_htons>
 800a686:	4603      	mov	r3, r0
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <tcp_receive+0xac6>
 800a692:	2301      	movs	r3, #1
 800a694:	e000      	b.n	800a698 <tcp_receive+0xac8>
 800a696:	2300      	movs	r3, #0
 800a698:	1919      	adds	r1, r3, r4
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a69e:	b28b      	uxth	r3, r1
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fc ff4b 	bl	8007544 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	891b      	ldrh	r3, [r3, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d028      	beq.n	800a70a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a6b8:	4b0d      	ldr	r3, [pc, #52]	; (800a6f0 <tcp_receive+0xb20>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01d      	beq.n	800a6fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <tcp_receive+0xb20>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	f7fc fa60 	bl	8006b90 <pbuf_cat>
 800a6d0:	e018      	b.n	800a704 <tcp_receive+0xb34>
 800a6d2:	bf00      	nop
 800a6d4:	20003e6a 	.word	0x20003e6a
 800a6d8:	20003e60 	.word	0x20003e60
 800a6dc:	20003e40 	.word	0x20003e40
 800a6e0:	08014144 	.word	0x08014144
 800a6e4:	08014524 	.word	0x08014524
 800a6e8:	08014190 	.word	0x08014190
 800a6ec:	08014560 	.word	0x08014560
 800a6f0:	20003e70 	.word	0x20003e70
 800a6f4:	20003e6d 	.word	0x20003e6d
 800a6f8:	08014580 	.word	0x08014580
            } else {
              recv_data = cseg->p;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	4a70      	ldr	r2, [pc, #448]	; (800a8c4 <tcp_receive+0xcf4>)
 800a702:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	899b      	ldrh	r3, [r3, #12]
 800a710:	b29b      	uxth	r3, r3
 800a712:	4618      	mov	r0, r3
 800a714:	f7fa fe38 	bl	8005388 <lwip_htons>
 800a718:	4603      	mov	r3, r0
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00d      	beq.n	800a740 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a724:	4b68      	ldr	r3, [pc, #416]	; (800a8c8 <tcp_receive+0xcf8>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	f043 0320 	orr.w	r3, r3, #32
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	4b66      	ldr	r3, [pc, #408]	; (800a8c8 <tcp_receive+0xcf8>)
 800a730:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	7d1b      	ldrb	r3, [r3, #20]
 800a736:	2b04      	cmp	r3, #4
 800a738:	d102      	bne.n	800a740 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2207      	movs	r2, #7
 800a73e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a748:	68b8      	ldr	r0, [r7, #8]
 800a74a:	f7fd fbd7 	bl	8007efc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a752:	2b00      	cmp	r3, #0
 800a754:	d008      	beq.n	800a768 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a762:	429a      	cmp	r2, r3
 800a764:	f43f af43 	beq.w	800a5ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8b5b      	ldrh	r3, [r3, #26]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00e      	beq.n	800a792 <tcp_receive+0xbc2>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	8b5b      	ldrh	r3, [r3, #26]
 800a778:	f023 0301 	bic.w	r3, r3, #1
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	835a      	strh	r2, [r3, #26]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	8b5b      	ldrh	r3, [r3, #26]
 800a786:	f043 0302 	orr.w	r3, r3, #2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a790:	e188      	b.n	800aaa4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	8b5b      	ldrh	r3, [r3, #26]
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a7a0:	e180      	b.n	800aaa4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a7aa:	4848      	ldr	r0, [pc, #288]	; (800a8cc <tcp_receive+0xcfc>)
 800a7ac:	f7fd fbbe 	bl	8007f2c <tcp_seg_copy>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	675a      	str	r2, [r3, #116]	; 0x74
 800a7b6:	e16d      	b.n	800aa94 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7c2:	e157      	b.n	800aa74 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	4b41      	ldr	r3, [pc, #260]	; (800a8d0 <tcp_receive+0xd00>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d11d      	bne.n	800a80e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a7d2:	4b3e      	ldr	r3, [pc, #248]	; (800a8cc <tcp_receive+0xcfc>)
 800a7d4:	891a      	ldrh	r2, [r3, #8]
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	891b      	ldrh	r3, [r3, #8]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	f240 814f 	bls.w	800aa7e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a7e0:	483a      	ldr	r0, [pc, #232]	; (800a8cc <tcp_receive+0xcfc>)
 800a7e2:	f7fd fba3 	bl	8007f2c <tcp_seg_copy>
 800a7e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 8149 	beq.w	800aa82 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	e002      	b.n	800a804 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f7ff f8de 	bl	80099c8 <tcp_oos_insert_segment>
                }
                break;
 800a80c:	e139      	b.n	800aa82 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a810:	2b00      	cmp	r3, #0
 800a812:	d117      	bne.n	800a844 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a814:	4b2e      	ldr	r3, [pc, #184]	; (800a8d0 <tcp_receive+0xd00>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	da57      	bge.n	800a8d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a824:	4829      	ldr	r0, [pc, #164]	; (800a8cc <tcp_receive+0xcfc>)
 800a826:	f7fd fb81 	bl	8007f2c <tcp_seg_copy>
 800a82a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 8129 	beq.w	800aa86 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a83a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a83c:	69b8      	ldr	r0, [r7, #24]
 800a83e:	f7ff f8c3 	bl	80099c8 <tcp_oos_insert_segment>
                  }
                  break;
 800a842:	e120      	b.n	800aa86 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a844:	4b22      	ldr	r3, [pc, #136]	; (800a8d0 <tcp_receive+0xd00>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	3b01      	subs	r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	db3e      	blt.n	800a8d4 <tcp_receive+0xd04>
 800a856:	4b1e      	ldr	r3, [pc, #120]	; (800a8d0 <tcp_receive+0xd00>)
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	3301      	adds	r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	dc35      	bgt.n	800a8d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a868:	4818      	ldr	r0, [pc, #96]	; (800a8cc <tcp_receive+0xcfc>)
 800a86a:	f7fd fb5f 	bl	8007f2c <tcp_seg_copy>
 800a86e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 8109 	beq.w	800aa8a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a880:	8912      	ldrh	r2, [r2, #8]
 800a882:	441a      	add	r2, r3
 800a884:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <tcp_receive+0xd00>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dd12      	ble.n	800a8b4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <tcp_receive+0xd00>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	b29a      	uxth	r2, r3
 800a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8aa:	891b      	ldrh	r3, [r3, #8]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7fb ff1a 	bl	80066e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a8ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8bc:	69f8      	ldr	r0, [r7, #28]
 800a8be:	f7ff f883 	bl	80099c8 <tcp_oos_insert_segment>
                  }
                  break;
 800a8c2:	e0e2      	b.n	800aa8a <tcp_receive+0xeba>
 800a8c4:	20003e70 	.word	0x20003e70
 800a8c8:	20003e6d 	.word	0x20003e6d
 800a8cc:	20003e40 	.word	0x20003e40
 800a8d0:	20003e60 	.word	0x20003e60
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f040 80c6 	bne.w	800aa6e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a8e2:	4b80      	ldr	r3, [pc, #512]	; (800aae4 <tcp_receive+0xf14>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f340 80bd 	ble.w	800aa6e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	899b      	ldrh	r3, [r3, #12]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fa fd43 	bl	8005388 <lwip_htons>
 800a902:	4603      	mov	r3, r0
 800a904:	b2db      	uxtb	r3, r3
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f040 80bf 	bne.w	800aa8e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a910:	4875      	ldr	r0, [pc, #468]	; (800aae8 <tcp_receive+0xf18>)
 800a912:	f7fd fb0b 	bl	8007f2c <tcp_seg_copy>
 800a916:	4602      	mov	r2, r0
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 80b6 	beq.w	800aa92 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a92e:	8912      	ldrh	r2, [r2, #8]
 800a930:	441a      	add	r2, r3
 800a932:	4b6c      	ldr	r3, [pc, #432]	; (800aae4 <tcp_receive+0xf14>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dd12      	ble.n	800a962 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a93c:	4b69      	ldr	r3, [pc, #420]	; (800aae4 <tcp_receive+0xf14>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	b29a      	uxth	r2, r3
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	891b      	ldrh	r3, [r3, #8]
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f7fb fec3 	bl	80066e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a962:	4b62      	ldr	r3, [pc, #392]	; (800aaec <tcp_receive+0xf1c>)
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	4b5e      	ldr	r3, [pc, #376]	; (800aae4 <tcp_receive+0xf14>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	441a      	add	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a976:	440b      	add	r3, r1
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f340 8089 	ble.w	800aa92 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	899b      	ldrh	r3, [r3, #12]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fa fcfc 	bl	8005388 <lwip_htons>
 800a990:	4603      	mov	r3, r0
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d022      	beq.n	800a9e2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	899b      	ldrh	r3, [r3, #12]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	b21b      	sxth	r3, r3
 800a9a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a9ac:	b21c      	sxth	r4, r3
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	899b      	ldrh	r3, [r3, #12]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fa fce5 	bl	8005388 <lwip_htons>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fa fcdc 	bl	8005388 <lwip_htons>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	b21b      	sxth	r3, r3
 800a9d4:	4323      	orrs	r3, r4
 800a9d6:	b21a      	sxth	r2, r3
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	b292      	uxth	r2, r2
 800a9e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ec:	4413      	add	r3, r2
 800a9ee:	b299      	uxth	r1, r3
 800a9f0:	4b3c      	ldr	r3, [pc, #240]	; (800aae4 <tcp_receive+0xf14>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	1a8a      	subs	r2, r1, r2
 800a9fc:	b292      	uxth	r2, r2
 800a9fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	891b      	ldrh	r3, [r3, #8]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f7fb fe6a 	bl	80066e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	891c      	ldrh	r4, [r3, #8]
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	899b      	ldrh	r3, [r3, #12]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fa fcaf 	bl	8005388 <lwip_htons>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <tcp_receive+0xe6a>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <tcp_receive+0xe6c>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4423      	add	r3, r4
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	4b2a      	ldr	r3, [pc, #168]	; (800aaec <tcp_receive+0xf1c>)
 800aa42:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aa44:	4b29      	ldr	r3, [pc, #164]	; (800aaec <tcp_receive+0xf1c>)
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b26      	ldr	r3, [pc, #152]	; (800aae4 <tcp_receive+0xf14>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	441a      	add	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa58:	440b      	add	r3, r1
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d019      	beq.n	800aa92 <tcp_receive+0xec2>
 800aa5e:	4b24      	ldr	r3, [pc, #144]	; (800aaf0 <tcp_receive+0xf20>)
 800aa60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800aa64:	4923      	ldr	r1, [pc, #140]	; (800aaf4 <tcp_receive+0xf24>)
 800aa66:	4824      	ldr	r0, [pc, #144]	; (800aaf8 <tcp_receive+0xf28>)
 800aa68:	f007 face 	bl	8012008 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800aa6c:	e011      	b.n	800aa92 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f47f aea4 	bne.w	800a7c4 <tcp_receive+0xbf4>
 800aa7c:	e00a      	b.n	800aa94 <tcp_receive+0xec4>
                break;
 800aa7e:	bf00      	nop
 800aa80:	e008      	b.n	800aa94 <tcp_receive+0xec4>
                break;
 800aa82:	bf00      	nop
 800aa84:	e006      	b.n	800aa94 <tcp_receive+0xec4>
                  break;
 800aa86:	bf00      	nop
 800aa88:	e004      	b.n	800aa94 <tcp_receive+0xec4>
                  break;
 800aa8a:	bf00      	nop
 800aa8c:	e002      	b.n	800aa94 <tcp_receive+0xec4>
                  break;
 800aa8e:	bf00      	nop
 800aa90:	e000      	b.n	800aa94 <tcp_receive+0xec4>
                break;
 800aa92:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 fa43 	bl	800bf20 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800aa9a:	e003      	b.n	800aaa4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 fa3f 	bl	800bf20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aaa2:	e01a      	b.n	800aada <tcp_receive+0xf0a>
 800aaa4:	e019      	b.n	800aada <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800aaa6:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <tcp_receive+0xf14>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	db0a      	blt.n	800aaca <tcp_receive+0xefa>
 800aab4:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <tcp_receive+0xf14>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aac0:	440b      	add	r3, r1
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	3301      	adds	r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	dd07      	ble.n	800aada <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8b5b      	ldrh	r3, [r3, #26]
 800aace:	f043 0302 	orr.w	r3, r3, #2
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aad8:	e7ff      	b.n	800aada <tcp_receive+0xf0a>
 800aada:	bf00      	nop
 800aadc:	3750      	adds	r7, #80	; 0x50
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdb0      	pop	{r4, r5, r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20003e60 	.word	0x20003e60
 800aae8:	20003e40 	.word	0x20003e40
 800aaec:	20003e6a 	.word	0x20003e6a
 800aaf0:	08014144 	.word	0x08014144
 800aaf4:	080144ec 	.word	0x080144ec
 800aaf8:	08014190 	.word	0x08014190

0800aafc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ab02:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <tcp_get_next_optbyte+0x5c>)
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	b291      	uxth	r1, r2
 800ab0a:	4a13      	ldr	r2, [pc, #76]	; (800ab58 <tcp_get_next_optbyte+0x5c>)
 800ab0c:	8011      	strh	r1, [r2, #0]
 800ab0e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ab10:	4b12      	ldr	r3, [pc, #72]	; (800ab5c <tcp_get_next_optbyte+0x60>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <tcp_get_next_optbyte+0x26>
 800ab18:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <tcp_get_next_optbyte+0x64>)
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	88fa      	ldrh	r2, [r7, #6]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d208      	bcs.n	800ab34 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ab22:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <tcp_get_next_optbyte+0x68>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3314      	adds	r3, #20
 800ab28:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	4413      	add	r3, r2
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	e00b      	b.n	800ab4c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ab34:	88fb      	ldrh	r3, [r7, #6]
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <tcp_get_next_optbyte+0x64>)
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <tcp_get_next_optbyte+0x60>)
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	797b      	ldrb	r3, [r7, #5]
 800ab48:	4413      	add	r3, r2
 800ab4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	20003e5c 	.word	0x20003e5c
 800ab5c:	20003e58 	.word	0x20003e58
 800ab60:	20003e56 	.word	0x20003e56
 800ab64:	20003e50 	.word	0x20003e50

0800ab68 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <tcp_parseopt+0x1c>
 800ab76:	4b31      	ldr	r3, [pc, #196]	; (800ac3c <tcp_parseopt+0xd4>)
 800ab78:	f240 727d 	movw	r2, #1917	; 0x77d
 800ab7c:	4930      	ldr	r1, [pc, #192]	; (800ac40 <tcp_parseopt+0xd8>)
 800ab7e:	4831      	ldr	r0, [pc, #196]	; (800ac44 <tcp_parseopt+0xdc>)
 800ab80:	f007 fa42 	bl	8012008 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ab84:	4b30      	ldr	r3, [pc, #192]	; (800ac48 <tcp_parseopt+0xe0>)
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d053      	beq.n	800ac34 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ab8c:	4b2f      	ldr	r3, [pc, #188]	; (800ac4c <tcp_parseopt+0xe4>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	801a      	strh	r2, [r3, #0]
 800ab92:	e043      	b.n	800ac1c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800ab94:	f7ff ffb2 	bl	800aafc <tcp_get_next_optbyte>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d03c      	beq.n	800ac1c <tcp_parseopt+0xb4>
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d002      	beq.n	800abac <tcp_parseopt+0x44>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d03f      	beq.n	800ac2a <tcp_parseopt+0xc2>
 800abaa:	e026      	b.n	800abfa <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800abac:	f7ff ffa6 	bl	800aafc <tcp_get_next_optbyte>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d13b      	bne.n	800ac2e <tcp_parseopt+0xc6>
 800abb6:	4b25      	ldr	r3, [pc, #148]	; (800ac4c <tcp_parseopt+0xe4>)
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	3302      	adds	r3, #2
 800abbc:	4a22      	ldr	r2, [pc, #136]	; (800ac48 <tcp_parseopt+0xe0>)
 800abbe:	8812      	ldrh	r2, [r2, #0]
 800abc0:	4293      	cmp	r3, r2
 800abc2:	dc34      	bgt.n	800ac2e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800abc4:	f7ff ff9a 	bl	800aafc <tcp_get_next_optbyte>
 800abc8:	4603      	mov	r3, r0
 800abca:	b29b      	uxth	r3, r3
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800abd0:	f7ff ff94 	bl	800aafc <tcp_get_next_optbyte>
 800abd4:	4603      	mov	r3, r0
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	89bb      	ldrh	r3, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800abde:	89bb      	ldrh	r3, [r7, #12]
 800abe0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800abe4:	d804      	bhi.n	800abf0 <tcp_parseopt+0x88>
 800abe6:	89bb      	ldrh	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <tcp_parseopt+0x88>
 800abec:	89ba      	ldrh	r2, [r7, #12]
 800abee:	e001      	b.n	800abf4 <tcp_parseopt+0x8c>
 800abf0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800abf8:	e010      	b.n	800ac1c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800abfa:	f7ff ff7f 	bl	800aafc <tcp_get_next_optbyte>
 800abfe:	4603      	mov	r3, r0
 800ac00:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ac02:	7afb      	ldrb	r3, [r7, #11]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d914      	bls.n	800ac32 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ac08:	7afb      	ldrb	r3, [r7, #11]
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <tcp_parseopt+0xe4>)
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	4413      	add	r3, r2
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	3b02      	subs	r3, #2
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <tcp_parseopt+0xe4>)
 800ac1a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac1c:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <tcp_parseopt+0xe4>)
 800ac1e:	881a      	ldrh	r2, [r3, #0]
 800ac20:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <tcp_parseopt+0xe0>)
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d3b5      	bcc.n	800ab94 <tcp_parseopt+0x2c>
 800ac28:	e004      	b.n	800ac34 <tcp_parseopt+0xcc>
          return;
 800ac2a:	bf00      	nop
 800ac2c:	e002      	b.n	800ac34 <tcp_parseopt+0xcc>
            return;
 800ac2e:	bf00      	nop
 800ac30:	e000      	b.n	800ac34 <tcp_parseopt+0xcc>
            return;
 800ac32:	bf00      	nop
      }
    }
  }
}
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	08014144 	.word	0x08014144
 800ac40:	080145a8 	.word	0x080145a8
 800ac44:	08014190 	.word	0x08014190
 800ac48:	20003e54 	.word	0x20003e54
 800ac4c:	20003e5c 	.word	0x20003e5c

0800ac50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <tcp_trigger_input_pcb_close+0x1c>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f043 0310 	orr.w	r3, r3, #16
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	4b03      	ldr	r3, [pc, #12]	; (800ac6c <tcp_trigger_input_pcb_close+0x1c>)
 800ac60:	701a      	strb	r2, [r3, #0]
}
 800ac62:	bf00      	nop
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	20003e6d 	.word	0x20003e6d

0800ac70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <tcp_route+0x28>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	7a1b      	ldrb	r3, [r3, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d006      	beq.n	800ac98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	7a1b      	ldrb	r3, [r3, #8]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fb fb26 	bl	80062e0 <netif_get_by_index>
 800ac94:	4603      	mov	r3, r0
 800ac96:	e003      	b.n	800aca0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f005 f819 	bl	800fcd0 <ip4_route>
 800ac9e:	4603      	mov	r3, r0
  }
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aca8:	b590      	push	{r4, r7, lr}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	603b      	str	r3, [r7, #0]
 800acb4:	4613      	mov	r3, r2
 800acb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d105      	bne.n	800acca <tcp_create_segment+0x22>
 800acbe:	4b44      	ldr	r3, [pc, #272]	; (800add0 <tcp_create_segment+0x128>)
 800acc0:	22a3      	movs	r2, #163	; 0xa3
 800acc2:	4944      	ldr	r1, [pc, #272]	; (800add4 <tcp_create_segment+0x12c>)
 800acc4:	4844      	ldr	r0, [pc, #272]	; (800add8 <tcp_create_segment+0x130>)
 800acc6:	f007 f99f 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d105      	bne.n	800acdc <tcp_create_segment+0x34>
 800acd0:	4b3f      	ldr	r3, [pc, #252]	; (800add0 <tcp_create_segment+0x128>)
 800acd2:	22a4      	movs	r2, #164	; 0xa4
 800acd4:	4941      	ldr	r1, [pc, #260]	; (800addc <tcp_create_segment+0x134>)
 800acd6:	4840      	ldr	r0, [pc, #256]	; (800add8 <tcp_create_segment+0x130>)
 800acd8:	f007 f996 	bl	8012008 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800acdc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f003 0304 	and.w	r3, r3, #4
 800ace8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800acea:	2003      	movs	r0, #3
 800acec:	f7fb f802 	bl	8005cf4 <memp_malloc>
 800acf0:	6138      	str	r0, [r7, #16]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d104      	bne.n	800ad02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800acf8:	68b8      	ldr	r0, [r7, #8]
 800acfa:	f7fb fe7b 	bl	80069f4 <pbuf_free>
    return NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	e061      	b.n	800adc6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ad08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	891a      	ldrh	r2, [r3, #8]
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d205      	bcs.n	800ad2e <tcp_create_segment+0x86>
 800ad22:	4b2b      	ldr	r3, [pc, #172]	; (800add0 <tcp_create_segment+0x128>)
 800ad24:	22b0      	movs	r2, #176	; 0xb0
 800ad26:	492e      	ldr	r1, [pc, #184]	; (800ade0 <tcp_create_segment+0x138>)
 800ad28:	482b      	ldr	r0, [pc, #172]	; (800add8 <tcp_create_segment+0x130>)
 800ad2a:	f007 f96d 	bl	8012008 <iprintf>
  seg->len = p->tot_len - optlen;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	891a      	ldrh	r2, [r3, #8]
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ad3e:	2114      	movs	r1, #20
 800ad40:	68b8      	ldr	r0, [r7, #8]
 800ad42:	f7fb fdc1 	bl	80068c8 <pbuf_add_header>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ad4c:	6938      	ldr	r0, [r7, #16]
 800ad4e:	f7fd f8d5 	bl	8007efc <tcp_seg_free>
    return NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e037      	b.n	800adc6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8ada      	ldrh	r2, [r3, #22]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	68dc      	ldr	r4, [r3, #12]
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7fa fb0d 	bl	8005388 <lwip_htons>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	8b1a      	ldrh	r2, [r3, #24]
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	68dc      	ldr	r4, [r3, #12]
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	f7fa fb04 	bl	8005388 <lwip_htons>
 800ad80:	4603      	mov	r3, r0
 800ad82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	68dc      	ldr	r4, [r3, #12]
 800ad88:	6838      	ldr	r0, [r7, #0]
 800ad8a:	f7fa fb12 	bl	80053b2 <lwip_htonl>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	089b      	lsrs	r3, r3, #2
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	3305      	adds	r3, #5
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	031b      	lsls	r3, r3, #12
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	4313      	orrs	r3, r2
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	68dc      	ldr	r4, [r3, #12]
 800adae:	4610      	mov	r0, r2
 800adb0:	f7fa faea 	bl	8005388 <lwip_htons>
 800adb4:	4603      	mov	r3, r0
 800adb6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	749a      	strb	r2, [r3, #18]
 800adc0:	2200      	movs	r2, #0
 800adc2:	74da      	strb	r2, [r3, #19]
  return seg;
 800adc4:	693b      	ldr	r3, [r7, #16]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd90      	pop	{r4, r7, pc}
 800adce:	bf00      	nop
 800add0:	080145c4 	.word	0x080145c4
 800add4:	080145f8 	.word	0x080145f8
 800add8:	08014618 	.word	0x08014618
 800addc:	08014640 	.word	0x08014640
 800ade0:	08014664 	.word	0x08014664

0800ade4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ade4:	b590      	push	{r4, r7, lr}
 800ade6:	b08b      	sub	sp, #44	; 0x2c
 800ade8:	af02      	add	r7, sp, #8
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800adf8:	2300      	movs	r3, #0
 800adfa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <tcp_split_unsent_seg+0x2c>
 800ae02:	4b95      	ldr	r3, [pc, #596]	; (800b058 <tcp_split_unsent_seg+0x274>)
 800ae04:	f240 324b 	movw	r2, #843	; 0x34b
 800ae08:	4994      	ldr	r1, [pc, #592]	; (800b05c <tcp_split_unsent_seg+0x278>)
 800ae0a:	4895      	ldr	r0, [pc, #596]	; (800b060 <tcp_split_unsent_seg+0x27c>)
 800ae0c:	f007 f8fc 	bl	8012008 <iprintf>

  useg = pcb->unsent;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ae1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae20:	e116      	b.n	800b050 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ae22:	887b      	ldrh	r3, [r7, #2]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d109      	bne.n	800ae3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ae28:	4b8b      	ldr	r3, [pc, #556]	; (800b058 <tcp_split_unsent_seg+0x274>)
 800ae2a:	f240 3253 	movw	r2, #851	; 0x353
 800ae2e:	498d      	ldr	r1, [pc, #564]	; (800b064 <tcp_split_unsent_seg+0x280>)
 800ae30:	488b      	ldr	r0, [pc, #556]	; (800b060 <tcp_split_unsent_seg+0x27c>)
 800ae32:	f007 f8e9 	bl	8012008 <iprintf>
    return ERR_VAL;
 800ae36:	f06f 0305 	mvn.w	r3, #5
 800ae3a:	e109      	b.n	800b050 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	891b      	ldrh	r3, [r3, #8]
 800ae40:	887a      	ldrh	r2, [r7, #2]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d301      	bcc.n	800ae4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	e102      	b.n	800b050 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae4e:	887a      	ldrh	r2, [r7, #2]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d906      	bls.n	800ae62 <tcp_split_unsent_seg+0x7e>
 800ae54:	4b80      	ldr	r3, [pc, #512]	; (800b058 <tcp_split_unsent_seg+0x274>)
 800ae56:	f240 325b 	movw	r2, #859	; 0x35b
 800ae5a:	4983      	ldr	r1, [pc, #524]	; (800b068 <tcp_split_unsent_seg+0x284>)
 800ae5c:	4880      	ldr	r0, [pc, #512]	; (800b060 <tcp_split_unsent_seg+0x27c>)
 800ae5e:	f007 f8d3 	bl	8012008 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	891b      	ldrh	r3, [r3, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <tcp_split_unsent_seg+0x94>
 800ae6a:	4b7b      	ldr	r3, [pc, #492]	; (800b058 <tcp_split_unsent_seg+0x274>)
 800ae6c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ae70:	497e      	ldr	r1, [pc, #504]	; (800b06c <tcp_split_unsent_seg+0x288>)
 800ae72:	487b      	ldr	r0, [pc, #492]	; (800b060 <tcp_split_unsent_seg+0x27c>)
 800ae74:	f007 f8c8 	bl	8012008 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	7a9b      	ldrb	r3, [r3, #10]
 800ae7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	891a      	ldrh	r2, [r3, #8]
 800ae8e:	887b      	ldrh	r3, [r7, #2]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	89bb      	ldrh	r3, [r7, #12]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aea2:	4619      	mov	r1, r3
 800aea4:	2036      	movs	r0, #54	; 0x36
 800aea6:	f7fb fac5 	bl	8006434 <pbuf_alloc>
 800aeaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 80b7 	beq.w	800b022 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	891a      	ldrh	r2, [r3, #8]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	891b      	ldrh	r3, [r3, #8]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	887b      	ldrh	r3, [r7, #2]
 800aec4:	4413      	add	r3, r2
 800aec6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	6858      	ldr	r0, [r3, #4]
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	18d1      	adds	r1, r2, r3
 800aed4:	897b      	ldrh	r3, [r7, #10]
 800aed6:	89ba      	ldrh	r2, [r7, #12]
 800aed8:	f7fb ff92 	bl	8006e00 <pbuf_copy_partial>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	89bb      	ldrh	r3, [r7, #12]
 800aee2:	4293      	cmp	r3, r2
 800aee4:	f040 809f 	bne.w	800b026 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	899b      	ldrh	r3, [r3, #12]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fa fa49 	bl	8005388 <lwip_htons>
 800aef6:	4603      	mov	r3, r0
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aefe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800af00:	2300      	movs	r3, #0
 800af02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800af04:	7efb      	ldrb	r3, [r7, #27]
 800af06:	f003 0308 	and.w	r3, r3, #8
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d007      	beq.n	800af1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800af0e:	7efb      	ldrb	r3, [r7, #27]
 800af10:	f023 0308 	bic.w	r3, r3, #8
 800af14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800af16:	7ebb      	ldrb	r3, [r7, #26]
 800af18:	f043 0308 	orr.w	r3, r3, #8
 800af1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800af1e:	7efb      	ldrb	r3, [r7, #27]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d007      	beq.n	800af38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800af28:	7efb      	ldrb	r3, [r7, #27]
 800af2a:	f023 0301 	bic.w	r3, r3, #1
 800af2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800af30:	7ebb      	ldrb	r3, [r7, #26]
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fa fa37 	bl	80053b2 <lwip_htonl>
 800af44:	4602      	mov	r2, r0
 800af46:	887b      	ldrh	r3, [r7, #2]
 800af48:	18d1      	adds	r1, r2, r3
 800af4a:	7eba      	ldrb	r2, [r7, #26]
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	460b      	mov	r3, r1
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff fea7 	bl	800aca8 <tcp_create_segment>
 800af5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d063      	beq.n	800b02a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	4618      	mov	r0, r3
 800af68:	f7fb fdd2 	bl	8006b10 <pbuf_clen>
 800af6c:	4603      	mov	r3, r0
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af76:	1a9b      	subs	r3, r3, r2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	6858      	ldr	r0, [r3, #4]
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	891a      	ldrh	r2, [r3, #8]
 800af8a:	89bb      	ldrh	r3, [r7, #12]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	b29b      	uxth	r3, r3
 800af90:	4619      	mov	r1, r3
 800af92:	f7fb fba9 	bl	80066e8 <pbuf_realloc>
  useg->len -= remainder;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	891a      	ldrh	r2, [r3, #8]
 800af9a:	89bb      	ldrh	r3, [r7, #12]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	899b      	ldrh	r3, [r3, #12]
 800afaa:	b29c      	uxth	r4, r3
 800afac:	7efb      	ldrb	r3, [r7, #27]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fa f9e9 	bl	8005388 <lwip_htons>
 800afb6:	4603      	mov	r3, r0
 800afb8:	461a      	mov	r2, r3
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	4322      	orrs	r2, r4
 800afc0:	b292      	uxth	r2, r2
 800afc2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fb fda1 	bl	8006b10 <pbuf_clen>
 800afce:	4603      	mov	r3, r0
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800afd8:	4413      	add	r3, r2
 800afda:	b29a      	uxth	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fb fd92 	bl	8006b10 <pbuf_clen>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aff6:	4413      	add	r3, r2
 800aff8:	b29a      	uxth	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	69fa      	ldr	r2, [r7, #28]
 800b00c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d103      	bne.n	800b01e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	e016      	b.n	800b050 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b022:	bf00      	nop
 800b024:	e002      	b.n	800b02c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b026:	bf00      	nop
 800b028:	e000      	b.n	800b02c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b02a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d006      	beq.n	800b040 <tcp_split_unsent_seg+0x25c>
 800b032:	4b09      	ldr	r3, [pc, #36]	; (800b058 <tcp_split_unsent_seg+0x274>)
 800b034:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b038:	490d      	ldr	r1, [pc, #52]	; (800b070 <tcp_split_unsent_seg+0x28c>)
 800b03a:	4809      	ldr	r0, [pc, #36]	; (800b060 <tcp_split_unsent_seg+0x27c>)
 800b03c:	f006 ffe4 	bl	8012008 <iprintf>
  if (p != NULL) {
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b046:	6938      	ldr	r0, [r7, #16]
 800b048:	f7fb fcd4 	bl	80069f4 <pbuf_free>
  }

  return ERR_MEM;
 800b04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b050:	4618      	mov	r0, r3
 800b052:	3724      	adds	r7, #36	; 0x24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd90      	pop	{r4, r7, pc}
 800b058:	080145c4 	.word	0x080145c4
 800b05c:	08014958 	.word	0x08014958
 800b060:	08014618 	.word	0x08014618
 800b064:	0801497c 	.word	0x0801497c
 800b068:	080149a0 	.word	0x080149a0
 800b06c:	080149b0 	.word	0x080149b0
 800b070:	080149c0 	.word	0x080149c0

0800b074 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b074:	b590      	push	{r4, r7, lr}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <tcp_send_fin+0x1c>
 800b082:	4b21      	ldr	r3, [pc, #132]	; (800b108 <tcp_send_fin+0x94>)
 800b084:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b088:	4920      	ldr	r1, [pc, #128]	; (800b10c <tcp_send_fin+0x98>)
 800b08a:	4821      	ldr	r0, [pc, #132]	; (800b110 <tcp_send_fin+0x9c>)
 800b08c:	f006 ffbc 	bl	8012008 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d02e      	beq.n	800b0f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	e002      	b.n	800b0a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f8      	bne.n	800b0a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	899b      	ldrh	r3, [r3, #12]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fa f966 	bl	8005388 <lwip_htons>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	f003 0307 	and.w	r3, r3, #7
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d116      	bne.n	800b0f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	899b      	ldrh	r3, [r3, #12]
 800b0ce:	b29c      	uxth	r4, r3
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	f7fa f959 	bl	8005388 <lwip_htons>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	4322      	orrs	r2, r4
 800b0e0:	b292      	uxth	r2, r2
 800b0e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	8b5b      	ldrh	r3, [r3, #26]
 800b0e8:	f043 0320 	orr.w	r3, r3, #32
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e004      	b.n	800b100 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f80b 	bl	800b114 <tcp_enqueue_flags>
 800b0fe:	4603      	mov	r3, r0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	bd90      	pop	{r4, r7, pc}
 800b108:	080145c4 	.word	0x080145c4
 800b10c:	080149cc 	.word	0x080149cc
 800b110:	08014618 	.word	0x08014618

0800b114 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	; 0x28
 800b118:	af02      	add	r7, sp, #8
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	f003 0303 	and.w	r3, r3, #3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <tcp_enqueue_flags+0x2c>
 800b132:	4b67      	ldr	r3, [pc, #412]	; (800b2d0 <tcp_enqueue_flags+0x1bc>)
 800b134:	f240 4212 	movw	r2, #1042	; 0x412
 800b138:	4966      	ldr	r1, [pc, #408]	; (800b2d4 <tcp_enqueue_flags+0x1c0>)
 800b13a:	4867      	ldr	r0, [pc, #412]	; (800b2d8 <tcp_enqueue_flags+0x1c4>)
 800b13c:	f006 ff64 	bl	8012008 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <tcp_enqueue_flags+0x40>
 800b146:	4b62      	ldr	r3, [pc, #392]	; (800b2d0 <tcp_enqueue_flags+0x1bc>)
 800b148:	f240 4213 	movw	r2, #1043	; 0x413
 800b14c:	4963      	ldr	r1, [pc, #396]	; (800b2dc <tcp_enqueue_flags+0x1c8>)
 800b14e:	4862      	ldr	r0, [pc, #392]	; (800b2d8 <tcp_enqueue_flags+0x1c4>)
 800b150:	f006 ff5a 	bl	8012008 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b15e:	2301      	movs	r3, #1
 800b160:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b162:	7ffb      	ldrb	r3, [r7, #31]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	b29b      	uxth	r3, r3
 800b172:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b176:	4619      	mov	r1, r3
 800b178:	2036      	movs	r0, #54	; 0x36
 800b17a:	f7fb f95b 	bl	8006434 <pbuf_alloc>
 800b17e:	6138      	str	r0, [r7, #16]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	8b5b      	ldrh	r3, [r3, #26]
 800b18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b198:	e095      	b.n	800b2c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	895a      	ldrh	r2, [r3, #10]
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d206      	bcs.n	800b1b4 <tcp_enqueue_flags+0xa0>
 800b1a6:	4b4a      	ldr	r3, [pc, #296]	; (800b2d0 <tcp_enqueue_flags+0x1bc>)
 800b1a8:	f240 423a 	movw	r2, #1082	; 0x43a
 800b1ac:	494c      	ldr	r1, [pc, #304]	; (800b2e0 <tcp_enqueue_flags+0x1cc>)
 800b1ae:	484a      	ldr	r0, [pc, #296]	; (800b2d8 <tcp_enqueue_flags+0x1c4>)
 800b1b0:	f006 ff2a 	bl	8012008 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	7ffb      	ldrb	r3, [r7, #31]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	6939      	ldr	r1, [r7, #16]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fd70 	bl	800aca8 <tcp_create_segment>
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	8b5b      	ldrh	r3, [r3, #26]
 800b1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1e2:	e070      	b.n	800b2c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0303 	and.w	r3, r3, #3
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d006      	beq.n	800b1fe <tcp_enqueue_flags+0xea>
 800b1f0:	4b37      	ldr	r3, [pc, #220]	; (800b2d0 <tcp_enqueue_flags+0x1bc>)
 800b1f2:	f240 4242 	movw	r2, #1090	; 0x442
 800b1f6:	493b      	ldr	r1, [pc, #236]	; (800b2e4 <tcp_enqueue_flags+0x1d0>)
 800b1f8:	4837      	ldr	r0, [pc, #220]	; (800b2d8 <tcp_enqueue_flags+0x1c4>)
 800b1fa:	f006 ff05 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	891b      	ldrh	r3, [r3, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d006      	beq.n	800b214 <tcp_enqueue_flags+0x100>
 800b206:	4b32      	ldr	r3, [pc, #200]	; (800b2d0 <tcp_enqueue_flags+0x1bc>)
 800b208:	f240 4243 	movw	r2, #1091	; 0x443
 800b20c:	4936      	ldr	r1, [pc, #216]	; (800b2e8 <tcp_enqueue_flags+0x1d4>)
 800b20e:	4832      	ldr	r0, [pc, #200]	; (800b2d8 <tcp_enqueue_flags+0x1c4>)
 800b210:	f006 fefa 	bl	8012008 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	66da      	str	r2, [r3, #108]	; 0x6c
 800b222:	e00d      	b.n	800b240 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b228:	61bb      	str	r3, [r7, #24]
 800b22a:	e002      	b.n	800b232 <tcp_enqueue_flags+0x11e>
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	61bb      	str	r3, [r7, #24]
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1f8      	bne.n	800b22c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d104      	bne.n	800b25c <tcp_enqueue_flags+0x148>
 800b252:	78fb      	ldrb	r3, [r7, #3]
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d004      	beq.n	800b266 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b266:	78fb      	ldrb	r3, [r7, #3]
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d006      	beq.n	800b27e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8b5b      	ldrh	r3, [r3, #26]
 800b274:	f043 0320 	orr.w	r3, r3, #32
 800b278:	b29a      	uxth	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	4618      	mov	r0, r3
 800b284:	f7fb fc44 	bl	8006b10 <pbuf_clen>
 800b288:	4603      	mov	r3, r0
 800b28a:	461a      	mov	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b292:	4413      	add	r3, r2
 800b294:	b29a      	uxth	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00e      	beq.n	800b2c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <tcp_enqueue_flags+0x1b0>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <tcp_enqueue_flags+0x1b0>
 800b2b6:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <tcp_enqueue_flags+0x1bc>)
 800b2b8:	f240 4266 	movw	r2, #1126	; 0x466
 800b2bc:	490b      	ldr	r1, [pc, #44]	; (800b2ec <tcp_enqueue_flags+0x1d8>)
 800b2be:	4806      	ldr	r0, [pc, #24]	; (800b2d8 <tcp_enqueue_flags+0x1c4>)
 800b2c0:	f006 fea2 	bl	8012008 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3720      	adds	r7, #32
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	080145c4 	.word	0x080145c4
 800b2d4:	080149e8 	.word	0x080149e8
 800b2d8:	08014618 	.word	0x08014618
 800b2dc:	08014a40 	.word	0x08014a40
 800b2e0:	08014a60 	.word	0x08014a60
 800b2e4:	08014a9c 	.word	0x08014a9c
 800b2e8:	08014ab4 	.word	0x08014ab4
 800b2ec:	08014ae0 	.word	0x08014ae0

0800b2f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b2f0:	b5b0      	push	{r4, r5, r7, lr}
 800b2f2:	b08a      	sub	sp, #40	; 0x28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <tcp_output+0x1c>
 800b2fe:	4ba0      	ldr	r3, [pc, #640]	; (800b580 <tcp_output+0x290>)
 800b300:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b304:	499f      	ldr	r1, [pc, #636]	; (800b584 <tcp_output+0x294>)
 800b306:	48a0      	ldr	r0, [pc, #640]	; (800b588 <tcp_output+0x298>)
 800b308:	f006 fe7e 	bl	8012008 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7d1b      	ldrb	r3, [r3, #20]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d106      	bne.n	800b322 <tcp_output+0x32>
 800b314:	4b9a      	ldr	r3, [pc, #616]	; (800b580 <tcp_output+0x290>)
 800b316:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800b31a:	499c      	ldr	r1, [pc, #624]	; (800b58c <tcp_output+0x29c>)
 800b31c:	489a      	ldr	r0, [pc, #616]	; (800b588 <tcp_output+0x298>)
 800b31e:	f006 fe73 	bl	8012008 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b322:	4b9b      	ldr	r3, [pc, #620]	; (800b590 <tcp_output+0x2a0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d101      	bne.n	800b330 <tcp_output+0x40>
    return ERR_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	e1d2      	b.n	800b6d6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d203      	bcs.n	800b348 <tcp_output+0x58>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b346:	e002      	b.n	800b34e <tcp_output+0x5e>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b34e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b354:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	8b5b      	ldrh	r3, [r3, #26]
 800b360:	f003 0302 	and.w	r3, r3, #2
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 81a9 	beq.w	800b6bc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fdd8 	bl	800bf20 <tcp_send_empty_ack>
 800b370:	4603      	mov	r3, r0
 800b372:	e1b0      	b.n	800b6d6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3304      	adds	r3, #4
 800b37a:	461a      	mov	r2, r3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff fc77 	bl	800ac70 <tcp_route>
 800b382:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <tcp_output+0xa0>
    return ERR_RTE;
 800b38a:	f06f 0303 	mvn.w	r3, #3
 800b38e:	e1a2      	b.n	800b6d6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <tcp_output+0xae>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d111      	bne.n	800b3c2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <tcp_output+0xba>
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	e000      	b.n	800b3ac <tcp_output+0xbc>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d102      	bne.n	800b3ba <tcp_output+0xca>
      return ERR_RTE;
 800b3b4:	f06f 0303 	mvn.w	r3, #3
 800b3b8:	e18d      	b.n	800b6d6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7f9 fff2 	bl	80053b2 <lwip_htonl>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d8:	8912      	ldrh	r2, [r2, #8]
 800b3da:	4413      	add	r3, r2
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d227      	bcs.n	800b432 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d114      	bne.n	800b41a <tcp_output+0x12a>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d110      	bne.n	800b41a <tcp_output+0x12a>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10b      	bne.n	800b41a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	8b5b      	ldrh	r3, [r3, #26]
 800b41e:	f003 0302 	and.w	r3, r3, #2
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 814c 	beq.w	800b6c0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fd79 	bl	800bf20 <tcp_send_empty_ack>
 800b42e:	4603      	mov	r3, r0
 800b430:	e151      	b.n	800b6d6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 811b 	beq.w	800b67e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800b448:	e002      	b.n	800b450 <tcp_output+0x160>
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	623b      	str	r3, [r7, #32]
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1f8      	bne.n	800b44a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b458:	e111      	b.n	800b67e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	899b      	ldrh	r3, [r3, #12]
 800b460:	b29b      	uxth	r3, r3
 800b462:	4618      	mov	r0, r3
 800b464:	f7f9 ff90 	bl	8005388 <lwip_htons>
 800b468:	4603      	mov	r3, r0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <tcp_output+0x192>
 800b474:	4b42      	ldr	r3, [pc, #264]	; (800b580 <tcp_output+0x290>)
 800b476:	f240 5237 	movw	r2, #1335	; 0x537
 800b47a:	4946      	ldr	r1, [pc, #280]	; (800b594 <tcp_output+0x2a4>)
 800b47c:	4842      	ldr	r0, [pc, #264]	; (800b588 <tcp_output+0x298>)
 800b47e:	f006 fdc3 	bl	8012008 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b486:	2b00      	cmp	r3, #0
 800b488:	d01f      	beq.n	800b4ca <tcp_output+0x1da>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	8b5b      	ldrh	r3, [r3, #26]
 800b48e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b492:	2b00      	cmp	r3, #0
 800b494:	d119      	bne.n	800b4ca <tcp_output+0x1da>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <tcp_output+0x1c6>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d110      	bne.n	800b4ca <tcp_output+0x1da>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ac:	891a      	ldrh	r2, [r3, #8]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d209      	bcs.n	800b4ca <tcp_output+0x1da>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <tcp_output+0x1da>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4c6:	2b08      	cmp	r3, #8
 800b4c8:	d901      	bls.n	800b4ce <tcp_output+0x1de>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <tcp_output+0x1e0>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d106      	bne.n	800b4e2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8b5b      	ldrh	r3, [r3, #26]
 800b4d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 80e3 	beq.w	800b6a8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7d1b      	ldrb	r3, [r3, #20]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d00d      	beq.n	800b506 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	899b      	ldrh	r3, [r3, #12]
 800b4f0:	b29c      	uxth	r4, r3
 800b4f2:	2010      	movs	r0, #16
 800b4f4:	f7f9 ff48 	bl	8005388 <lwip_htons>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	4322      	orrs	r2, r4
 800b502:	b292      	uxth	r2, r2
 800b504:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b50c:	f000 f908 	bl	800b720 <tcp_output_segment>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d009      	beq.n	800b530 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	8b5b      	ldrh	r3, [r3, #26]
 800b520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b524:	b29a      	uxth	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	835a      	strh	r2, [r3, #26]
      return err;
 800b52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b52e:	e0d2      	b.n	800b6d6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	7d1b      	ldrb	r3, [r3, #20]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d006      	beq.n	800b54e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8b5b      	ldrh	r3, [r3, #26]
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	4618      	mov	r0, r3
 800b556:	f7f9 ff2c 	bl	80053b2 <lwip_htonl>
 800b55a:	4604      	mov	r4, r0
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	891b      	ldrh	r3, [r3, #8]
 800b560:	461d      	mov	r5, r3
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	899b      	ldrh	r3, [r3, #12]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f9 ff0c 	bl	8005388 <lwip_htons>
 800b570:	4603      	mov	r3, r0
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00d      	beq.n	800b598 <tcp_output+0x2a8>
 800b57c:	2301      	movs	r3, #1
 800b57e:	e00c      	b.n	800b59a <tcp_output+0x2aa>
 800b580:	080145c4 	.word	0x080145c4
 800b584:	08014b08 	.word	0x08014b08
 800b588:	08014618 	.word	0x08014618
 800b58c:	08014b20 	.word	0x08014b20
 800b590:	200076e8 	.word	0x200076e8
 800b594:	08014b48 	.word	0x08014b48
 800b598:	2300      	movs	r3, #0
 800b59a:	442b      	add	r3, r5
 800b59c:	4423      	add	r3, r4
 800b59e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	da02      	bge.n	800b5b2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	891b      	ldrh	r3, [r3, #8]
 800b5b6:	461c      	mov	r4, r3
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	899b      	ldrh	r3, [r3, #12]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f9 fee1 	bl	8005388 <lwip_htons>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <tcp_output+0x2e6>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <tcp_output+0x2e8>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	4423      	add	r3, r4
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d049      	beq.n	800b672 <tcp_output+0x382>
      seg->next = NULL;
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <tcp_output+0x308>
        pcb->unacked = seg;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	623b      	str	r3, [r7, #32]
 800b5f6:	e03f      	b.n	800b678 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7f9 fed7 	bl	80053b2 <lwip_htonl>
 800b604:	4604      	mov	r4, r0
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f9 fed0 	bl	80053b2 <lwip_htonl>
 800b612:	4603      	mov	r3, r0
 800b614:	1ae3      	subs	r3, r4, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	da24      	bge.n	800b664 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3370      	adds	r3, #112	; 0x70
 800b61e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b620:	e002      	b.n	800b628 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d011      	beq.n	800b654 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f9 feba 	bl	80053b2 <lwip_htonl>
 800b63e:	4604      	mov	r4, r0
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	4618      	mov	r0, r3
 800b648:	f7f9 feb3 	bl	80053b2 <lwip_htonl>
 800b64c:	4603      	mov	r3, r0
 800b64e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b650:	2b00      	cmp	r3, #0
 800b652:	dbe6      	blt.n	800b622 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	e009      	b.n	800b678 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b668:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	623b      	str	r3, [r7, #32]
 800b670:	e002      	b.n	800b678 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b674:	f7fc fc42 	bl	8007efc <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b67c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	2b00      	cmp	r3, #0
 800b682:	d012      	beq.n	800b6aa <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7f9 fe91 	bl	80053b2 <lwip_htonl>
 800b690:	4602      	mov	r2, r0
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b69a:	8912      	ldrh	r2, [r2, #8]
 800b69c:	4413      	add	r3, r2
  while (seg != NULL &&
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	f4bf aeda 	bcs.w	800b45a <tcp_output+0x16a>
 800b6a6:	e000      	b.n	800b6aa <tcp_output+0x3ba>
      break;
 800b6a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d108      	bne.n	800b6c4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b6ba:	e004      	b.n	800b6c6 <tcp_output+0x3d6>
    goto output_done;
 800b6bc:	bf00      	nop
 800b6be:	e002      	b.n	800b6c6 <tcp_output+0x3d6>
    goto output_done;
 800b6c0:	bf00      	nop
 800b6c2:	e000      	b.n	800b6c6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b6c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3728      	adds	r7, #40	; 0x28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b6de:	bf00      	nop

0800b6e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <tcp_output_segment_busy+0x1c>
 800b6ee:	4b09      	ldr	r3, [pc, #36]	; (800b714 <tcp_output_segment_busy+0x34>)
 800b6f0:	f240 529a 	movw	r2, #1434	; 0x59a
 800b6f4:	4908      	ldr	r1, [pc, #32]	; (800b718 <tcp_output_segment_busy+0x38>)
 800b6f6:	4809      	ldr	r0, [pc, #36]	; (800b71c <tcp_output_segment_busy+0x3c>)
 800b6f8:	f006 fc86 	bl	8012008 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	7b9b      	ldrb	r3, [r3, #14]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d001      	beq.n	800b70a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b706:	2301      	movs	r3, #1
 800b708:	e000      	b.n	800b70c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	080145c4 	.word	0x080145c4
 800b718:	08014b60 	.word	0x08014b60
 800b71c:	08014618 	.word	0x08014618

0800b720 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b720:	b5b0      	push	{r4, r5, r7, lr}
 800b722:	b08c      	sub	sp, #48	; 0x30
 800b724:	af04      	add	r7, sp, #16
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <tcp_output_segment+0x20>
 800b732:	4b64      	ldr	r3, [pc, #400]	; (800b8c4 <tcp_output_segment+0x1a4>)
 800b734:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b738:	4963      	ldr	r1, [pc, #396]	; (800b8c8 <tcp_output_segment+0x1a8>)
 800b73a:	4864      	ldr	r0, [pc, #400]	; (800b8cc <tcp_output_segment+0x1ac>)
 800b73c:	f006 fc64 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d106      	bne.n	800b754 <tcp_output_segment+0x34>
 800b746:	4b5f      	ldr	r3, [pc, #380]	; (800b8c4 <tcp_output_segment+0x1a4>)
 800b748:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b74c:	4960      	ldr	r1, [pc, #384]	; (800b8d0 <tcp_output_segment+0x1b0>)
 800b74e:	485f      	ldr	r0, [pc, #380]	; (800b8cc <tcp_output_segment+0x1ac>)
 800b750:	f006 fc5a 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <tcp_output_segment+0x48>
 800b75a:	4b5a      	ldr	r3, [pc, #360]	; (800b8c4 <tcp_output_segment+0x1a4>)
 800b75c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b760:	495c      	ldr	r1, [pc, #368]	; (800b8d4 <tcp_output_segment+0x1b4>)
 800b762:	485a      	ldr	r0, [pc, #360]	; (800b8cc <tcp_output_segment+0x1ac>)
 800b764:	f006 fc50 	bl	8012008 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff ffb9 	bl	800b6e0 <tcp_output_segment_busy>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d001      	beq.n	800b778 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e0a0      	b.n	800b8ba <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	68dc      	ldr	r4, [r3, #12]
 800b780:	4610      	mov	r0, r2
 800b782:	f7f9 fe16 	bl	80053b2 <lwip_htonl>
 800b786:	4603      	mov	r3, r0
 800b788:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68dc      	ldr	r4, [r3, #12]
 800b792:	4610      	mov	r0, r2
 800b794:	f7f9 fdf8 	bl	8005388 <lwip_htons>
 800b798:	4603      	mov	r3, r0
 800b79a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b7a4:	441a      	add	r2, r3
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	3314      	adds	r3, #20
 800b7b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	7a9b      	ldrb	r3, [r3, #10]
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d015      	beq.n	800b7ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b7ca:	f7fc fe8d 	bl	80084e8 <tcp_eff_send_mss_netif>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b7d2:	8b7b      	ldrh	r3, [r7, #26]
 800b7d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7f9 fdea 	bl	80053b2 <lwip_htonl>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	da02      	bge.n	800b7fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10c      	bne.n	800b81c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b802:	4b35      	ldr	r3, [pc, #212]	; (800b8d8 <tcp_output_segment+0x1b8>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	4618      	mov	r0, r3
 800b812:	f7f9 fdce 	bl	80053b2 <lwip_htonl>
 800b816:	4602      	mov	r2, r0
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	461a      	mov	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	8959      	ldrh	r1, [r3, #10]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	8b3a      	ldrh	r2, [r7, #24]
 800b838:	1a8a      	subs	r2, r1, r2
 800b83a:	b292      	uxth	r2, r2
 800b83c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	8919      	ldrh	r1, [r3, #8]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	8b3a      	ldrh	r2, [r7, #24]
 800b84a:	1a8a      	subs	r2, r1, r2
 800b84c:	b292      	uxth	r2, r2
 800b84e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	68d2      	ldr	r2, [r2, #12]
 800b858:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	741a      	strb	r2, [r3, #16]
 800b862:	2200      	movs	r2, #0
 800b864:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	f103 0214 	add.w	r2, r3, #20
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	7a9b      	ldrb	r3, [r3, #10]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d006      	beq.n	800b88e <tcp_output_segment+0x16e>
 800b880:	4b10      	ldr	r3, [pc, #64]	; (800b8c4 <tcp_output_segment+0x1a4>)
 800b882:	f240 621c 	movw	r2, #1564	; 0x61c
 800b886:	4915      	ldr	r1, [pc, #84]	; (800b8dc <tcp_output_segment+0x1bc>)
 800b888:	4810      	ldr	r0, [pc, #64]	; (800b8cc <tcp_output_segment+0x1ac>)
 800b88a:	f006 fbbd 	bl	8012008 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6858      	ldr	r0, [r3, #4]
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	1d1c      	adds	r4, r3, #4
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	7add      	ldrb	r5, [r3, #11]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	7a9b      	ldrb	r3, [r3, #10]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	9202      	str	r2, [sp, #8]
 800b8a4:	2206      	movs	r2, #6
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	f004 fbe9 	bl	8010084 <ip4_output_if>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b8b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	080145c4 	.word	0x080145c4
 800b8c8:	08014b88 	.word	0x08014b88
 800b8cc:	08014618 	.word	0x08014618
 800b8d0:	08014ba8 	.word	0x08014ba8
 800b8d4:	08014bc8 	.word	0x08014bc8
 800b8d8:	200076d8 	.word	0x200076d8
 800b8dc:	08014bec 	.word	0x08014bec

0800b8e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b8e0:	b5b0      	push	{r4, r5, r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d106      	bne.n	800b8fc <tcp_rexmit_rto_prepare+0x1c>
 800b8ee:	4b31      	ldr	r3, [pc, #196]	; (800b9b4 <tcp_rexmit_rto_prepare+0xd4>)
 800b8f0:	f240 6263 	movw	r2, #1635	; 0x663
 800b8f4:	4930      	ldr	r1, [pc, #192]	; (800b9b8 <tcp_rexmit_rto_prepare+0xd8>)
 800b8f6:	4831      	ldr	r0, [pc, #196]	; (800b9bc <tcp_rexmit_rto_prepare+0xdc>)
 800b8f8:	f006 fb86 	bl	8012008 <iprintf>

  if (pcb->unacked == NULL) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b904:	f06f 0305 	mvn.w	r3, #5
 800b908:	e050      	b.n	800b9ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	e00b      	b.n	800b92a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f7ff fee4 	bl	800b6e0 <tcp_output_segment_busy>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b91e:	f06f 0305 	mvn.w	r3, #5
 800b922:	e043      	b.n	800b9ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1ef      	bne.n	800b912 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7ff fed4 	bl	800b6e0 <tcp_output_segment_busy>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b93e:	f06f 0305 	mvn.w	r3, #5
 800b942:	e033      	b.n	800b9ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8b5b      	ldrh	r3, [r3, #26]
 800b95e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7f9 fd1f 	bl	80053b2 <lwip_htonl>
 800b974:	4604      	mov	r4, r0
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	891b      	ldrh	r3, [r3, #8]
 800b97a:	461d      	mov	r5, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	899b      	ldrh	r3, [r3, #12]
 800b982:	b29b      	uxth	r3, r3
 800b984:	4618      	mov	r0, r3
 800b986:	f7f9 fcff 	bl	8005388 <lwip_htons>
 800b98a:	4603      	mov	r3, r0
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	f003 0303 	and.w	r3, r3, #3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <tcp_rexmit_rto_prepare+0xba>
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <tcp_rexmit_rto_prepare+0xbc>
 800b99a:	2300      	movs	r3, #0
 800b99c:	442b      	add	r3, r5
 800b99e:	18e2      	adds	r2, r4, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9b4:	080145c4 	.word	0x080145c4
 800b9b8:	08014c00 	.word	0x08014c00
 800b9bc:	08014618 	.word	0x08014618

0800b9c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d106      	bne.n	800b9dc <tcp_rexmit_rto_commit+0x1c>
 800b9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <tcp_rexmit_rto_commit+0x44>)
 800b9d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b9d4:	490c      	ldr	r1, [pc, #48]	; (800ba08 <tcp_rexmit_rto_commit+0x48>)
 800b9d6:	480d      	ldr	r0, [pc, #52]	; (800ba0c <tcp_rexmit_rto_commit+0x4c>)
 800b9d8:	f006 fb16 	bl	8012008 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9e2:	2bff      	cmp	r3, #255	; 0xff
 800b9e4:	d007      	beq.n	800b9f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff fc7a 	bl	800b2f0 <tcp_output>
}
 800b9fc:	bf00      	nop
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	080145c4 	.word	0x080145c4
 800ba08:	08014c24 	.word	0x08014c24
 800ba0c:	08014618 	.word	0x08014618

0800ba10 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <tcp_rexmit_rto+0x1c>
 800ba1e:	4b0a      	ldr	r3, [pc, #40]	; (800ba48 <tcp_rexmit_rto+0x38>)
 800ba20:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ba24:	4909      	ldr	r1, [pc, #36]	; (800ba4c <tcp_rexmit_rto+0x3c>)
 800ba26:	480a      	ldr	r0, [pc, #40]	; (800ba50 <tcp_rexmit_rto+0x40>)
 800ba28:	f006 faee 	bl	8012008 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff ff57 	bl	800b8e0 <tcp_rexmit_rto_prepare>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d102      	bne.n	800ba3e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff ffc1 	bl	800b9c0 <tcp_rexmit_rto_commit>
  }
}
 800ba3e:	bf00      	nop
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	080145c4 	.word	0x080145c4
 800ba4c:	08014c48 	.word	0x08014c48
 800ba50:	08014618 	.word	0x08014618

0800ba54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ba54:	b590      	push	{r4, r7, lr}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <tcp_rexmit+0x1c>
 800ba62:	4b2f      	ldr	r3, [pc, #188]	; (800bb20 <tcp_rexmit+0xcc>)
 800ba64:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ba68:	492e      	ldr	r1, [pc, #184]	; (800bb24 <tcp_rexmit+0xd0>)
 800ba6a:	482f      	ldr	r0, [pc, #188]	; (800bb28 <tcp_rexmit+0xd4>)
 800ba6c:	f006 facc 	bl	8012008 <iprintf>

  if (pcb->unacked == NULL) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d102      	bne.n	800ba7e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ba78:	f06f 0305 	mvn.w	r3, #5
 800ba7c:	e04c      	b.n	800bb18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba82:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ba84:	68b8      	ldr	r0, [r7, #8]
 800ba86:	f7ff fe2b 	bl	800b6e0 <tcp_output_segment_busy>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ba90:	f06f 0305 	mvn.w	r3, #5
 800ba94:	e040      	b.n	800bb18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	336c      	adds	r3, #108	; 0x6c
 800baa2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800baa4:	e002      	b.n	800baac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d011      	beq.n	800bad8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	4618      	mov	r0, r3
 800babe:	f7f9 fc78 	bl	80053b2 <lwip_htonl>
 800bac2:	4604      	mov	r4, r0
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f9 fc71 	bl	80053b2 <lwip_htonl>
 800bad0:	4603      	mov	r3, r0
 800bad2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	dbe6      	blt.n	800baa6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d103      	bne.n	800baf6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bafc:	2bff      	cmp	r3, #255	; 0xff
 800bafe:	d007      	beq.n	800bb10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb06:	3301      	adds	r3, #1
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd90      	pop	{r4, r7, pc}
 800bb20:	080145c4 	.word	0x080145c4
 800bb24:	08014c64 	.word	0x08014c64
 800bb28:	08014618 	.word	0x08014618

0800bb2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <tcp_rexmit_fast+0x1c>
 800bb3a:	4b2f      	ldr	r3, [pc, #188]	; (800bbf8 <tcp_rexmit_fast+0xcc>)
 800bb3c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bb40:	492e      	ldr	r1, [pc, #184]	; (800bbfc <tcp_rexmit_fast+0xd0>)
 800bb42:	482f      	ldr	r0, [pc, #188]	; (800bc00 <tcp_rexmit_fast+0xd4>)
 800bb44:	f006 fa60 	bl	8012008 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d04f      	beq.n	800bbf0 <tcp_rexmit_fast+0xc4>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8b5b      	ldrh	r3, [r3, #26]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d149      	bne.n	800bbf0 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff ff79 	bl	800ba54 <tcp_rexmit>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d143      	bne.n	800bbf0 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d208      	bcs.n	800bb8a <tcp_rexmit_fast+0x5e>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	da00      	bge.n	800bb84 <tcp_rexmit_fast+0x58>
 800bb82:	3301      	adds	r3, #1
 800bb84:	105b      	asrs	r3, r3, #1
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	e007      	b.n	800bb9a <tcp_rexmit_fast+0x6e>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	da00      	bge.n	800bb96 <tcp_rexmit_fast+0x6a>
 800bb94:	3301      	adds	r3, #1
 800bb96:	105b      	asrs	r3, r3, #1
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bba6:	461a      	mov	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d206      	bcs.n	800bbc0 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbca:	4619      	mov	r1, r3
 800bbcc:	0049      	lsls	r1, r1, #1
 800bbce:	440b      	add	r3, r1
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	8b5b      	ldrh	r3, [r3, #26]
 800bbe0:	f043 0304 	orr.w	r3, r3, #4
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	080145c4 	.word	0x080145c4
 800bbfc:	08014c7c 	.word	0x08014c7c
 800bc00:	08014618 	.word	0x08014618

0800bc04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	607b      	str	r3, [r7, #4]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	817b      	strh	r3, [r7, #10]
 800bc12:	4613      	mov	r3, r2
 800bc14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bc16:	897a      	ldrh	r2, [r7, #10]
 800bc18:	893b      	ldrh	r3, [r7, #8]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	3314      	adds	r3, #20
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc26:	4619      	mov	r1, r3
 800bc28:	2022      	movs	r0, #34	; 0x22
 800bc2a:	f7fa fc03 	bl	8006434 <pbuf_alloc>
 800bc2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d04e      	beq.n	800bcd4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	895b      	ldrh	r3, [r3, #10]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	897b      	ldrh	r3, [r7, #10]
 800bc3e:	3314      	adds	r3, #20
 800bc40:	429a      	cmp	r2, r3
 800bc42:	da06      	bge.n	800bc52 <tcp_output_alloc_header_common+0x4e>
 800bc44:	4b26      	ldr	r3, [pc, #152]	; (800bce0 <tcp_output_alloc_header_common+0xdc>)
 800bc46:	f240 7224 	movw	r2, #1828	; 0x724
 800bc4a:	4926      	ldr	r1, [pc, #152]	; (800bce4 <tcp_output_alloc_header_common+0xe0>)
 800bc4c:	4826      	ldr	r0, [pc, #152]	; (800bce8 <tcp_output_alloc_header_common+0xe4>)
 800bc4e:	f006 f9db 	bl	8012008 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bc58:	8c3b      	ldrh	r3, [r7, #32]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f9 fb94 	bl	8005388 <lwip_htons>
 800bc60:	4603      	mov	r3, r0
 800bc62:	461a      	mov	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bc68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7f9 fb8c 	bl	8005388 <lwip_htons>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f7f9 fb97 	bl	80053b2 <lwip_htonl>
 800bc84:	4602      	mov	r2, r0
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bc8a:	897b      	ldrh	r3, [r7, #10]
 800bc8c:	089b      	lsrs	r3, r3, #2
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	3305      	adds	r3, #5
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	031b      	lsls	r3, r3, #12
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f9 fb70 	bl	8005388 <lwip_htons>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	461a      	mov	r2, r3
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bcb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f9 fb68 	bl	8005388 <lwip_htons>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	461a      	mov	r2, r3
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	741a      	strb	r2, [r3, #16]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2200      	movs	r2, #0
 800bcce:	749a      	strb	r2, [r3, #18]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bcd4:	697b      	ldr	r3, [r7, #20]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	080145c4 	.word	0x080145c4
 800bce4:	08014c9c 	.word	0x08014c9c
 800bce8:	08014618 	.word	0x08014618

0800bcec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bcec:	b5b0      	push	{r4, r5, r7, lr}
 800bcee:	b08a      	sub	sp, #40	; 0x28
 800bcf0:	af04      	add	r7, sp, #16
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	607b      	str	r3, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	817b      	strh	r3, [r7, #10]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <tcp_output_alloc_header+0x26>
 800bd04:	4b15      	ldr	r3, [pc, #84]	; (800bd5c <tcp_output_alloc_header+0x70>)
 800bd06:	f240 7242 	movw	r2, #1858	; 0x742
 800bd0a:	4915      	ldr	r1, [pc, #84]	; (800bd60 <tcp_output_alloc_header+0x74>)
 800bd0c:	4815      	ldr	r0, [pc, #84]	; (800bd64 <tcp_output_alloc_header+0x78>)
 800bd0e:	f006 f97b 	bl	8012008 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	8adb      	ldrh	r3, [r3, #22]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	8b12      	ldrh	r2, [r2, #24]
 800bd1e:	68f9      	ldr	r1, [r7, #12]
 800bd20:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bd22:	893d      	ldrh	r5, [r7, #8]
 800bd24:	897c      	ldrh	r4, [r7, #10]
 800bd26:	9103      	str	r1, [sp, #12]
 800bd28:	2110      	movs	r1, #16
 800bd2a:	9102      	str	r1, [sp, #8]
 800bd2c:	9201      	str	r2, [sp, #4]
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	462a      	mov	r2, r5
 800bd34:	4621      	mov	r1, r4
 800bd36:	f7ff ff65 	bl	800bc04 <tcp_output_alloc_header_common>
 800bd3a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d006      	beq.n	800bd50 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bd4a:	441a      	add	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bd50:	697b      	ldr	r3, [r7, #20]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bdb0      	pop	{r4, r5, r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	080145c4 	.word	0x080145c4
 800bd60:	08014ccc 	.word	0x08014ccc
 800bd64:	08014618 	.word	0x08014618

0800bd68 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4611      	mov	r1, r2
 800bd74:	461a      	mov	r2, r3
 800bd76:	460b      	mov	r3, r1
 800bd78:	71fb      	strb	r3, [r7, #7]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d106      	bne.n	800bd96 <tcp_output_fill_options+0x2e>
 800bd88:	4b13      	ldr	r3, [pc, #76]	; (800bdd8 <tcp_output_fill_options+0x70>)
 800bd8a:	f240 7256 	movw	r2, #1878	; 0x756
 800bd8e:	4913      	ldr	r1, [pc, #76]	; (800bddc <tcp_output_fill_options+0x74>)
 800bd90:	4813      	ldr	r0, [pc, #76]	; (800bde0 <tcp_output_fill_options+0x78>)
 800bd92:	f006 f939 	bl	8012008 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	f103 0214 	add.w	r2, r3, #20
 800bda8:	8bfb      	ldrh	r3, [r7, #30]
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4619      	mov	r1, r3
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	440b      	add	r3, r1
 800bdb8:	4413      	add	r3, r2
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d006      	beq.n	800bdce <tcp_output_fill_options+0x66>
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <tcp_output_fill_options+0x70>)
 800bdc2:	f240 7275 	movw	r2, #1909	; 0x775
 800bdc6:	4907      	ldr	r1, [pc, #28]	; (800bde4 <tcp_output_fill_options+0x7c>)
 800bdc8:	4805      	ldr	r0, [pc, #20]	; (800bde0 <tcp_output_fill_options+0x78>)
 800bdca:	f006 f91d 	bl	8012008 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bdce:	bf00      	nop
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	080145c4 	.word	0x080145c4
 800bddc:	08014cf4 	.word	0x08014cf4
 800bde0:	08014618 	.word	0x08014618
 800bde4:	08014bec 	.word	0x08014bec

0800bde8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08a      	sub	sp, #40	; 0x28
 800bdec:	af04      	add	r7, sp, #16
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d106      	bne.n	800be0a <tcp_output_control_segment+0x22>
 800bdfc:	4b1c      	ldr	r3, [pc, #112]	; (800be70 <tcp_output_control_segment+0x88>)
 800bdfe:	f240 7287 	movw	r2, #1927	; 0x787
 800be02:	491c      	ldr	r1, [pc, #112]	; (800be74 <tcp_output_control_segment+0x8c>)
 800be04:	481c      	ldr	r0, [pc, #112]	; (800be78 <tcp_output_control_segment+0x90>)
 800be06:	f006 f8ff 	bl	8012008 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7fe ff2e 	bl	800ac70 <tcp_route>
 800be14:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800be1c:	23fc      	movs	r3, #252	; 0xfc
 800be1e:	75fb      	strb	r3, [r7, #23]
 800be20:	e01c      	b.n	800be5c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d006      	beq.n	800be36 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	7adb      	ldrb	r3, [r3, #11]
 800be2c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	7a9b      	ldrb	r3, [r3, #10]
 800be32:	757b      	strb	r3, [r7, #21]
 800be34:	e003      	b.n	800be3e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800be36:	23ff      	movs	r3, #255	; 0xff
 800be38:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800be3e:	7dba      	ldrb	r2, [r7, #22]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	2306      	movs	r3, #6
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	7d7b      	ldrb	r3, [r7, #21]
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	4613      	mov	r3, r2
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	6879      	ldr	r1, [r7, #4]
 800be52:	68b8      	ldr	r0, [r7, #8]
 800be54:	f004 f916 	bl	8010084 <ip4_output_if>
 800be58:	4603      	mov	r3, r0
 800be5a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800be5c:	68b8      	ldr	r0, [r7, #8]
 800be5e:	f7fa fdc9 	bl	80069f4 <pbuf_free>
  return err;
 800be62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	080145c4 	.word	0x080145c4
 800be74:	08014d1c 	.word	0x08014d1c
 800be78:	08014618 	.word	0x08014618

0800be7c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b08b      	sub	sp, #44	; 0x2c
 800be80:	af04      	add	r7, sp, #16
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <tcp_rst+0x22>
 800be90:	4b1f      	ldr	r3, [pc, #124]	; (800bf10 <tcp_rst+0x94>)
 800be92:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800be96:	491f      	ldr	r1, [pc, #124]	; (800bf14 <tcp_rst+0x98>)
 800be98:	481f      	ldr	r0, [pc, #124]	; (800bf18 <tcp_rst+0x9c>)
 800be9a:	f006 f8b5 	bl	8012008 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <tcp_rst+0x36>
 800bea4:	4b1a      	ldr	r3, [pc, #104]	; (800bf10 <tcp_rst+0x94>)
 800bea6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800beaa:	491c      	ldr	r1, [pc, #112]	; (800bf1c <tcp_rst+0xa0>)
 800beac:	481a      	ldr	r0, [pc, #104]	; (800bf18 <tcp_rst+0x9c>)
 800beae:	f006 f8ab 	bl	8012008 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800beb2:	2300      	movs	r3, #0
 800beb4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800beb6:	f246 0308 	movw	r3, #24584	; 0x6008
 800beba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	b29c      	uxth	r4, r3
 800bec0:	68b8      	ldr	r0, [r7, #8]
 800bec2:	f7f9 fa76 	bl	80053b2 <lwip_htonl>
 800bec6:	4602      	mov	r2, r0
 800bec8:	8abb      	ldrh	r3, [r7, #20]
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	2314      	movs	r3, #20
 800bece:	9302      	str	r3, [sp, #8]
 800bed0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	4621      	mov	r1, r4
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fe90 	bl	800bc04 <tcp_output_alloc_header_common>
 800bee4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00c      	beq.n	800bf06 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	2200      	movs	r2, #0
 800bef0:	6939      	ldr	r1, [r7, #16]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff ff38 	bl	800bd68 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	6939      	ldr	r1, [r7, #16]
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f7ff ff72 	bl	800bde8 <tcp_output_control_segment>
 800bf04:	e000      	b.n	800bf08 <tcp_rst+0x8c>
    return;
 800bf06:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bf08:	371c      	adds	r7, #28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd90      	pop	{r4, r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	080145c4 	.word	0x080145c4
 800bf14:	08014d48 	.word	0x08014d48
 800bf18:	08014618 	.word	0x08014618
 800bf1c:	08014d64 	.word	0x08014d64

0800bf20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bf20:	b590      	push	{r4, r7, lr}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <tcp_send_empty_ack+0x24>
 800bf36:	4b28      	ldr	r3, [pc, #160]	; (800bfd8 <tcp_send_empty_ack+0xb8>)
 800bf38:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bf3c:	4927      	ldr	r1, [pc, #156]	; (800bfdc <tcp_send_empty_ack+0xbc>)
 800bf3e:	4828      	ldr	r0, [pc, #160]	; (800bfe0 <tcp_send_empty_ack+0xc0>)
 800bf40:	f006 f862 	bl	8012008 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bf50:	7d7b      	ldrb	r3, [r7, #21]
 800bf52:	b29c      	uxth	r4, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f9 fa2a 	bl	80053b2 <lwip_htonl>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2200      	movs	r2, #0
 800bf62:	4621      	mov	r1, r4
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff fec1 	bl	800bcec <tcp_output_alloc_header>
 800bf6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d109      	bne.n	800bf86 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8b5b      	ldrh	r3, [r3, #26]
 800bf76:	f043 0303 	orr.w	r3, r3, #3
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bf80:	f06f 0301 	mvn.w	r3, #1
 800bf84:	e023      	b.n	800bfce <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bf86:	7dbb      	ldrb	r3, [r7, #22]
 800bf88:	7dfa      	ldrb	r2, [r7, #23]
 800bf8a:	6939      	ldr	r1, [r7, #16]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff feeb 	bl	800bd68 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3304      	adds	r3, #4
 800bf98:	6939      	ldr	r1, [r7, #16]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff ff24 	bl	800bde8 <tcp_output_control_segment>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bfa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d007      	beq.n	800bfbc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8b5b      	ldrh	r3, [r3, #26]
 800bfb0:	f043 0303 	orr.w	r3, r3, #3
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	835a      	strh	r2, [r3, #26]
 800bfba:	e006      	b.n	800bfca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	8b5b      	ldrh	r3, [r3, #26]
 800bfc0:	f023 0303 	bic.w	r3, r3, #3
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd90      	pop	{r4, r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	080145c4 	.word	0x080145c4
 800bfdc:	08014d80 	.word	0x08014d80
 800bfe0:	08014618 	.word	0x08014618

0800bfe4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bfe4:	b590      	push	{r4, r7, lr}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bfec:	2300      	movs	r3, #0
 800bfee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <tcp_keepalive+0x20>
 800bff6:	4b18      	ldr	r3, [pc, #96]	; (800c058 <tcp_keepalive+0x74>)
 800bff8:	f640 0224 	movw	r2, #2084	; 0x824
 800bffc:	4917      	ldr	r1, [pc, #92]	; (800c05c <tcp_keepalive+0x78>)
 800bffe:	4818      	ldr	r0, [pc, #96]	; (800c060 <tcp_keepalive+0x7c>)
 800c000:	f006 f802 	bl	8012008 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	b29c      	uxth	r4, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4618      	mov	r0, r3
 800c010:	f7f9 f9cf 	bl	80053b2 <lwip_htonl>
 800c014:	4603      	mov	r3, r0
 800c016:	2200      	movs	r2, #0
 800c018:	4621      	mov	r1, r4
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fe66 	bl	800bcec <tcp_output_alloc_header>
 800c020:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c02c:	e010      	b.n	800c050 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2200      	movs	r2, #0
 800c032:	6939      	ldr	r1, [r7, #16]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff fe97 	bl	800bd68 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3304      	adds	r3, #4
 800c040:	6939      	ldr	r1, [r7, #16]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff fed0 	bl	800bde8 <tcp_output_control_segment>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c050:	4618      	mov	r0, r3
 800c052:	371c      	adds	r7, #28
 800c054:	46bd      	mov	sp, r7
 800c056:	bd90      	pop	{r4, r7, pc}
 800c058:	080145c4 	.word	0x080145c4
 800c05c:	08014da0 	.word	0x08014da0
 800c060:	08014618 	.word	0x08014618

0800c064 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c064:	b590      	push	{r4, r7, lr}
 800c066:	b08b      	sub	sp, #44	; 0x2c
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c06c:	2300      	movs	r3, #0
 800c06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <tcp_zero_window_probe+0x22>
 800c078:	4b4c      	ldr	r3, [pc, #304]	; (800c1ac <tcp_zero_window_probe+0x148>)
 800c07a:	f640 024f 	movw	r2, #2127	; 0x84f
 800c07e:	494c      	ldr	r1, [pc, #304]	; (800c1b0 <tcp_zero_window_probe+0x14c>)
 800c080:	484c      	ldr	r0, [pc, #304]	; (800c1b4 <tcp_zero_window_probe+0x150>)
 800c082:	f005 ffc1 	bl	8012008 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	e086      	b.n	800c1a4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c09c:	2bff      	cmp	r3, #255	; 0xff
 800c09e:	d007      	beq.n	800c0b0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c0b0:	6a3b      	ldr	r3, [r7, #32]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	899b      	ldrh	r3, [r3, #12]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7f9 f965 	bl	8005388 <lwip_htons>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d005      	beq.n	800c0d6 <tcp_zero_window_probe+0x72>
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	891b      	ldrh	r3, [r3, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <tcp_zero_window_probe+0x72>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e000      	b.n	800c0d8 <tcp_zero_window_probe+0x74>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c0da:	7ffb      	ldrb	r3, [r7, #31]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	bf0c      	ite	eq
 800c0e0:	2301      	moveq	r3, #1
 800c0e2:	2300      	movne	r3, #0
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0ec:	b299      	uxth	r1, r3
 800c0ee:	6a3b      	ldr	r3, [r7, #32]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	8bba      	ldrh	r2, [r7, #28]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fdf8 	bl	800bcec <tcp_output_alloc_header>
 800c0fc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d102      	bne.n	800c10a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c108:	e04c      	b.n	800c1a4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c110:	7ffb      	ldrb	r3, [r7, #31]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d011      	beq.n	800c13a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	899b      	ldrh	r3, [r3, #12]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	b21b      	sxth	r3, r3
 800c11e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c122:	b21c      	sxth	r4, r3
 800c124:	2011      	movs	r0, #17
 800c126:	f7f9 f92f 	bl	8005388 <lwip_htons>
 800c12a:	4603      	mov	r3, r0
 800c12c:	b21b      	sxth	r3, r3
 800c12e:	4323      	orrs	r3, r4
 800c130:	b21b      	sxth	r3, r3
 800c132:	b29a      	uxth	r2, r3
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	819a      	strh	r2, [r3, #12]
 800c138:	e010      	b.n	800c15c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	3314      	adds	r3, #20
 800c140:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	6858      	ldr	r0, [r3, #4]
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	891a      	ldrh	r2, [r3, #8]
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	891b      	ldrh	r3, [r3, #8]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	b29b      	uxth	r3, r3
 800c154:	2201      	movs	r2, #1
 800c156:	6939      	ldr	r1, [r7, #16]
 800c158:	f7fa fe52 	bl	8006e00 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4618      	mov	r0, r3
 800c164:	f7f9 f925 	bl	80053b2 <lwip_htonl>
 800c168:	4603      	mov	r3, r0
 800c16a:	3301      	adds	r3, #1
 800c16c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	da02      	bge.n	800c180 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c184:	2200      	movs	r2, #0
 800c186:	69b9      	ldr	r1, [r7, #24]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff fded 	bl	800bd68 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	69b9      	ldr	r1, [r7, #24]
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fe26 	bl	800bde8 <tcp_output_control_segment>
 800c19c:	4603      	mov	r3, r0
 800c19e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c1a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	372c      	adds	r7, #44	; 0x2c
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}
 800c1ac:	080145c4 	.word	0x080145c4
 800c1b0:	08014dbc 	.word	0x08014dbc
 800c1b4:	08014618 	.word	0x08014618

0800c1b8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c1c0:	f7fa ff0c 	bl	8006fdc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c1c4:	4b0a      	ldr	r3, [pc, #40]	; (800c1f0 <tcpip_tcp_timer+0x38>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <tcpip_tcp_timer+0x1c>
 800c1cc:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <tcpip_tcp_timer+0x3c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d005      	beq.n	800c1e0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4908      	ldr	r1, [pc, #32]	; (800c1f8 <tcpip_tcp_timer+0x40>)
 800c1d8:	20fa      	movs	r0, #250	; 0xfa
 800c1da:	f000 f8f1 	bl	800c3c0 <sys_timeout>
 800c1de:	e002      	b.n	800c1e6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <tcpip_tcp_timer+0x44>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
  }
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	200076d4 	.word	0x200076d4
 800c1f4:	200076e4 	.word	0x200076e4
 800c1f8:	0800c1b9 	.word	0x0800c1b9
 800c1fc:	20003e7c 	.word	0x20003e7c

0800c200 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <tcp_timer_needed+0x30>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10f      	bne.n	800c22c <tcp_timer_needed+0x2c>
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <tcp_timer_needed+0x34>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d103      	bne.n	800c21c <tcp_timer_needed+0x1c>
 800c214:	4b08      	ldr	r3, [pc, #32]	; (800c238 <tcp_timer_needed+0x38>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d007      	beq.n	800c22c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c21c:	4b04      	ldr	r3, [pc, #16]	; (800c230 <tcp_timer_needed+0x30>)
 800c21e:	2201      	movs	r2, #1
 800c220:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c222:	2200      	movs	r2, #0
 800c224:	4905      	ldr	r1, [pc, #20]	; (800c23c <tcp_timer_needed+0x3c>)
 800c226:	20fa      	movs	r0, #250	; 0xfa
 800c228:	f000 f8ca 	bl	800c3c0 <sys_timeout>
  }
}
 800c22c:	bf00      	nop
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	20003e7c 	.word	0x20003e7c
 800c234:	200076d4 	.word	0x200076d4
 800c238:	200076e4 	.word	0x200076e4
 800c23c:	0800c1b9 	.word	0x0800c1b9

0800c240 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c24c:	200a      	movs	r0, #10
 800c24e:	f7f9 fd51 	bl	8005cf4 <memp_malloc>
 800c252:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d109      	bne.n	800c26e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d151      	bne.n	800c304 <sys_timeout_abs+0xc4>
 800c260:	4b2a      	ldr	r3, [pc, #168]	; (800c30c <sys_timeout_abs+0xcc>)
 800c262:	22be      	movs	r2, #190	; 0xbe
 800c264:	492a      	ldr	r1, [pc, #168]	; (800c310 <sys_timeout_abs+0xd0>)
 800c266:	482b      	ldr	r0, [pc, #172]	; (800c314 <sys_timeout_abs+0xd4>)
 800c268:	f005 fece 	bl	8012008 <iprintf>
    return;
 800c26c:	e04a      	b.n	800c304 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c286:	4b24      	ldr	r3, [pc, #144]	; (800c318 <sys_timeout_abs+0xd8>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d103      	bne.n	800c296 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c28e:	4a22      	ldr	r2, [pc, #136]	; (800c318 <sys_timeout_abs+0xd8>)
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6013      	str	r3, [r2, #0]
    return;
 800c294:	e037      	b.n	800c306 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	685a      	ldr	r2, [r3, #4]
 800c29a:	4b1f      	ldr	r3, [pc, #124]	; (800c318 <sys_timeout_abs+0xd8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	0fdb      	lsrs	r3, r3, #31
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d007      	beq.n	800c2be <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c2ae:	4b1a      	ldr	r3, [pc, #104]	; (800c318 <sys_timeout_abs+0xd8>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c2b6:	4a18      	ldr	r2, [pc, #96]	; (800c318 <sys_timeout_abs+0xd8>)
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	e023      	b.n	800c306 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c2be:	4b16      	ldr	r3, [pc, #88]	; (800c318 <sys_timeout_abs+0xd8>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	e01a      	b.n	800c2fc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00b      	beq.n	800c2e6 <sys_timeout_abs+0xa6>
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	0fdb      	lsrs	r3, r3, #31
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d007      	beq.n	800c2f6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	601a      	str	r2, [r3, #0]
        break;
 800c2f4:	e007      	b.n	800c306 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e1      	bne.n	800c2c6 <sys_timeout_abs+0x86>
 800c302:	e000      	b.n	800c306 <sys_timeout_abs+0xc6>
    return;
 800c304:	bf00      	nop
      }
    }
  }
}
 800c306:	3718      	adds	r7, #24
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	08014de0 	.word	0x08014de0
 800c310:	08014e14 	.word	0x08014e14
 800c314:	08014e54 	.word	0x08014e54
 800c318:	20003e74 	.word	0x20003e74

0800c31c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	4798      	blx	r3

  now = sys_now();
 800c32e:	f005 fb19 	bl	8011964 <sys_now>
 800c332:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <lwip_cyclic_timer+0x5c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4413      	add	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	0fdb      	lsrs	r3, r3, #31
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d009      	beq.n	800c366 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	4413      	add	r3, r2
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	4907      	ldr	r1, [pc, #28]	; (800c37c <lwip_cyclic_timer+0x60>)
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff ff6e 	bl	800c240 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c364:	e004      	b.n	800c370 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	4904      	ldr	r1, [pc, #16]	; (800c37c <lwip_cyclic_timer+0x60>)
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff ff68 	bl	800c240 <sys_timeout_abs>
}
 800c370:	bf00      	nop
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20003e78 	.word	0x20003e78
 800c37c:	0800c31d 	.word	0x0800c31d

0800c380 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c386:	2301      	movs	r3, #1
 800c388:	607b      	str	r3, [r7, #4]
 800c38a:	e00e      	b.n	800c3aa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c38c:	4a0a      	ldr	r2, [pc, #40]	; (800c3b8 <sys_timeouts_init+0x38>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	4a07      	ldr	r2, [pc, #28]	; (800c3b8 <sys_timeouts_init+0x38>)
 800c39a:	4413      	add	r3, r2
 800c39c:	461a      	mov	r2, r3
 800c39e:	4907      	ldr	r1, [pc, #28]	; (800c3bc <sys_timeouts_init+0x3c>)
 800c3a0:	f000 f80e 	bl	800c3c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	607b      	str	r3, [r7, #4]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d9ed      	bls.n	800c38c <sys_timeouts_init+0xc>
  }
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	08015e10 	.word	0x08015e10
 800c3bc:	0800c31d 	.word	0x0800c31d

0800c3c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d2:	d306      	bcc.n	800c3e2 <sys_timeout+0x22>
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <sys_timeout+0x40>)
 800c3d6:	f240 1229 	movw	r2, #297	; 0x129
 800c3da:	490a      	ldr	r1, [pc, #40]	; (800c404 <sys_timeout+0x44>)
 800c3dc:	480a      	ldr	r0, [pc, #40]	; (800c408 <sys_timeout+0x48>)
 800c3de:	f005 fe13 	bl	8012008 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c3e2:	f005 fabf 	bl	8011964 <sys_now>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	68b9      	ldr	r1, [r7, #8]
 800c3f2:	6978      	ldr	r0, [r7, #20]
 800c3f4:	f7ff ff24 	bl	800c240 <sys_timeout_abs>
#endif
}
 800c3f8:	bf00      	nop
 800c3fa:	3718      	adds	r7, #24
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	08014de0 	.word	0x08014de0
 800c404:	08014e7c 	.word	0x08014e7c
 800c408:	08014e54 	.word	0x08014e54

0800c40c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c412:	f005 faa7 	bl	8011964 <sys_now>
 800c416:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c418:	4b17      	ldr	r3, [pc, #92]	; (800c478 <sys_check_timeouts+0x6c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d022      	beq.n	800c46a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	0fdb      	lsrs	r3, r3, #31
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b00      	cmp	r3, #0
 800c436:	d11a      	bne.n	800c46e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <sys_check_timeouts+0x6c>)
 800c43e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4a0a      	ldr	r2, [pc, #40]	; (800c47c <sys_check_timeouts+0x70>)
 800c452:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c454:	68b9      	ldr	r1, [r7, #8]
 800c456:	200a      	movs	r0, #10
 800c458:	f7f9 fc9e 	bl	8005d98 <memp_free>
    if (handler != NULL) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0da      	beq.n	800c418 <sys_check_timeouts+0xc>
      handler(arg);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6838      	ldr	r0, [r7, #0]
 800c466:	4798      	blx	r3
  do {
 800c468:	e7d6      	b.n	800c418 <sys_check_timeouts+0xc>
      return;
 800c46a:	bf00      	nop
 800c46c:	e000      	b.n	800c470 <sys_check_timeouts+0x64>
      return;
 800c46e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20003e74 	.word	0x20003e74
 800c47c:	20003e78 	.word	0x20003e78

0800c480 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c486:	4b16      	ldr	r3, [pc, #88]	; (800c4e0 <sys_timeouts_sleeptime+0x60>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c492:	e020      	b.n	800c4d6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800c494:	f005 fa66 	bl	8011964 <sys_now>
 800c498:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c49a:	4b11      	ldr	r3, [pc, #68]	; (800c4e0 <sys_timeouts_sleeptime+0x60>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	0fdb      	lsrs	r3, r3, #31
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <sys_timeouts_sleeptime+0x34>
    return 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e010      	b.n	800c4d6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800c4b4:	4b0a      	ldr	r3, [pc, #40]	; (800c4e0 <sys_timeouts_sleeptime+0x60>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	da06      	bge.n	800c4d4 <sys_timeouts_sleeptime+0x54>
 800c4c6:	4b07      	ldr	r3, [pc, #28]	; (800c4e4 <sys_timeouts_sleeptime+0x64>)
 800c4c8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c4cc:	4906      	ldr	r1, [pc, #24]	; (800c4e8 <sys_timeouts_sleeptime+0x68>)
 800c4ce:	4807      	ldr	r0, [pc, #28]	; (800c4ec <sys_timeouts_sleeptime+0x6c>)
 800c4d0:	f005 fd9a 	bl	8012008 <iprintf>
    return ret;
 800c4d4:	683b      	ldr	r3, [r7, #0]
  }
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20003e74 	.word	0x20003e74
 800c4e4:	08014de0 	.word	0x08014de0
 800c4e8:	08014eb4 	.word	0x08014eb4
 800c4ec:	08014e54 	.word	0x08014e54

0800c4f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c4f4:	f005 fda0 	bl	8012038 <rand>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c500:	b29b      	uxth	r3, r3
 800c502:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c506:	b29a      	uxth	r2, r3
 800c508:	4b01      	ldr	r3, [pc, #4]	; (800c510 <udp_init+0x20>)
 800c50a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c50c:	bf00      	nop
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000014 	.word	0x20000014

0800c514 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c51e:	4b17      	ldr	r3, [pc, #92]	; (800c57c <udp_new_port+0x68>)
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	b291      	uxth	r1, r2
 800c526:	4a15      	ldr	r2, [pc, #84]	; (800c57c <udp_new_port+0x68>)
 800c528:	8011      	strh	r1, [r2, #0]
 800c52a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c52e:	4293      	cmp	r3, r2
 800c530:	d103      	bne.n	800c53a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c532:	4b12      	ldr	r3, [pc, #72]	; (800c57c <udp_new_port+0x68>)
 800c534:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c538:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c53a:	4b11      	ldr	r3, [pc, #68]	; (800c580 <udp_new_port+0x6c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	e011      	b.n	800c566 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	8a5a      	ldrh	r2, [r3, #18]
 800c546:	4b0d      	ldr	r3, [pc, #52]	; (800c57c <udp_new_port+0x68>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d108      	bne.n	800c560 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	3301      	adds	r3, #1
 800c552:	80fb      	strh	r3, [r7, #6]
 800c554:	88fb      	ldrh	r3, [r7, #6]
 800c556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c55a:	d3e0      	bcc.n	800c51e <udp_new_port+0xa>
        return 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	e007      	b.n	800c570 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	603b      	str	r3, [r7, #0]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1ea      	bne.n	800c542 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c56c:	4b03      	ldr	r3, [pc, #12]	; (800c57c <udp_new_port+0x68>)
 800c56e:	881b      	ldrh	r3, [r3, #0]
}
 800c570:	4618      	mov	r0, r3
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	20000014 	.word	0x20000014
 800c580:	200076ec 	.word	0x200076ec

0800c584 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	4613      	mov	r3, r2
 800c590:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d105      	bne.n	800c5a4 <udp_input_local_match+0x20>
 800c598:	4b27      	ldr	r3, [pc, #156]	; (800c638 <udp_input_local_match+0xb4>)
 800c59a:	2287      	movs	r2, #135	; 0x87
 800c59c:	4927      	ldr	r1, [pc, #156]	; (800c63c <udp_input_local_match+0xb8>)
 800c59e:	4828      	ldr	r0, [pc, #160]	; (800c640 <udp_input_local_match+0xbc>)
 800c5a0:	f005 fd32 	bl	8012008 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d105      	bne.n	800c5b6 <udp_input_local_match+0x32>
 800c5aa:	4b23      	ldr	r3, [pc, #140]	; (800c638 <udp_input_local_match+0xb4>)
 800c5ac:	2288      	movs	r2, #136	; 0x88
 800c5ae:	4925      	ldr	r1, [pc, #148]	; (800c644 <udp_input_local_match+0xc0>)
 800c5b0:	4823      	ldr	r0, [pc, #140]	; (800c640 <udp_input_local_match+0xbc>)
 800c5b2:	f005 fd29 	bl	8012008 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	7a1b      	ldrb	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	7a1a      	ldrb	r2, [r3, #8]
 800c5c2:	4b21      	ldr	r3, [pc, #132]	; (800c648 <udp_input_local_match+0xc4>)
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d001      	beq.n	800c5d6 <udp_input_local_match+0x52>
    return 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	e02b      	b.n	800c62e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d018      	beq.n	800c60e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d013      	beq.n	800c60a <udp_input_local_match+0x86>
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00f      	beq.n	800c60a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c5ea:	4b17      	ldr	r3, [pc, #92]	; (800c648 <udp_input_local_match+0xc4>)
 800c5ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f2:	d00a      	beq.n	800c60a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	4b13      	ldr	r3, [pc, #76]	; (800c648 <udp_input_local_match+0xc4>)
 800c5fa:	695b      	ldr	r3, [r3, #20]
 800c5fc:	405a      	eors	r2, r3
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	3308      	adds	r3, #8
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c606:	2b00      	cmp	r3, #0
 800c608:	d110      	bne.n	800c62c <udp_input_local_match+0xa8>
          return 1;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e00f      	b.n	800c62e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d009      	beq.n	800c628 <udp_input_local_match+0xa4>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d005      	beq.n	800c628 <udp_input_local_match+0xa4>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	4b09      	ldr	r3, [pc, #36]	; (800c648 <udp_input_local_match+0xc4>)
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	429a      	cmp	r2, r3
 800c626:	d101      	bne.n	800c62c <udp_input_local_match+0xa8>
        return 1;
 800c628:	2301      	movs	r3, #1
 800c62a:	e000      	b.n	800c62e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	08014ec8 	.word	0x08014ec8
 800c63c:	08014ef8 	.word	0x08014ef8
 800c640:	08014f1c 	.word	0x08014f1c
 800c644:	08014f44 	.word	0x08014f44
 800c648:	20003fa0 	.word	0x20003fa0

0800c64c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c64c:	b590      	push	{r4, r7, lr}
 800c64e:	b08d      	sub	sp, #52	; 0x34
 800c650:	af02      	add	r7, sp, #8
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d105      	bne.n	800c66c <udp_input+0x20>
 800c660:	4b7c      	ldr	r3, [pc, #496]	; (800c854 <udp_input+0x208>)
 800c662:	22cf      	movs	r2, #207	; 0xcf
 800c664:	497c      	ldr	r1, [pc, #496]	; (800c858 <udp_input+0x20c>)
 800c666:	487d      	ldr	r0, [pc, #500]	; (800c85c <udp_input+0x210>)
 800c668:	f005 fcce 	bl	8012008 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d105      	bne.n	800c67e <udp_input+0x32>
 800c672:	4b78      	ldr	r3, [pc, #480]	; (800c854 <udp_input+0x208>)
 800c674:	22d0      	movs	r2, #208	; 0xd0
 800c676:	497a      	ldr	r1, [pc, #488]	; (800c860 <udp_input+0x214>)
 800c678:	4878      	ldr	r0, [pc, #480]	; (800c85c <udp_input+0x210>)
 800c67a:	f005 fcc5 	bl	8012008 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	895b      	ldrh	r3, [r3, #10]
 800c682:	2b07      	cmp	r3, #7
 800c684:	d803      	bhi.n	800c68e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7fa f9b4 	bl	80069f4 <pbuf_free>
    goto end;
 800c68c:	e0de      	b.n	800c84c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c694:	4b73      	ldr	r3, [pc, #460]	; (800c864 <udp_input+0x218>)
 800c696:	695a      	ldr	r2, [r3, #20]
 800c698:	4b72      	ldr	r3, [pc, #456]	; (800c864 <udp_input+0x218>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4619      	mov	r1, r3
 800c69e:	4610      	mov	r0, r2
 800c6a0:	f003 fdc8 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f8 fe6a 	bl	8005388 <lwip_htons>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	885b      	ldrh	r3, [r3, #2]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f8 fe62 	bl	8005388 <lwip_htons>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6d4:	4b64      	ldr	r3, [pc, #400]	; (800c868 <udp_input+0x21c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6da:	e054      	b.n	800c786 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	8a5b      	ldrh	r3, [r3, #18]
 800c6e0:	89fa      	ldrh	r2, [r7, #14]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d14a      	bne.n	800c77c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c6e6:	7cfb      	ldrb	r3, [r7, #19]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6ee:	f7ff ff49 	bl	800c584 <udp_input_local_match>
 800c6f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d041      	beq.n	800c77c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fa:	7c1b      	ldrb	r3, [r3, #16]
 800c6fc:	f003 0304 	and.w	r3, r3, #4
 800c700:	2b00      	cmp	r3, #0
 800c702:	d11d      	bne.n	800c740 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d102      	bne.n	800c710 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	61fb      	str	r3, [r7, #28]
 800c70e:	e017      	b.n	800c740 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c710:	7cfb      	ldrb	r3, [r7, #19]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d014      	beq.n	800c740 <udp_input+0xf4>
 800c716:	4b53      	ldr	r3, [pc, #332]	; (800c864 <udp_input+0x218>)
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c71e:	d10f      	bne.n	800c740 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	3304      	adds	r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d008      	beq.n	800c740 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	3304      	adds	r3, #4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d101      	bne.n	800c740 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	8a9b      	ldrh	r3, [r3, #20]
 800c744:	8a3a      	ldrh	r2, [r7, #16]
 800c746:	429a      	cmp	r2, r3
 800c748:	d118      	bne.n	800c77c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	4b43      	ldr	r3, [pc, #268]	; (800c864 <udp_input+0x218>)
 800c758:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d10e      	bne.n	800c77c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d014      	beq.n	800c78e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	68da      	ldr	r2, [r3, #12]
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c76c:	4b3e      	ldr	r3, [pc, #248]	; (800c868 <udp_input+0x21c>)
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c774:	4a3c      	ldr	r2, [pc, #240]	; (800c868 <udp_input+0x21c>)
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c77a:	e008      	b.n	800c78e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	627b      	str	r3, [r7, #36]	; 0x24
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1a7      	bne.n	800c6dc <udp_input+0x90>
 800c78c:	e000      	b.n	800c790 <udp_input+0x144>
        break;
 800c78e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <udp_input+0x15a>
    for_us = 1;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	76fb      	strb	r3, [r7, #27]
 800c7a4:	e00a      	b.n	800c7bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	4b2d      	ldr	r3, [pc, #180]	; (800c864 <udp_input+0x218>)
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	bf0c      	ite	eq
 800c7b4:	2301      	moveq	r3, #1
 800c7b6:	2300      	movne	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c7bc:	7efb      	ldrb	r3, [r7, #27]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d041      	beq.n	800c846 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c7c2:	2108      	movs	r1, #8
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7fa f88f 	bl	80068e8 <pbuf_remove_header>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00a      	beq.n	800c7e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c7d0:	4b20      	ldr	r3, [pc, #128]	; (800c854 <udp_input+0x208>)
 800c7d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c7d6:	4925      	ldr	r1, [pc, #148]	; (800c86c <udp_input+0x220>)
 800c7d8:	4820      	ldr	r0, [pc, #128]	; (800c85c <udp_input+0x210>)
 800c7da:	f005 fc15 	bl	8012008 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7fa f908 	bl	80069f4 <pbuf_free>
      goto end;
 800c7e4:	e032      	b.n	800c84c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d012      	beq.n	800c812 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00a      	beq.n	800c80a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	699c      	ldr	r4, [r3, #24]
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	69d8      	ldr	r0, [r3, #28]
 800c7fc:	8a3b      	ldrh	r3, [r7, #16]
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	4b1b      	ldr	r3, [pc, #108]	; (800c870 <udp_input+0x224>)
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c806:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c808:	e021      	b.n	800c84e <udp_input+0x202>
        pbuf_free(p);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7fa f8f2 	bl	80069f4 <pbuf_free>
        goto end;
 800c810:	e01c      	b.n	800c84c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c812:	7cfb      	ldrb	r3, [r7, #19]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d112      	bne.n	800c83e <udp_input+0x1f2>
 800c818:	4b12      	ldr	r3, [pc, #72]	; (800c864 <udp_input+0x218>)
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c820:	2be0      	cmp	r3, #224	; 0xe0
 800c822:	d00c      	beq.n	800c83e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c824:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <udp_input+0x218>)
 800c826:	899b      	ldrh	r3, [r3, #12]
 800c828:	3308      	adds	r3, #8
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	b21b      	sxth	r3, r3
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7fa f8cc 	bl	80069ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c836:	2103      	movs	r1, #3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f003 f9bf 	bl	800fbbc <icmp_dest_unreach>
      pbuf_free(p);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7fa f8d8 	bl	80069f4 <pbuf_free>
  return;
 800c844:	e003      	b.n	800c84e <udp_input+0x202>
    pbuf_free(p);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7fa f8d4 	bl	80069f4 <pbuf_free>
  return;
 800c84c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c84e:	372c      	adds	r7, #44	; 0x2c
 800c850:	46bd      	mov	sp, r7
 800c852:	bd90      	pop	{r4, r7, pc}
 800c854:	08014ec8 	.word	0x08014ec8
 800c858:	08014f6c 	.word	0x08014f6c
 800c85c:	08014f1c 	.word	0x08014f1c
 800c860:	08014f84 	.word	0x08014f84
 800c864:	20003fa0 	.word	0x20003fa0
 800c868:	200076ec 	.word	0x200076ec
 800c86c:	08014fa0 	.word	0x08014fa0
 800c870:	20003fb0 	.word	0x20003fb0

0800c874 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af02      	add	r7, sp, #8
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d109      	bne.n	800c89c <udp_sendto_if+0x28>
 800c888:	4b2e      	ldr	r3, [pc, #184]	; (800c944 <udp_sendto_if+0xd0>)
 800c88a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c88e:	492e      	ldr	r1, [pc, #184]	; (800c948 <udp_sendto_if+0xd4>)
 800c890:	482e      	ldr	r0, [pc, #184]	; (800c94c <udp_sendto_if+0xd8>)
 800c892:	f005 fbb9 	bl	8012008 <iprintf>
 800c896:	f06f 030f 	mvn.w	r3, #15
 800c89a:	e04f      	b.n	800c93c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d109      	bne.n	800c8b6 <udp_sendto_if+0x42>
 800c8a2:	4b28      	ldr	r3, [pc, #160]	; (800c944 <udp_sendto_if+0xd0>)
 800c8a4:	f240 2281 	movw	r2, #641	; 0x281
 800c8a8:	4929      	ldr	r1, [pc, #164]	; (800c950 <udp_sendto_if+0xdc>)
 800c8aa:	4828      	ldr	r0, [pc, #160]	; (800c94c <udp_sendto_if+0xd8>)
 800c8ac:	f005 fbac 	bl	8012008 <iprintf>
 800c8b0:	f06f 030f 	mvn.w	r3, #15
 800c8b4:	e042      	b.n	800c93c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d109      	bne.n	800c8d0 <udp_sendto_if+0x5c>
 800c8bc:	4b21      	ldr	r3, [pc, #132]	; (800c944 <udp_sendto_if+0xd0>)
 800c8be:	f240 2282 	movw	r2, #642	; 0x282
 800c8c2:	4924      	ldr	r1, [pc, #144]	; (800c954 <udp_sendto_if+0xe0>)
 800c8c4:	4821      	ldr	r0, [pc, #132]	; (800c94c <udp_sendto_if+0xd8>)
 800c8c6:	f005 fb9f 	bl	8012008 <iprintf>
 800c8ca:	f06f 030f 	mvn.w	r3, #15
 800c8ce:	e035      	b.n	800c93c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d109      	bne.n	800c8ea <udp_sendto_if+0x76>
 800c8d6:	4b1b      	ldr	r3, [pc, #108]	; (800c944 <udp_sendto_if+0xd0>)
 800c8d8:	f240 2283 	movw	r2, #643	; 0x283
 800c8dc:	491e      	ldr	r1, [pc, #120]	; (800c958 <udp_sendto_if+0xe4>)
 800c8de:	481b      	ldr	r0, [pc, #108]	; (800c94c <udp_sendto_if+0xd8>)
 800c8e0:	f005 fb92 	bl	8012008 <iprintf>
 800c8e4:	f06f 030f 	mvn.w	r3, #15
 800c8e8:	e028      	b.n	800c93c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <udp_sendto_if+0x90>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c900:	2be0      	cmp	r3, #224	; 0xe0
 800c902:	d103      	bne.n	800c90c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	3304      	adds	r3, #4
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e00b      	b.n	800c924 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	3304      	adds	r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d002      	beq.n	800c920 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c91a:	f06f 0303 	mvn.w	r3, #3
 800c91e:	e00d      	b.n	800c93c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c924:	887a      	ldrh	r2, [r7, #2]
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	4613      	mov	r3, r2
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 f811 	bl	800c95c <udp_sendto_if_src>
 800c93a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3718      	adds	r7, #24
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	08014ec8 	.word	0x08014ec8
 800c948:	0801503c 	.word	0x0801503c
 800c94c:	08014f1c 	.word	0x08014f1c
 800c950:	08015058 	.word	0x08015058
 800c954:	08015074 	.word	0x08015074
 800c958:	08015094 	.word	0x08015094

0800c95c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08c      	sub	sp, #48	; 0x30
 800c960:	af04      	add	r7, sp, #16
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
 800c968:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <udp_sendto_if_src+0x28>
 800c970:	4b65      	ldr	r3, [pc, #404]	; (800cb08 <udp_sendto_if_src+0x1ac>)
 800c972:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c976:	4965      	ldr	r1, [pc, #404]	; (800cb0c <udp_sendto_if_src+0x1b0>)
 800c978:	4865      	ldr	r0, [pc, #404]	; (800cb10 <udp_sendto_if_src+0x1b4>)
 800c97a:	f005 fb45 	bl	8012008 <iprintf>
 800c97e:	f06f 030f 	mvn.w	r3, #15
 800c982:	e0bc      	b.n	800cafe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d109      	bne.n	800c99e <udp_sendto_if_src+0x42>
 800c98a:	4b5f      	ldr	r3, [pc, #380]	; (800cb08 <udp_sendto_if_src+0x1ac>)
 800c98c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c990:	4960      	ldr	r1, [pc, #384]	; (800cb14 <udp_sendto_if_src+0x1b8>)
 800c992:	485f      	ldr	r0, [pc, #380]	; (800cb10 <udp_sendto_if_src+0x1b4>)
 800c994:	f005 fb38 	bl	8012008 <iprintf>
 800c998:	f06f 030f 	mvn.w	r3, #15
 800c99c:	e0af      	b.n	800cafe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d109      	bne.n	800c9b8 <udp_sendto_if_src+0x5c>
 800c9a4:	4b58      	ldr	r3, [pc, #352]	; (800cb08 <udp_sendto_if_src+0x1ac>)
 800c9a6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c9aa:	495b      	ldr	r1, [pc, #364]	; (800cb18 <udp_sendto_if_src+0x1bc>)
 800c9ac:	4858      	ldr	r0, [pc, #352]	; (800cb10 <udp_sendto_if_src+0x1b4>)
 800c9ae:	f005 fb2b 	bl	8012008 <iprintf>
 800c9b2:	f06f 030f 	mvn.w	r3, #15
 800c9b6:	e0a2      	b.n	800cafe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d109      	bne.n	800c9d2 <udp_sendto_if_src+0x76>
 800c9be:	4b52      	ldr	r3, [pc, #328]	; (800cb08 <udp_sendto_if_src+0x1ac>)
 800c9c0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c9c4:	4955      	ldr	r1, [pc, #340]	; (800cb1c <udp_sendto_if_src+0x1c0>)
 800c9c6:	4852      	ldr	r0, [pc, #328]	; (800cb10 <udp_sendto_if_src+0x1b4>)
 800c9c8:	f005 fb1e 	bl	8012008 <iprintf>
 800c9cc:	f06f 030f 	mvn.w	r3, #15
 800c9d0:	e095      	b.n	800cafe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d109      	bne.n	800c9ec <udp_sendto_if_src+0x90>
 800c9d8:	4b4b      	ldr	r3, [pc, #300]	; (800cb08 <udp_sendto_if_src+0x1ac>)
 800c9da:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c9de:	4950      	ldr	r1, [pc, #320]	; (800cb20 <udp_sendto_if_src+0x1c4>)
 800c9e0:	484b      	ldr	r0, [pc, #300]	; (800cb10 <udp_sendto_if_src+0x1b4>)
 800c9e2:	f005 fb11 	bl	8012008 <iprintf>
 800c9e6:	f06f 030f 	mvn.w	r3, #15
 800c9ea:	e088      	b.n	800cafe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	8a5b      	ldrh	r3, [r3, #18]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10f      	bne.n	800ca14 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c9f4:	68f9      	ldr	r1, [r7, #12]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	8a5b      	ldrh	r3, [r3, #18]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f893 	bl	800cb28 <udp_bind>
 800ca02:	4603      	mov	r3, r0
 800ca04:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ca06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ca0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca12:	e074      	b.n	800cafe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	891b      	ldrh	r3, [r3, #8]
 800ca18:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d902      	bls.n	800ca26 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ca20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca24:	e06b      	b.n	800cafe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ca26:	2108      	movs	r1, #8
 800ca28:	68b8      	ldr	r0, [r7, #8]
 800ca2a:	f7f9 ff4d 	bl	80068c8 <pbuf_add_header>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d015      	beq.n	800ca60 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ca34:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca38:	2108      	movs	r1, #8
 800ca3a:	2022      	movs	r0, #34	; 0x22
 800ca3c:	f7f9 fcfa 	bl	8006434 <pbuf_alloc>
 800ca40:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ca48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca4c:	e057      	b.n	800cafe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	891b      	ldrh	r3, [r3, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d006      	beq.n	800ca64 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	69f8      	ldr	r0, [r7, #28]
 800ca5a:	f7fa f8ef 	bl	8006c3c <pbuf_chain>
 800ca5e:	e001      	b.n	800ca64 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	895b      	ldrh	r3, [r3, #10]
 800ca68:	2b07      	cmp	r3, #7
 800ca6a:	d806      	bhi.n	800ca7a <udp_sendto_if_src+0x11e>
 800ca6c:	4b26      	ldr	r3, [pc, #152]	; (800cb08 <udp_sendto_if_src+0x1ac>)
 800ca6e:	f240 320e 	movw	r2, #782	; 0x30e
 800ca72:	492c      	ldr	r1, [pc, #176]	; (800cb24 <udp_sendto_if_src+0x1c8>)
 800ca74:	4826      	ldr	r0, [pc, #152]	; (800cb10 <udp_sendto_if_src+0x1b4>)
 800ca76:	f005 fac7 	bl	8012008 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	8a5b      	ldrh	r3, [r3, #18]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7f8 fc7f 	bl	8005388 <lwip_htons>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ca92:	887b      	ldrh	r3, [r7, #2]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7f8 fc77 	bl	8005388 <lwip_htons>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2200      	movs	r2, #0
 800caa6:	719a      	strb	r2, [r3, #6]
 800caa8:	2200      	movs	r2, #0
 800caaa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	891b      	ldrh	r3, [r3, #8]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7f8 fc69 	bl	8005388 <lwip_htons>
 800cab6:	4603      	mov	r3, r0
 800cab8:	461a      	mov	r2, r3
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800cabe:	2311      	movs	r3, #17
 800cac0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	7adb      	ldrb	r3, [r3, #11]
 800cac6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	7a9b      	ldrb	r3, [r3, #10]
 800cacc:	7cb9      	ldrb	r1, [r7, #18]
 800cace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cad0:	9202      	str	r2, [sp, #8]
 800cad2:	7cfa      	ldrb	r2, [r7, #19]
 800cad4:	9201      	str	r2, [sp, #4]
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	460b      	mov	r3, r1
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cade:	69f8      	ldr	r0, [r7, #28]
 800cae0:	f003 fafa 	bl	80100d8 <ip4_output_if_src>
 800cae4:	4603      	mov	r3, r0
 800cae6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800cae8:	69fa      	ldr	r2, [r7, #28]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	429a      	cmp	r2, r3
 800caee:	d004      	beq.n	800cafa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800caf0:	69f8      	ldr	r0, [r7, #28]
 800caf2:	f7f9 ff7f 	bl	80069f4 <pbuf_free>
    q = NULL;
 800caf6:	2300      	movs	r3, #0
 800caf8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800cafa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3720      	adds	r7, #32
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	08014ec8 	.word	0x08014ec8
 800cb0c:	080150b4 	.word	0x080150b4
 800cb10:	08014f1c 	.word	0x08014f1c
 800cb14:	080150d4 	.word	0x080150d4
 800cb18:	080150f4 	.word	0x080150f4
 800cb1c:	08015118 	.word	0x08015118
 800cb20:	0801513c 	.word	0x0801513c
 800cb24:	08015160 	.word	0x08015160

0800cb28 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800cb3c:	4b39      	ldr	r3, [pc, #228]	; (800cc24 <udp_bind+0xfc>)
 800cb3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d109      	bne.n	800cb5a <udp_bind+0x32>
 800cb46:	4b38      	ldr	r3, [pc, #224]	; (800cc28 <udp_bind+0x100>)
 800cb48:	f240 32b7 	movw	r2, #951	; 0x3b7
 800cb4c:	4937      	ldr	r1, [pc, #220]	; (800cc2c <udp_bind+0x104>)
 800cb4e:	4838      	ldr	r0, [pc, #224]	; (800cc30 <udp_bind+0x108>)
 800cb50:	f005 fa5a 	bl	8012008 <iprintf>
 800cb54:	f06f 030f 	mvn.w	r3, #15
 800cb58:	e060      	b.n	800cc1c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb5e:	4b35      	ldr	r3, [pc, #212]	; (800cc34 <udp_bind+0x10c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	617b      	str	r3, [r7, #20]
 800cb64:	e009      	b.n	800cb7a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d102      	bne.n	800cb74 <udp_bind+0x4c>
      rebind = 1;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	74fb      	strb	r3, [r7, #19]
      break;
 800cb72:	e005      	b.n	800cb80 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	617b      	str	r3, [r7, #20]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1f2      	bne.n	800cb66 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <udp_bind+0x72>
    port = udp_new_port();
 800cb86:	f7ff fcc5 	bl	800c514 <udp_new_port>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cb8e:	88fb      	ldrh	r3, [r7, #6]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d12c      	bne.n	800cbee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800cb94:	f06f 0307 	mvn.w	r3, #7
 800cb98:	e040      	b.n	800cc1c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb9a:	4b26      	ldr	r3, [pc, #152]	; (800cc34 <udp_bind+0x10c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	617b      	str	r3, [r7, #20]
 800cba0:	e022      	b.n	800cbe8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d01b      	beq.n	800cbe2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	8a5b      	ldrh	r3, [r3, #18]
 800cbae:	88fa      	ldrh	r2, [r7, #6]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d116      	bne.n	800cbe2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d00d      	beq.n	800cbdc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <udp_bind+0xb4>
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d006      	beq.n	800cbdc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800cbce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800cbdc:	f06f 0307 	mvn.w	r3, #7
 800cbe0:	e01c      	b.n	800cc1c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	617b      	str	r3, [r7, #20]
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1d9      	bne.n	800cba2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <udp_bind+0xd2>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	e000      	b.n	800cbfc <udp_bind+0xd4>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	88fa      	ldrh	r2, [r7, #6]
 800cc04:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cc06:	7cfb      	ldrb	r3, [r7, #19]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800cc0c:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <udp_bind+0x10c>)
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800cc14:	4a07      	ldr	r2, [pc, #28]	; (800cc34 <udp_bind+0x10c>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	08015e38 	.word	0x08015e38
 800cc28:	08014ec8 	.word	0x08014ec8
 800cc2c:	08015190 	.word	0x08015190
 800cc30:	08014f1c 	.word	0x08014f1c
 800cc34:	200076ec 	.word	0x200076ec

0800cc38 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	4613      	mov	r3, r2
 800cc44:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <udp_connect+0x28>
 800cc4c:	4b2c      	ldr	r3, [pc, #176]	; (800cd00 <udp_connect+0xc8>)
 800cc4e:	f240 4235 	movw	r2, #1077	; 0x435
 800cc52:	492c      	ldr	r1, [pc, #176]	; (800cd04 <udp_connect+0xcc>)
 800cc54:	482c      	ldr	r0, [pc, #176]	; (800cd08 <udp_connect+0xd0>)
 800cc56:	f005 f9d7 	bl	8012008 <iprintf>
 800cc5a:	f06f 030f 	mvn.w	r3, #15
 800cc5e:	e04b      	b.n	800ccf8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d109      	bne.n	800cc7a <udp_connect+0x42>
 800cc66:	4b26      	ldr	r3, [pc, #152]	; (800cd00 <udp_connect+0xc8>)
 800cc68:	f240 4236 	movw	r2, #1078	; 0x436
 800cc6c:	4927      	ldr	r1, [pc, #156]	; (800cd0c <udp_connect+0xd4>)
 800cc6e:	4826      	ldr	r0, [pc, #152]	; (800cd08 <udp_connect+0xd0>)
 800cc70:	f005 f9ca 	bl	8012008 <iprintf>
 800cc74:	f06f 030f 	mvn.w	r3, #15
 800cc78:	e03e      	b.n	800ccf8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8a5b      	ldrh	r3, [r3, #18]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10f      	bne.n	800cca2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	8a5b      	ldrh	r3, [r3, #18]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff ff4c 	bl	800cb28 <udp_bind>
 800cc90:	4603      	mov	r3, r0
 800cc92:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800cc94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <udp_connect+0x6a>
      return err;
 800cc9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cca0:	e02a      	b.n	800ccf8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d002      	beq.n	800ccae <udp_connect+0x76>
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	e000      	b.n	800ccb0 <udp_connect+0x78>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	88fa      	ldrh	r2, [r7, #6]
 800ccb8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	7c1b      	ldrb	r3, [r3, #16]
 800ccbe:	f043 0304 	orr.w	r3, r3, #4
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ccc8:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <udp_connect+0xd8>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	617b      	str	r3, [r7, #20]
 800ccce:	e008      	b.n	800cce2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d101      	bne.n	800ccdc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e00d      	b.n	800ccf8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	617b      	str	r3, [r7, #20]
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1f3      	bne.n	800ccd0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800cce8:	4b09      	ldr	r3, [pc, #36]	; (800cd10 <udp_connect+0xd8>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ccf0:	4a07      	ldr	r2, [pc, #28]	; (800cd10 <udp_connect+0xd8>)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	08014ec8 	.word	0x08014ec8
 800cd04:	080151a8 	.word	0x080151a8
 800cd08:	08014f1c 	.word	0x08014f1c
 800cd0c:	080151c4 	.word	0x080151c4
 800cd10:	200076ec 	.word	0x200076ec

0800cd14 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d107      	bne.n	800cd36 <udp_recv+0x22>
 800cd26:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <udp_recv+0x34>)
 800cd28:	f240 428a 	movw	r2, #1162	; 0x48a
 800cd2c:	4907      	ldr	r1, [pc, #28]	; (800cd4c <udp_recv+0x38>)
 800cd2e:	4808      	ldr	r0, [pc, #32]	; (800cd50 <udp_recv+0x3c>)
 800cd30:	f005 f96a 	bl	8012008 <iprintf>
 800cd34:	e005      	b.n	800cd42 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	61da      	str	r2, [r3, #28]
}
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	08014ec8 	.word	0x08014ec8
 800cd4c:	080151fc 	.word	0x080151fc
 800cd50:	08014f1c 	.word	0x08014f1c

0800cd54 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d107      	bne.n	800cd72 <udp_remove+0x1e>
 800cd62:	4b19      	ldr	r3, [pc, #100]	; (800cdc8 <udp_remove+0x74>)
 800cd64:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800cd68:	4918      	ldr	r1, [pc, #96]	; (800cdcc <udp_remove+0x78>)
 800cd6a:	4819      	ldr	r0, [pc, #100]	; (800cdd0 <udp_remove+0x7c>)
 800cd6c:	f005 f94c 	bl	8012008 <iprintf>
 800cd70:	e026      	b.n	800cdc0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cd72:	4b18      	ldr	r3, [pc, #96]	; (800cdd4 <udp_remove+0x80>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d105      	bne.n	800cd88 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cd7c:	4b15      	ldr	r3, [pc, #84]	; (800cdd4 <udp_remove+0x80>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	4a14      	ldr	r2, [pc, #80]	; (800cdd4 <udp_remove+0x80>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	e017      	b.n	800cdb8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cd88:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <udp_remove+0x80>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e010      	b.n	800cdb2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d009      	beq.n	800cdac <udp_remove+0x58>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d104      	bne.n	800cdac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	68da      	ldr	r2, [r3, #12]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	60da      	str	r2, [r3, #12]
        break;
 800cdaa:	e005      	b.n	800cdb8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1eb      	bne.n	800cd90 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f7f8 ffec 	bl	8005d98 <memp_free>
}
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	08014ec8 	.word	0x08014ec8
 800cdcc:	08015214 	.word	0x08015214
 800cdd0:	08014f1c 	.word	0x08014f1c
 800cdd4:	200076ec 	.word	0x200076ec

0800cdd8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cdde:	2000      	movs	r0, #0
 800cde0:	f7f8 ff88 	bl	8005cf4 <memp_malloc>
 800cde4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d007      	beq.n	800cdfc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cdec:	2220      	movs	r2, #32
 800cdee:	2100      	movs	r1, #0
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f005 f901 	bl	8011ff8 <memset>
    pcb->ttl = UDP_TTL;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	22ff      	movs	r2, #255	; 0xff
 800cdfa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cdfc:	687b      	ldr	r3, [r7, #4]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
	...

0800ce08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d01e      	beq.n	800ce56 <udp_netif_ip_addr_changed+0x4e>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01a      	beq.n	800ce56 <udp_netif_ip_addr_changed+0x4e>
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d017      	beq.n	800ce56 <udp_netif_ip_addr_changed+0x4e>
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d013      	beq.n	800ce56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <udp_netif_ip_addr_changed+0x5c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	e00c      	b.n	800ce50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d103      	bne.n	800ce4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	60fb      	str	r3, [r7, #12]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1ef      	bne.n	800ce36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ce56:	bf00      	nop
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	200076ec 	.word	0x200076ec

0800ce68 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800ce6c:	4b20      	ldr	r3, [pc, #128]	; (800cef0 <dhcp_inc_pcb_refcount+0x88>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d133      	bne.n	800cedc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800ce74:	4b1f      	ldr	r3, [pc, #124]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <dhcp_inc_pcb_refcount+0x20>
 800ce7c:	4b1e      	ldr	r3, [pc, #120]	; (800cef8 <dhcp_inc_pcb_refcount+0x90>)
 800ce7e:	22e5      	movs	r2, #229	; 0xe5
 800ce80:	491e      	ldr	r1, [pc, #120]	; (800cefc <dhcp_inc_pcb_refcount+0x94>)
 800ce82:	481f      	ldr	r0, [pc, #124]	; (800cf00 <dhcp_inc_pcb_refcount+0x98>)
 800ce84:	f005 f8c0 	bl	8012008 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800ce88:	f7ff ffa6 	bl	800cdd8 <udp_new>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	4b19      	ldr	r3, [pc, #100]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800ce90:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800ce92:	4b18      	ldr	r3, [pc, #96]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d102      	bne.n	800cea0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800ce9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce9e:	e024      	b.n	800ceea <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800cea0:	4b14      	ldr	r3, [pc, #80]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	7a5a      	ldrb	r2, [r3, #9]
 800cea6:	4b13      	ldr	r3, [pc, #76]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f042 0220 	orr.w	r2, r2, #32
 800ceae:	b2d2      	uxtb	r2, r2
 800ceb0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800ceb2:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2244      	movs	r2, #68	; 0x44
 800ceb8:	4912      	ldr	r1, [pc, #72]	; (800cf04 <dhcp_inc_pcb_refcount+0x9c>)
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff fe34 	bl	800cb28 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800cec0:	4b0c      	ldr	r3, [pc, #48]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2243      	movs	r2, #67	; 0x43
 800cec6:	490f      	ldr	r1, [pc, #60]	; (800cf04 <dhcp_inc_pcb_refcount+0x9c>)
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7ff feb5 	bl	800cc38 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <dhcp_inc_pcb_refcount+0x8c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2200      	movs	r2, #0
 800ced4:	490c      	ldr	r1, [pc, #48]	; (800cf08 <dhcp_inc_pcb_refcount+0xa0>)
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff ff1c 	bl	800cd14 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800cedc:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <dhcp_inc_pcb_refcount+0x88>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	4b02      	ldr	r3, [pc, #8]	; (800cef0 <dhcp_inc_pcb_refcount+0x88>)
 800cee6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	20003e84 	.word	0x20003e84
 800cef4:	20003e80 	.word	0x20003e80
 800cef8:	0801522c 	.word	0x0801522c
 800cefc:	08015264 	.word	0x08015264
 800cf00:	0801528c 	.word	0x0801528c
 800cf04:	08015e38 	.word	0x08015e38
 800cf08:	0800e729 	.word	0x0800e729

0800cf0c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800cf10:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <dhcp_dec_pcb_refcount+0x40>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d105      	bne.n	800cf24 <dhcp_dec_pcb_refcount+0x18>
 800cf18:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <dhcp_dec_pcb_refcount+0x44>)
 800cf1a:	22ff      	movs	r2, #255	; 0xff
 800cf1c:	490d      	ldr	r1, [pc, #52]	; (800cf54 <dhcp_dec_pcb_refcount+0x48>)
 800cf1e:	480e      	ldr	r0, [pc, #56]	; (800cf58 <dhcp_dec_pcb_refcount+0x4c>)
 800cf20:	f005 f872 	bl	8012008 <iprintf>
  dhcp_pcb_refcount--;
 800cf24:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <dhcp_dec_pcb_refcount+0x40>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	4b07      	ldr	r3, [pc, #28]	; (800cf4c <dhcp_dec_pcb_refcount+0x40>)
 800cf2e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800cf30:	4b06      	ldr	r3, [pc, #24]	; (800cf4c <dhcp_dec_pcb_refcount+0x40>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d107      	bne.n	800cf48 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800cf38:	4b08      	ldr	r3, [pc, #32]	; (800cf5c <dhcp_dec_pcb_refcount+0x50>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff ff09 	bl	800cd54 <udp_remove>
    dhcp_pcb = NULL;
 800cf42:	4b06      	ldr	r3, [pc, #24]	; (800cf5c <dhcp_dec_pcb_refcount+0x50>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]
  }
}
 800cf48:	bf00      	nop
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20003e84 	.word	0x20003e84
 800cf50:	0801522c 	.word	0x0801522c
 800cf54:	080152b4 	.word	0x080152b4
 800cf58:	0801528c 	.word	0x0801528c
 800cf5c:	20003e80 	.word	0x20003e80

0800cf60 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a1b      	ldr	r3, [r3, #32]
 800cf6c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800cf6e:	210c      	movs	r1, #12
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f001 f81b 	bl	800dfac <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800cf76:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <dhcp_handle_nak+0x30>)
 800cf78:	4a05      	ldr	r2, [pc, #20]	; (800cf90 <dhcp_handle_nak+0x30>)
 800cf7a:	4905      	ldr	r1, [pc, #20]	; (800cf90 <dhcp_handle_nak+0x30>)
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7f9 f8a9 	bl	80060d4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fc0e 	bl	800d7a4 <dhcp_discover>
}
 800cf88:	bf00      	nop
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	08015e38 	.word	0x08015e38

0800cf94 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800cfa2:	2108      	movs	r1, #8
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f001 f801 	bl	800dfac <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	331c      	adds	r3, #28
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f002 fb00 	bl	800f5b8 <etharp_query>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	799b      	ldrb	r3, [r3, #6]
 800cfc0:	2bff      	cmp	r3, #255	; 0xff
 800cfc2:	d005      	beq.n	800cfd0 <dhcp_check+0x3c>
    dhcp->tries++;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	799b      	ldrb	r3, [r3, #6]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800cfd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cfd4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cfd6:	893b      	ldrh	r3, [r7, #8]
 800cfd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800cfdc:	4a06      	ldr	r2, [pc, #24]	; (800cff8 <dhcp_check+0x64>)
 800cfde:	fb82 1203 	smull	r1, r2, r2, r3
 800cfe2:	1152      	asrs	r2, r2, #5
 800cfe4:	17db      	asrs	r3, r3, #31
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800cfee:	bf00      	nop
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	10624dd3 	.word	0x10624dd3

0800cffc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d00c:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <dhcp_handle_offer+0x44>)
 800d00e:	789b      	ldrb	r3, [r3, #2]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d011      	beq.n	800d038 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d01a:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <dhcp_handle_offer+0x48>)
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7f8 f9c7 	bl	80053b2 <lwip_htonl>
 800d024:	4602      	mov	r2, r0
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	691a      	ldr	r2, [r3, #16]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f808 	bl	800d048 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	200076f0 	.word	0x200076f0
 800d044:	200076f8 	.word	0x200076f8

0800d048 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800d048:	b5b0      	push	{r4, r5, r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d109      	bne.n	800d06a <dhcp_select+0x22>
 800d056:	4b71      	ldr	r3, [pc, #452]	; (800d21c <dhcp_select+0x1d4>)
 800d058:	f240 1277 	movw	r2, #375	; 0x177
 800d05c:	4970      	ldr	r1, [pc, #448]	; (800d220 <dhcp_select+0x1d8>)
 800d05e:	4871      	ldr	r0, [pc, #452]	; (800d224 <dhcp_select+0x1dc>)
 800d060:	f004 ffd2 	bl	8012008 <iprintf>
 800d064:	f06f 030f 	mvn.w	r3, #15
 800d068:	e0d3      	b.n	800d212 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d109      	bne.n	800d08a <dhcp_select+0x42>
 800d076:	4b69      	ldr	r3, [pc, #420]	; (800d21c <dhcp_select+0x1d4>)
 800d078:	f240 1279 	movw	r2, #377	; 0x179
 800d07c:	496a      	ldr	r1, [pc, #424]	; (800d228 <dhcp_select+0x1e0>)
 800d07e:	4869      	ldr	r0, [pc, #420]	; (800d224 <dhcp_select+0x1dc>)
 800d080:	f004 ffc2 	bl	8012008 <iprintf>
 800d084:	f06f 0305 	mvn.w	r3, #5
 800d088:	e0c3      	b.n	800d212 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d08a:	2101      	movs	r1, #1
 800d08c:	69b8      	ldr	r0, [r7, #24]
 800d08e:	f000 ff8d 	bl	800dfac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d092:	f107 030c 	add.w	r3, r7, #12
 800d096:	2203      	movs	r2, #3
 800d098:	69b9      	ldr	r1, [r7, #24]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f001 fc10 	bl	800e8c0 <dhcp_create_msg>
 800d0a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8085 	beq.w	800d1b4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d0b0:	89b8      	ldrh	r0, [r7, #12]
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	2239      	movs	r2, #57	; 0x39
 800d0bc:	f000 ff90 	bl	800dfe0 <dhcp_option>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d0c4:	89b8      	ldrh	r0, [r7, #12]
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	f000 ffdf 	bl	800e094 <dhcp_option_short>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d0da:	89b8      	ldrh	r0, [r7, #12]
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d0e2:	2304      	movs	r3, #4
 800d0e4:	2232      	movs	r2, #50	; 0x32
 800d0e6:	f000 ff7b 	bl	800dfe0 <dhcp_option>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d0ee:	89bc      	ldrh	r4, [r7, #12]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f8 f959 	bl	80053b2 <lwip_htonl>
 800d100:	4603      	mov	r3, r0
 800d102:	461a      	mov	r2, r3
 800d104:	4629      	mov	r1, r5
 800d106:	4620      	mov	r0, r4
 800d108:	f000 fff6 	bl	800e0f8 <dhcp_option_long>
 800d10c:	4603      	mov	r3, r0
 800d10e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d110:	89b8      	ldrh	r0, [r7, #12]
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d118:	2304      	movs	r3, #4
 800d11a:	2236      	movs	r2, #54	; 0x36
 800d11c:	f000 ff60 	bl	800dfe0 <dhcp_option>
 800d120:	4603      	mov	r3, r0
 800d122:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d124:	89bc      	ldrh	r4, [r7, #12]
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	4618      	mov	r0, r3
 800d132:	f7f8 f93e 	bl	80053b2 <lwip_htonl>
 800d136:	4603      	mov	r3, r0
 800d138:	461a      	mov	r2, r3
 800d13a:	4629      	mov	r1, r5
 800d13c:	4620      	mov	r0, r4
 800d13e:	f000 ffdb 	bl	800e0f8 <dhcp_option_long>
 800d142:	4603      	mov	r3, r0
 800d144:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d146:	89b8      	ldrh	r0, [r7, #12]
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d14e:	2303      	movs	r3, #3
 800d150:	2237      	movs	r2, #55	; 0x37
 800d152:	f000 ff45 	bl	800dfe0 <dhcp_option>
 800d156:	4603      	mov	r3, r0
 800d158:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d15a:	2300      	movs	r3, #0
 800d15c:	77bb      	strb	r3, [r7, #30]
 800d15e:	e00e      	b.n	800d17e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d160:	89b8      	ldrh	r0, [r7, #12]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d168:	7fbb      	ldrb	r3, [r7, #30]
 800d16a:	4a30      	ldr	r2, [pc, #192]	; (800d22c <dhcp_select+0x1e4>)
 800d16c:	5cd3      	ldrb	r3, [r2, r3]
 800d16e:	461a      	mov	r2, r3
 800d170:	f000 ff6a 	bl	800e048 <dhcp_option_byte>
 800d174:	4603      	mov	r3, r0
 800d176:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d178:	7fbb      	ldrb	r3, [r7, #30]
 800d17a:	3301      	adds	r3, #1
 800d17c:	77bb      	strb	r3, [r7, #30]
 800d17e:	7fbb      	ldrb	r3, [r7, #30]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d9ed      	bls.n	800d160 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d184:	89b8      	ldrh	r0, [r7, #12]
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	33f0      	adds	r3, #240	; 0xf0
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f001 fc6d 	bl	800ea6c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d192:	4b27      	ldr	r3, [pc, #156]	; (800d230 <dhcp_select+0x1e8>)
 800d194:	6818      	ldr	r0, [r3, #0]
 800d196:	4b27      	ldr	r3, [pc, #156]	; (800d234 <dhcp_select+0x1ec>)
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	2343      	movs	r3, #67	; 0x43
 800d1a0:	4a25      	ldr	r2, [pc, #148]	; (800d238 <dhcp_select+0x1f0>)
 800d1a2:	6979      	ldr	r1, [r7, #20]
 800d1a4:	f7ff fbda 	bl	800c95c <udp_sendto_if_src>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d1ac:	6978      	ldr	r0, [r7, #20]
 800d1ae:	f7f9 fc21 	bl	80069f4 <pbuf_free>
 800d1b2:	e001      	b.n	800d1b8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d1b4:	23ff      	movs	r3, #255	; 0xff
 800d1b6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	799b      	ldrb	r3, [r3, #6]
 800d1bc:	2bff      	cmp	r3, #255	; 0xff
 800d1be:	d005      	beq.n	800d1cc <dhcp_select+0x184>
    dhcp->tries++;
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	799b      	ldrb	r3, [r3, #6]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	799b      	ldrb	r3, [r3, #6]
 800d1d0:	2b05      	cmp	r3, #5
 800d1d2:	d80d      	bhi.n	800d1f0 <dhcp_select+0x1a8>
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	799b      	ldrb	r3, [r3, #6]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4093      	lsls	r3, r2
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	0152      	lsls	r2, r2, #5
 800d1e4:	1ad2      	subs	r2, r2, r3
 800d1e6:	0092      	lsls	r2, r2, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	00db      	lsls	r3, r3, #3
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	e001      	b.n	800d1f4 <dhcp_select+0x1ac>
 800d1f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d1f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
 800d1f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d1fc:	4a0f      	ldr	r2, [pc, #60]	; (800d23c <dhcp_select+0x1f4>)
 800d1fe:	fb82 1203 	smull	r1, r2, r2, r3
 800d202:	1152      	asrs	r2, r2, #5
 800d204:	17db      	asrs	r3, r3, #31
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	b29a      	uxth	r2, r3
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d20e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bdb0      	pop	{r4, r5, r7, pc}
 800d21a:	bf00      	nop
 800d21c:	0801522c 	.word	0x0801522c
 800d220:	080152d8 	.word	0x080152d8
 800d224:	0801528c 	.word	0x0801528c
 800d228:	080152f4 	.word	0x080152f4
 800d22c:	20000018 	.word	0x20000018
 800d230:	20003e80 	.word	0x20003e80
 800d234:	08015e38 	.word	0x08015e38
 800d238:	08015e3c 	.word	0x08015e3c
 800d23c:	10624dd3 	.word	0x10624dd3

0800d240 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800d246:	4b27      	ldr	r3, [pc, #156]	; (800d2e4 <dhcp_coarse_tmr+0xa4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	607b      	str	r3, [r7, #4]
 800d24c:	e042      	b.n	800d2d4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d039      	beq.n	800d2ce <dhcp_coarse_tmr+0x8e>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	795b      	ldrb	r3, [r3, #5]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d035      	beq.n	800d2ce <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	8a9b      	ldrh	r3, [r3, #20]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d012      	beq.n	800d290 <dhcp_coarse_tmr+0x50>
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	8a5b      	ldrh	r3, [r3, #18]
 800d26e:	3301      	adds	r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	825a      	strh	r2, [r3, #18]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	8a5a      	ldrh	r2, [r3, #18]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	8a9b      	ldrh	r3, [r3, #20]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d106      	bne.n	800d290 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fdf8 	bl	800de78 <dhcp_release_and_stop>
        dhcp_start(netif);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f96b 	bl	800d564 <dhcp_start>
 800d28e:	e01e      	b.n	800d2ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	8a1b      	ldrh	r3, [r3, #16]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00b      	beq.n	800d2b0 <dhcp_coarse_tmr+0x70>
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	8a1b      	ldrh	r3, [r3, #16]
 800d29c:	1e5a      	subs	r2, r3, #1
 800d29e:	b291      	uxth	r1, r2
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	8211      	strh	r1, [r2, #16]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d103      	bne.n	800d2b0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 f8c7 	bl	800d43c <dhcp_t2_timeout>
 800d2ae:	e00e      	b.n	800d2ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	89db      	ldrh	r3, [r3, #14]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00a      	beq.n	800d2ce <dhcp_coarse_tmr+0x8e>
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	89db      	ldrh	r3, [r3, #14]
 800d2bc:	1e5a      	subs	r2, r3, #1
 800d2be:	b291      	uxth	r1, r2
 800d2c0:	683a      	ldr	r2, [r7, #0]
 800d2c2:	81d1      	strh	r1, [r2, #14]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d102      	bne.n	800d2ce <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f888 	bl	800d3de <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1b9      	bne.n	800d24e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	200076c4 	.word	0x200076c4

0800d2e8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800d2ee:	4b16      	ldr	r3, [pc, #88]	; (800d348 <dhcp_fine_tmr+0x60>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	607b      	str	r3, [r7, #4]
 800d2f4:	e020      	b.n	800d338 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d017      	beq.n	800d332 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	891b      	ldrh	r3, [r3, #8]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d906      	bls.n	800d318 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	891b      	ldrh	r3, [r3, #8]
 800d30e:	3b01      	subs	r3, #1
 800d310:	b29a      	uxth	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	811a      	strh	r2, [r3, #8]
 800d316:	e00c      	b.n	800d332 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	891b      	ldrh	r3, [r3, #8]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d108      	bne.n	800d332 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	891b      	ldrh	r3, [r3, #8]
 800d324:	3b01      	subs	r3, #1
 800d326:	b29a      	uxth	r2, r3
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f80d 	bl	800d34c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	607b      	str	r3, [r7, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1db      	bne.n	800d2f6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800d33e:	bf00      	nop
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	200076c4 	.word	0x200076c4

0800d34c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	795b      	ldrb	r3, [r3, #5]
 800d35e:	2b0c      	cmp	r3, #12
 800d360:	d003      	beq.n	800d36a <dhcp_timeout+0x1e>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	795b      	ldrb	r3, [r3, #5]
 800d366:	2b06      	cmp	r3, #6
 800d368:	d103      	bne.n	800d372 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fa1a 	bl	800d7a4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800d370:	e031      	b.n	800d3d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	795b      	ldrb	r3, [r3, #5]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d10e      	bne.n	800d398 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	799b      	ldrb	r3, [r3, #6]
 800d37e:	2b05      	cmp	r3, #5
 800d380:	d803      	bhi.n	800d38a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7ff fe60 	bl	800d048 <dhcp_select>
}
 800d388:	e025      	b.n	800d3d6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fd74 	bl	800de78 <dhcp_release_and_stop>
      dhcp_start(netif);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f8e7 	bl	800d564 <dhcp_start>
}
 800d396:	e01e      	b.n	800d3d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	795b      	ldrb	r3, [r3, #5]
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	d10b      	bne.n	800d3b8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	799b      	ldrb	r3, [r3, #6]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d803      	bhi.n	800d3b0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff fdf3 	bl	800cf94 <dhcp_check>
}
 800d3ae:	e012      	b.n	800d3d6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fa99 	bl	800d8e8 <dhcp_bind>
}
 800d3b6:	e00e      	b.n	800d3d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	795b      	ldrb	r3, [r3, #5]
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d10a      	bne.n	800d3d6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	799b      	ldrb	r3, [r3, #6]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d803      	bhi.n	800d3d0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fc9f 	bl	800dd0c <dhcp_reboot>
}
 800d3ce:	e002      	b.n	800d3d6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f9e7 	bl	800d7a4 <dhcp_discover>
}
 800d3d6:	bf00      	nop
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	795b      	ldrb	r3, [r3, #5]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d007      	beq.n	800d404 <dhcp_t1_timeout+0x26>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	795b      	ldrb	r3, [r3, #5]
 800d3f8:	2b0a      	cmp	r3, #10
 800d3fa:	d003      	beq.n	800d404 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d400:	2b05      	cmp	r3, #5
 800d402:	d117      	bne.n	800d434 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fb49 	bl	800da9c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	899b      	ldrh	r3, [r3, #12]
 800d40e:	461a      	mov	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8a5b      	ldrh	r3, [r3, #18]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	2b01      	cmp	r3, #1
 800d418:	dd0c      	ble.n	800d434 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	899b      	ldrh	r3, [r3, #12]
 800d41e:	461a      	mov	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	8a5b      	ldrh	r3, [r3, #18]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	2b00      	cmp	r3, #0
 800d428:	da00      	bge.n	800d42c <dhcp_t1_timeout+0x4e>
 800d42a:	3301      	adds	r3, #1
 800d42c:	105b      	asrs	r3, r3, #1
 800d42e:	b29a      	uxth	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800d434:	bf00      	nop
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a1b      	ldr	r3, [r3, #32]
 800d448:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	795b      	ldrb	r3, [r3, #5]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d00b      	beq.n	800d46a <dhcp_t2_timeout+0x2e>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	795b      	ldrb	r3, [r3, #5]
 800d456:	2b0a      	cmp	r3, #10
 800d458:	d007      	beq.n	800d46a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d45e:	2b05      	cmp	r3, #5
 800d460:	d003      	beq.n	800d46a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	795b      	ldrb	r3, [r3, #5]
 800d466:	2b04      	cmp	r3, #4
 800d468:	d117      	bne.n	800d49a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fbb2 	bl	800dbd4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	8a9b      	ldrh	r3, [r3, #20]
 800d474:	461a      	mov	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	8a5b      	ldrh	r3, [r3, #18]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	dd0c      	ble.n	800d49a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	8a9b      	ldrh	r3, [r3, #20]
 800d484:	461a      	mov	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	8a5b      	ldrh	r3, [r3, #18]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	da00      	bge.n	800d492 <dhcp_t2_timeout+0x56>
 800d490:	3301      	adds	r3, #1
 800d492:	105b      	asrs	r3, r3, #1
 800d494:	b29a      	uxth	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800d49a:	bf00      	nop
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a1b      	ldr	r3, [r3, #32]
 800d4b2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800d4c0:	4b26      	ldr	r3, [pc, #152]	; (800d55c <dhcp_handle_ack+0xb8>)
 800d4c2:	78db      	ldrb	r3, [r3, #3]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800d4c8:	4b25      	ldr	r3, [pc, #148]	; (800d560 <dhcp_handle_ack+0xbc>)
 800d4ca:	68da      	ldr	r2, [r3, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800d4d0:	4b22      	ldr	r3, [pc, #136]	; (800d55c <dhcp_handle_ack+0xb8>)
 800d4d2:	791b      	ldrb	r3, [r3, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800d4d8:	4b21      	ldr	r3, [pc, #132]	; (800d560 <dhcp_handle_ack+0xbc>)
 800d4da:	691a      	ldr	r2, [r3, #16]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	62da      	str	r2, [r3, #44]	; 0x2c
 800d4e0:	e004      	b.n	800d4ec <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e6:	085a      	lsrs	r2, r3, #1
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800d4ec:	4b1b      	ldr	r3, [pc, #108]	; (800d55c <dhcp_handle_ack+0xb8>)
 800d4ee:	795b      	ldrb	r3, [r3, #5]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d004      	beq.n	800d4fe <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800d4f4:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <dhcp_handle_ack+0xbc>)
 800d4f6:	695a      	ldr	r2, [r3, #20]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	631a      	str	r2, [r3, #48]	; 0x30
 800d4fc:	e007      	b.n	800d50e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d502:	4613      	mov	r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	1a9b      	subs	r3, r3, r2
 800d508:	08da      	lsrs	r2, r3, #3
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	691a      	ldr	r2, [r3, #16]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800d516:	4b11      	ldr	r3, [pc, #68]	; (800d55c <dhcp_handle_ack+0xb8>)
 800d518:	799b      	ldrb	r3, [r3, #6]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800d51e:	4b10      	ldr	r3, [pc, #64]	; (800d560 <dhcp_handle_ack+0xbc>)
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	4618      	mov	r0, r3
 800d524:	f7f7 ff45 	bl	80053b2 <lwip_htonl>
 800d528:	4602      	mov	r2, r0
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2201      	movs	r2, #1
 800d532:	71da      	strb	r2, [r3, #7]
 800d534:	e002      	b.n	800d53c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800d53c:	4b07      	ldr	r3, [pc, #28]	; (800d55c <dhcp_handle_ack+0xb8>)
 800d53e:	79db      	ldrb	r3, [r3, #7]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d007      	beq.n	800d554 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800d544:	4b06      	ldr	r3, [pc, #24]	; (800d560 <dhcp_handle_ack+0xbc>)
 800d546:	69db      	ldr	r3, [r3, #28]
 800d548:	4618      	mov	r0, r3
 800d54a:	f7f7 ff32 	bl	80053b2 <lwip_htonl>
 800d54e:	4602      	mov	r2, r0
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	200076f0 	.word	0x200076f0
 800d560:	200076f8 	.word	0x200076f8

0800d564 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d109      	bne.n	800d586 <dhcp_start+0x22>
 800d572:	4b37      	ldr	r3, [pc, #220]	; (800d650 <dhcp_start+0xec>)
 800d574:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d578:	4936      	ldr	r1, [pc, #216]	; (800d654 <dhcp_start+0xf0>)
 800d57a:	4837      	ldr	r0, [pc, #220]	; (800d658 <dhcp_start+0xf4>)
 800d57c:	f004 fd44 	bl	8012008 <iprintf>
 800d580:	f06f 030f 	mvn.w	r3, #15
 800d584:	e060      	b.n	800d648 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b00      	cmp	r3, #0
 800d592:	d109      	bne.n	800d5a8 <dhcp_start+0x44>
 800d594:	4b2e      	ldr	r3, [pc, #184]	; (800d650 <dhcp_start+0xec>)
 800d596:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800d59a:	4930      	ldr	r1, [pc, #192]	; (800d65c <dhcp_start+0xf8>)
 800d59c:	482e      	ldr	r0, [pc, #184]	; (800d658 <dhcp_start+0xf4>)
 800d59e:	f004 fd33 	bl	8012008 <iprintf>
 800d5a2:	f06f 030f 	mvn.w	r3, #15
 800d5a6:	e04f      	b.n	800d648 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d5b6:	d202      	bcs.n	800d5be <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800d5b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5bc:	e044      	b.n	800d648 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10d      	bne.n	800d5e0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800d5c4:	2034      	movs	r0, #52	; 0x34
 800d5c6:	f7f8 fa13 	bl	80059f0 <mem_malloc>
 800d5ca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d102      	bne.n	800d5d8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800d5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5d6:	e037      	b.n	800d648 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	621a      	str	r2, [r3, #32]
 800d5de:	e005      	b.n	800d5ec <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	791b      	ldrb	r3, [r3, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d5e8:	f7ff fc90 	bl	800cf0c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800d5ec:	2234      	movs	r2, #52	; 0x34
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f004 fd01 	bl	8011ff8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800d5f6:	f7ff fc37 	bl	800ce68 <dhcp_inc_pcb_refcount>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <dhcp_start+0xa2>
    return ERR_MEM;
 800d600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d604:	e020      	b.n	800d648 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d612:	f003 0304 	and.w	r3, r3, #4
 800d616:	2b00      	cmp	r3, #0
 800d618:	d105      	bne.n	800d626 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800d61a:	2102      	movs	r1, #2
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f000 fcc5 	bl	800dfac <dhcp_set_state>
    return ERR_OK;
 800d622:	2300      	movs	r3, #0
 800d624:	e010      	b.n	800d648 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 f8bc 	bl	800d7a4 <dhcp_discover>
 800d62c:	4603      	mov	r3, r0
 800d62e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800d630:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fc1d 	bl	800de78 <dhcp_release_and_stop>
    return ERR_MEM;
 800d63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d642:	e001      	b.n	800d648 <dhcp_start+0xe4>
  }
  return result;
 800d644:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	0801522c 	.word	0x0801522c
 800d654:	08015310 	.word	0x08015310
 800d658:	0801528c 	.word	0x0801528c
 800d65c:	08015354 	.word	0x08015354

0800d660 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d107      	bne.n	800d680 <dhcp_arp_reply+0x20>
 800d670:	4b0e      	ldr	r3, [pc, #56]	; (800d6ac <dhcp_arp_reply+0x4c>)
 800d672:	f240 328b 	movw	r2, #907	; 0x38b
 800d676:	490e      	ldr	r1, [pc, #56]	; (800d6b0 <dhcp_arp_reply+0x50>)
 800d678:	480e      	ldr	r0, [pc, #56]	; (800d6b4 <dhcp_arp_reply+0x54>)
 800d67a:	f004 fcc5 	bl	8012008 <iprintf>
 800d67e:	e012      	b.n	800d6a6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00c      	beq.n	800d6a6 <dhcp_arp_reply+0x46>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	795b      	ldrb	r3, [r3, #5]
 800d690:	2b08      	cmp	r3, #8
 800d692:	d108      	bne.n	800d6a6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d102      	bne.n	800d6a6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 f809 	bl	800d6b8 <dhcp_decline>
    }
  }
}
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	0801522c 	.word	0x0801522c
 800d6b0:	08015310 	.word	0x08015310
 800d6b4:	0801528c 	.word	0x0801528c

0800d6b8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800d6b8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ba:	b08a      	sub	sp, #40	; 0x28
 800d6bc:	af02      	add	r7, sp, #8
 800d6be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d6c6:	210c      	movs	r1, #12
 800d6c8:	69b8      	ldr	r0, [r7, #24]
 800d6ca:	f000 fc6f 	bl	800dfac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d6ce:	f107 030c 	add.w	r3, r7, #12
 800d6d2:	2204      	movs	r2, #4
 800d6d4:	69b9      	ldr	r1, [r7, #24]
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f001 f8f2 	bl	800e8c0 <dhcp_create_msg>
 800d6dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d035      	beq.n	800d750 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d6ea:	89b8      	ldrh	r0, [r7, #12]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d6f2:	2304      	movs	r3, #4
 800d6f4:	2232      	movs	r2, #50	; 0x32
 800d6f6:	f000 fc73 	bl	800dfe0 <dhcp_option>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d6fe:	89bc      	ldrh	r4, [r7, #12]
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f7 fe51 	bl	80053b2 <lwip_htonl>
 800d710:	4603      	mov	r3, r0
 800d712:	461a      	mov	r2, r3
 800d714:	4629      	mov	r1, r5
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fcee 	bl	800e0f8 <dhcp_option_long>
 800d71c:	4603      	mov	r3, r0
 800d71e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d720:	89b8      	ldrh	r0, [r7, #12]
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	33f0      	adds	r3, #240	; 0xf0
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	4619      	mov	r1, r3
 800d72a:	f001 f99f 	bl	800ea6c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d72e:	4b19      	ldr	r3, [pc, #100]	; (800d794 <dhcp_decline+0xdc>)
 800d730:	6818      	ldr	r0, [r3, #0]
 800d732:	4b19      	ldr	r3, [pc, #100]	; (800d798 <dhcp_decline+0xe0>)
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	2343      	movs	r3, #67	; 0x43
 800d73c:	4a17      	ldr	r2, [pc, #92]	; (800d79c <dhcp_decline+0xe4>)
 800d73e:	6979      	ldr	r1, [r7, #20]
 800d740:	f7ff f90c 	bl	800c95c <udp_sendto_if_src>
 800d744:	4603      	mov	r3, r0
 800d746:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d748:	6978      	ldr	r0, [r7, #20]
 800d74a:	f7f9 f953 	bl	80069f4 <pbuf_free>
 800d74e:	e001      	b.n	800d754 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d750:	23ff      	movs	r3, #255	; 0xff
 800d752:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	799b      	ldrb	r3, [r3, #6]
 800d758:	2bff      	cmp	r3, #255	; 0xff
 800d75a:	d005      	beq.n	800d768 <dhcp_decline+0xb0>
    dhcp->tries++;
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	799b      	ldrb	r3, [r3, #6]
 800d760:	3301      	adds	r3, #1
 800d762:	b2da      	uxtb	r2, r3
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800d768:	f242 7310 	movw	r3, #10000	; 0x2710
 800d76c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d76e:	89fb      	ldrh	r3, [r7, #14]
 800d770:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d774:	4a0a      	ldr	r2, [pc, #40]	; (800d7a0 <dhcp_decline+0xe8>)
 800d776:	fb82 1203 	smull	r1, r2, r2, r3
 800d77a:	1152      	asrs	r2, r2, #5
 800d77c:	17db      	asrs	r3, r3, #31
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	b29a      	uxth	r2, r3
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d786:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3720      	adds	r7, #32
 800d78e:	46bd      	mov	sp, r7
 800d790:	bdb0      	pop	{r4, r5, r7, pc}
 800d792:	bf00      	nop
 800d794:	20003e80 	.word	0x20003e80
 800d798:	08015e38 	.word	0x08015e38
 800d79c:	08015e3c 	.word	0x08015e3c
 800d7a0:	10624dd3 	.word	0x10624dd3

0800d7a4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08a      	sub	sp, #40	; 0x28
 800d7a8:	af02      	add	r7, sp, #8
 800d7aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a1b      	ldr	r3, [r3, #32]
 800d7b0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800d7bc:	2106      	movs	r1, #6
 800d7be:	69b8      	ldr	r0, [r7, #24]
 800d7c0:	f000 fbf4 	bl	800dfac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800d7c4:	f107 0308 	add.w	r3, r7, #8
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	69b9      	ldr	r1, [r7, #24]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f001 f877 	bl	800e8c0 <dhcp_create_msg>
 800d7d2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d04b      	beq.n	800d872 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d7e0:	8938      	ldrh	r0, [r7, #8]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	2239      	movs	r2, #57	; 0x39
 800d7ec:	f000 fbf8 	bl	800dfe0 <dhcp_option>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d7f4:	8938      	ldrh	r0, [r7, #8]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d800:	461a      	mov	r2, r3
 800d802:	f000 fc47 	bl	800e094 <dhcp_option_short>
 800d806:	4603      	mov	r3, r0
 800d808:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d80a:	8938      	ldrh	r0, [r7, #8]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d812:	2303      	movs	r3, #3
 800d814:	2237      	movs	r2, #55	; 0x37
 800d816:	f000 fbe3 	bl	800dfe0 <dhcp_option>
 800d81a:	4603      	mov	r3, r0
 800d81c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d81e:	2300      	movs	r3, #0
 800d820:	77fb      	strb	r3, [r7, #31]
 800d822:	e00e      	b.n	800d842 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d824:	8938      	ldrh	r0, [r7, #8]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d82c:	7ffb      	ldrb	r3, [r7, #31]
 800d82e:	4a29      	ldr	r2, [pc, #164]	; (800d8d4 <dhcp_discover+0x130>)
 800d830:	5cd3      	ldrb	r3, [r2, r3]
 800d832:	461a      	mov	r2, r3
 800d834:	f000 fc08 	bl	800e048 <dhcp_option_byte>
 800d838:	4603      	mov	r3, r0
 800d83a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d83c:	7ffb      	ldrb	r3, [r7, #31]
 800d83e:	3301      	adds	r3, #1
 800d840:	77fb      	strb	r3, [r7, #31]
 800d842:	7ffb      	ldrb	r3, [r7, #31]
 800d844:	2b02      	cmp	r3, #2
 800d846:	d9ed      	bls.n	800d824 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d848:	8938      	ldrh	r0, [r7, #8]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	33f0      	adds	r3, #240	; 0xf0
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	4619      	mov	r1, r3
 800d852:	f001 f90b 	bl	800ea6c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d856:	4b20      	ldr	r3, [pc, #128]	; (800d8d8 <dhcp_discover+0x134>)
 800d858:	6818      	ldr	r0, [r3, #0]
 800d85a:	4b20      	ldr	r3, [pc, #128]	; (800d8dc <dhcp_discover+0x138>)
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	2343      	movs	r3, #67	; 0x43
 800d864:	4a1e      	ldr	r2, [pc, #120]	; (800d8e0 <dhcp_discover+0x13c>)
 800d866:	6939      	ldr	r1, [r7, #16]
 800d868:	f7ff f878 	bl	800c95c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800d86c:	6938      	ldr	r0, [r7, #16]
 800d86e:	f7f9 f8c1 	bl	80069f4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	799b      	ldrb	r3, [r3, #6]
 800d876:	2bff      	cmp	r3, #255	; 0xff
 800d878:	d005      	beq.n	800d886 <dhcp_discover+0xe2>
    dhcp->tries++;
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	799b      	ldrb	r3, [r3, #6]
 800d87e:	3301      	adds	r3, #1
 800d880:	b2da      	uxtb	r2, r3
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	799b      	ldrb	r3, [r3, #6]
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	d80d      	bhi.n	800d8aa <dhcp_discover+0x106>
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	799b      	ldrb	r3, [r3, #6]
 800d892:	461a      	mov	r2, r3
 800d894:	2301      	movs	r3, #1
 800d896:	4093      	lsls	r3, r2
 800d898:	b29b      	uxth	r3, r3
 800d89a:	461a      	mov	r2, r3
 800d89c:	0152      	lsls	r2, r2, #5
 800d89e:	1ad2      	subs	r2, r2, r3
 800d8a0:	0092      	lsls	r2, r2, #2
 800d8a2:	4413      	add	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	e001      	b.n	800d8ae <dhcp_discover+0x10a>
 800d8aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d8ae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d8b0:	897b      	ldrh	r3, [r7, #10]
 800d8b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d8b6:	4a0b      	ldr	r2, [pc, #44]	; (800d8e4 <dhcp_discover+0x140>)
 800d8b8:	fb82 1203 	smull	r1, r2, r2, r3
 800d8bc:	1152      	asrs	r2, r2, #5
 800d8be:	17db      	asrs	r3, r3, #31
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d8c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3720      	adds	r7, #32
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20000018 	.word	0x20000018
 800d8d8:	20003e80 	.word	0x20003e80
 800d8dc:	08015e38 	.word	0x08015e38
 800d8e0:	08015e3c 	.word	0x08015e3c
 800d8e4:	10624dd3 	.word	0x10624dd3

0800d8e8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b088      	sub	sp, #32
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d107      	bne.n	800d906 <dhcp_bind+0x1e>
 800d8f6:	4b64      	ldr	r3, [pc, #400]	; (800da88 <dhcp_bind+0x1a0>)
 800d8f8:	f240 4215 	movw	r2, #1045	; 0x415
 800d8fc:	4963      	ldr	r1, [pc, #396]	; (800da8c <dhcp_bind+0x1a4>)
 800d8fe:	4864      	ldr	r0, [pc, #400]	; (800da90 <dhcp_bind+0x1a8>)
 800d900:	f004 fb82 	bl	8012008 <iprintf>
 800d904:	e0bc      	b.n	800da80 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d107      	bne.n	800d922 <dhcp_bind+0x3a>
 800d912:	4b5d      	ldr	r3, [pc, #372]	; (800da88 <dhcp_bind+0x1a0>)
 800d914:	f240 4217 	movw	r2, #1047	; 0x417
 800d918:	495e      	ldr	r1, [pc, #376]	; (800da94 <dhcp_bind+0x1ac>)
 800d91a:	485d      	ldr	r0, [pc, #372]	; (800da90 <dhcp_bind+0x1a8>)
 800d91c:	f004 fb74 	bl	8012008 <iprintf>
 800d920:	e0ae      	b.n	800da80 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	2200      	movs	r2, #0
 800d926:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d930:	d019      	beq.n	800d966 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d936:	331e      	adds	r3, #30
 800d938:	4a57      	ldr	r2, [pc, #348]	; (800da98 <dhcp_bind+0x1b0>)
 800d93a:	fba2 2303 	umull	r2, r3, r2, r3
 800d93e:	095b      	lsrs	r3, r3, #5
 800d940:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d948:	d302      	bcc.n	800d950 <dhcp_bind+0x68>
      timeout = 0xffff;
 800d94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d94e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	b29a      	uxth	r2, r3
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	8a9b      	ldrh	r3, [r3, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	2201      	movs	r2, #1
 800d964:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d96e:	d01d      	beq.n	800d9ac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d974:	331e      	adds	r3, #30
 800d976:	4a48      	ldr	r2, [pc, #288]	; (800da98 <dhcp_bind+0x1b0>)
 800d978:	fba2 2303 	umull	r2, r3, r2, r3
 800d97c:	095b      	lsrs	r3, r3, #5
 800d97e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d986:	d302      	bcc.n	800d98e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800d988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d98c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	b29a      	uxth	r2, r3
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	895b      	ldrh	r3, [r3, #10]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d102      	bne.n	800d9a4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	895a      	ldrh	r2, [r3, #10]
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b4:	d01d      	beq.n	800d9f2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ba:	331e      	adds	r3, #30
 800d9bc:	4a36      	ldr	r2, [pc, #216]	; (800da98 <dhcp_bind+0x1b0>)
 800d9be:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c2:	095b      	lsrs	r3, r3, #5
 800d9c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9cc:	d302      	bcc.n	800d9d4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800d9ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	899b      	ldrh	r3, [r3, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d102      	bne.n	800d9ea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	899a      	ldrh	r2, [r3, #12]
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	895a      	ldrh	r2, [r3, #10]
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	899b      	ldrh	r3, [r3, #12]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d306      	bcc.n	800da0c <dhcp_bind+0x124>
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	899b      	ldrh	r3, [r3, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d002      	beq.n	800da0c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	2200      	movs	r2, #0
 800da0a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	79db      	ldrb	r3, [r3, #7]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d003      	beq.n	800da1c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	6a1b      	ldr	r3, [r3, #32]
 800da18:	613b      	str	r3, [r7, #16]
 800da1a:	e014      	b.n	800da46 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	331c      	adds	r3, #28
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800da24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	db02      	blt.n	800da32 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800da2c:	23ff      	movs	r3, #255	; 0xff
 800da2e:	613b      	str	r3, [r7, #16]
 800da30:	e009      	b.n	800da46 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	2bbf      	cmp	r3, #191	; 0xbf
 800da36:	d903      	bls.n	800da40 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800da38:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	e002      	b.n	800da46 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800da40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da44:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d108      	bne.n	800da64 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	69da      	ldr	r2, [r3, #28]
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	4013      	ands	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da62:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800da64:	210a      	movs	r1, #10
 800da66:	69b8      	ldr	r0, [r7, #24]
 800da68:	f000 faa0 	bl	800dfac <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	f103 011c 	add.w	r1, r3, #28
 800da72:	f107 030c 	add.w	r3, r7, #12
 800da76:	f107 0210 	add.w	r2, r7, #16
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7f8 fb2a 	bl	80060d4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800da80:	3720      	adds	r7, #32
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0801522c 	.word	0x0801522c
 800da8c:	0801538c 	.word	0x0801538c
 800da90:	0801528c 	.word	0x0801528c
 800da94:	080153a8 	.word	0x080153a8
 800da98:	88888889 	.word	0x88888889

0800da9c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08a      	sub	sp, #40	; 0x28
 800daa0:	af02      	add	r7, sp, #8
 800daa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800daaa:	2105      	movs	r1, #5
 800daac:	69b8      	ldr	r0, [r7, #24]
 800daae:	f000 fa7d 	bl	800dfac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800dab2:	f107 030c 	add.w	r3, r7, #12
 800dab6:	2203      	movs	r2, #3
 800dab8:	69b9      	ldr	r1, [r7, #24]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 ff00 	bl	800e8c0 <dhcp_create_msg>
 800dac0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d04e      	beq.n	800db66 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dace:	89b8      	ldrh	r0, [r7, #12]
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dad6:	2302      	movs	r3, #2
 800dad8:	2239      	movs	r2, #57	; 0x39
 800dada:	f000 fa81 	bl	800dfe0 <dhcp_option>
 800dade:	4603      	mov	r3, r0
 800dae0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800dae2:	89b8      	ldrh	r0, [r7, #12]
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800daee:	461a      	mov	r2, r3
 800daf0:	f000 fad0 	bl	800e094 <dhcp_option_short>
 800daf4:	4603      	mov	r3, r0
 800daf6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800daf8:	89b8      	ldrh	r0, [r7, #12]
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800db00:	2303      	movs	r3, #3
 800db02:	2237      	movs	r2, #55	; 0x37
 800db04:	f000 fa6c 	bl	800dfe0 <dhcp_option>
 800db08:	4603      	mov	r3, r0
 800db0a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800db0c:	2300      	movs	r3, #0
 800db0e:	77bb      	strb	r3, [r7, #30]
 800db10:	e00e      	b.n	800db30 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800db12:	89b8      	ldrh	r0, [r7, #12]
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800db1a:	7fbb      	ldrb	r3, [r7, #30]
 800db1c:	4a2a      	ldr	r2, [pc, #168]	; (800dbc8 <dhcp_renew+0x12c>)
 800db1e:	5cd3      	ldrb	r3, [r2, r3]
 800db20:	461a      	mov	r2, r3
 800db22:	f000 fa91 	bl	800e048 <dhcp_option_byte>
 800db26:	4603      	mov	r3, r0
 800db28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800db2a:	7fbb      	ldrb	r3, [r7, #30]
 800db2c:	3301      	adds	r3, #1
 800db2e:	77bb      	strb	r3, [r7, #30]
 800db30:	7fbb      	ldrb	r3, [r7, #30]
 800db32:	2b02      	cmp	r3, #2
 800db34:	d9ed      	bls.n	800db12 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800db36:	89b8      	ldrh	r0, [r7, #12]
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	33f0      	adds	r3, #240	; 0xf0
 800db3c:	697a      	ldr	r2, [r7, #20]
 800db3e:	4619      	mov	r1, r3
 800db40:	f000 ff94 	bl	800ea6c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800db44:	4b21      	ldr	r3, [pc, #132]	; (800dbcc <dhcp_renew+0x130>)
 800db46:	6818      	ldr	r0, [r3, #0]
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	f103 0218 	add.w	r2, r3, #24
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	2343      	movs	r3, #67	; 0x43
 800db54:	6979      	ldr	r1, [r7, #20]
 800db56:	f7fe fe8d 	bl	800c874 <udp_sendto_if>
 800db5a:	4603      	mov	r3, r0
 800db5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800db5e:	6978      	ldr	r0, [r7, #20]
 800db60:	f7f8 ff48 	bl	80069f4 <pbuf_free>
 800db64:	e001      	b.n	800db6a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800db66:	23ff      	movs	r3, #255	; 0xff
 800db68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	799b      	ldrb	r3, [r3, #6]
 800db6e:	2bff      	cmp	r3, #255	; 0xff
 800db70:	d005      	beq.n	800db7e <dhcp_renew+0xe2>
    dhcp->tries++;
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	799b      	ldrb	r3, [r3, #6]
 800db76:	3301      	adds	r3, #1
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	799b      	ldrb	r3, [r3, #6]
 800db82:	2b09      	cmp	r3, #9
 800db84:	d80a      	bhi.n	800db9c <dhcp_renew+0x100>
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	799b      	ldrb	r3, [r3, #6]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	461a      	mov	r2, r3
 800db8e:	0152      	lsls	r2, r2, #5
 800db90:	1ad2      	subs	r2, r2, r3
 800db92:	0092      	lsls	r2, r2, #2
 800db94:	4413      	add	r3, r2
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	b29b      	uxth	r3, r3
 800db9a:	e001      	b.n	800dba0 <dhcp_renew+0x104>
 800db9c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800dba0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dba2:	89fb      	ldrh	r3, [r7, #14]
 800dba4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dba8:	4a09      	ldr	r2, [pc, #36]	; (800dbd0 <dhcp_renew+0x134>)
 800dbaa:	fb82 1203 	smull	r1, r2, r2, r3
 800dbae:	1152      	asrs	r2, r2, #5
 800dbb0:	17db      	asrs	r3, r3, #31
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800dbba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20000018 	.word	0x20000018
 800dbcc:	20003e80 	.word	0x20003e80
 800dbd0:	10624dd3 	.word	0x10624dd3

0800dbd4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af02      	add	r7, sp, #8
 800dbda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a1b      	ldr	r3, [r3, #32]
 800dbe0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800dbe2:	2104      	movs	r1, #4
 800dbe4:	69b8      	ldr	r0, [r7, #24]
 800dbe6:	f000 f9e1 	bl	800dfac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800dbea:	f107 030c 	add.w	r3, r7, #12
 800dbee:	2203      	movs	r2, #3
 800dbf0:	69b9      	ldr	r1, [r7, #24]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fe64 	bl	800e8c0 <dhcp_create_msg>
 800dbf8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d04c      	beq.n	800dc9a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dc06:	89b8      	ldrh	r0, [r7, #12]
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dc0e:	2302      	movs	r3, #2
 800dc10:	2239      	movs	r2, #57	; 0x39
 800dc12:	f000 f9e5 	bl	800dfe0 <dhcp_option>
 800dc16:	4603      	mov	r3, r0
 800dc18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800dc1a:	89b8      	ldrh	r0, [r7, #12]
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc26:	461a      	mov	r2, r3
 800dc28:	f000 fa34 	bl	800e094 <dhcp_option_short>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800dc30:	89b8      	ldrh	r0, [r7, #12]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dc38:	2303      	movs	r3, #3
 800dc3a:	2237      	movs	r2, #55	; 0x37
 800dc3c:	f000 f9d0 	bl	800dfe0 <dhcp_option>
 800dc40:	4603      	mov	r3, r0
 800dc42:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dc44:	2300      	movs	r3, #0
 800dc46:	77bb      	strb	r3, [r7, #30]
 800dc48:	e00e      	b.n	800dc68 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800dc4a:	89b8      	ldrh	r0, [r7, #12]
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dc52:	7fbb      	ldrb	r3, [r7, #30]
 800dc54:	4a29      	ldr	r2, [pc, #164]	; (800dcfc <dhcp_rebind+0x128>)
 800dc56:	5cd3      	ldrb	r3, [r2, r3]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	f000 f9f5 	bl	800e048 <dhcp_option_byte>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dc62:	7fbb      	ldrb	r3, [r7, #30]
 800dc64:	3301      	adds	r3, #1
 800dc66:	77bb      	strb	r3, [r7, #30]
 800dc68:	7fbb      	ldrb	r3, [r7, #30]
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d9ed      	bls.n	800dc4a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dc6e:	89b8      	ldrh	r0, [r7, #12]
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	33f0      	adds	r3, #240	; 0xf0
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	4619      	mov	r1, r3
 800dc78:	f000 fef8 	bl	800ea6c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dc7c:	4b20      	ldr	r3, [pc, #128]	; (800dd00 <dhcp_rebind+0x12c>)
 800dc7e:	6818      	ldr	r0, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	2343      	movs	r3, #67	; 0x43
 800dc86:	4a1f      	ldr	r2, [pc, #124]	; (800dd04 <dhcp_rebind+0x130>)
 800dc88:	6979      	ldr	r1, [r7, #20]
 800dc8a:	f7fe fdf3 	bl	800c874 <udp_sendto_if>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800dc92:	6978      	ldr	r0, [r7, #20]
 800dc94:	f7f8 feae 	bl	80069f4 <pbuf_free>
 800dc98:	e001      	b.n	800dc9e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800dc9a:	23ff      	movs	r3, #255	; 0xff
 800dc9c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	799b      	ldrb	r3, [r3, #6]
 800dca2:	2bff      	cmp	r3, #255	; 0xff
 800dca4:	d005      	beq.n	800dcb2 <dhcp_rebind+0xde>
    dhcp->tries++;
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	799b      	ldrb	r3, [r3, #6]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	799b      	ldrb	r3, [r3, #6]
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d80a      	bhi.n	800dcd0 <dhcp_rebind+0xfc>
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	799b      	ldrb	r3, [r3, #6]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	0152      	lsls	r2, r2, #5
 800dcc4:	1ad2      	subs	r2, r2, r3
 800dcc6:	0092      	lsls	r2, r2, #2
 800dcc8:	4413      	add	r3, r2
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	e001      	b.n	800dcd4 <dhcp_rebind+0x100>
 800dcd0:	f242 7310 	movw	r3, #10000	; 0x2710
 800dcd4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dcd6:	89fb      	ldrh	r3, [r7, #14]
 800dcd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dcdc:	4a0a      	ldr	r2, [pc, #40]	; (800dd08 <dhcp_rebind+0x134>)
 800dcde:	fb82 1203 	smull	r1, r2, r2, r3
 800dce2:	1152      	asrs	r2, r2, #5
 800dce4:	17db      	asrs	r3, r3, #31
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800dcee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3720      	adds	r7, #32
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000018 	.word	0x20000018
 800dd00:	20003e80 	.word	0x20003e80
 800dd04:	08015e3c 	.word	0x08015e3c
 800dd08:	10624dd3 	.word	0x10624dd3

0800dd0c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800dd0c:	b5b0      	push	{r4, r5, r7, lr}
 800dd0e:	b08a      	sub	sp, #40	; 0x28
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a1b      	ldr	r3, [r3, #32]
 800dd18:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800dd1a:	2103      	movs	r1, #3
 800dd1c:	69b8      	ldr	r0, [r7, #24]
 800dd1e:	f000 f945 	bl	800dfac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800dd22:	f107 030c 	add.w	r3, r7, #12
 800dd26:	2203      	movs	r2, #3
 800dd28:	69b9      	ldr	r1, [r7, #24]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fdc8 	bl	800e8c0 <dhcp_create_msg>
 800dd30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d066      	beq.n	800de06 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dd3e:	89b8      	ldrh	r0, [r7, #12]
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dd46:	2302      	movs	r3, #2
 800dd48:	2239      	movs	r2, #57	; 0x39
 800dd4a:	f000 f949 	bl	800dfe0 <dhcp_option>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800dd52:	89b8      	ldrh	r0, [r7, #12]
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	33f0      	adds	r3, #240	; 0xf0
 800dd58:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	f000 f999 	bl	800e094 <dhcp_option_short>
 800dd62:	4603      	mov	r3, r0
 800dd64:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800dd66:	89b8      	ldrh	r0, [r7, #12]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dd6e:	2304      	movs	r3, #4
 800dd70:	2232      	movs	r2, #50	; 0x32
 800dd72:	f000 f935 	bl	800dfe0 <dhcp_option>
 800dd76:	4603      	mov	r3, r0
 800dd78:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800dd7a:	89bc      	ldrh	r4, [r7, #12]
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	69db      	ldr	r3, [r3, #28]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f7 fb13 	bl	80053b2 <lwip_htonl>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	461a      	mov	r2, r3
 800dd90:	4629      	mov	r1, r5
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 f9b0 	bl	800e0f8 <dhcp_option_long>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800dd9c:	89b8      	ldrh	r0, [r7, #12]
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dda4:	2303      	movs	r3, #3
 800dda6:	2237      	movs	r2, #55	; 0x37
 800dda8:	f000 f91a 	bl	800dfe0 <dhcp_option>
 800ddac:	4603      	mov	r3, r0
 800ddae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	77bb      	strb	r3, [r7, #30]
 800ddb4:	e00e      	b.n	800ddd4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ddb6:	89b8      	ldrh	r0, [r7, #12]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ddbe:	7fbb      	ldrb	r3, [r7, #30]
 800ddc0:	4a29      	ldr	r2, [pc, #164]	; (800de68 <dhcp_reboot+0x15c>)
 800ddc2:	5cd3      	ldrb	r3, [r2, r3]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	f000 f93f 	bl	800e048 <dhcp_option_byte>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ddce:	7fbb      	ldrb	r3, [r7, #30]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	77bb      	strb	r3, [r7, #30]
 800ddd4:	7fbb      	ldrb	r3, [r7, #30]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d9ed      	bls.n	800ddb6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ddda:	89b8      	ldrh	r0, [r7, #12]
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	33f0      	adds	r3, #240	; 0xf0
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	4619      	mov	r1, r3
 800dde4:	f000 fe42 	bl	800ea6c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dde8:	4b20      	ldr	r3, [pc, #128]	; (800de6c <dhcp_reboot+0x160>)
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	2343      	movs	r3, #67	; 0x43
 800ddf2:	4a1f      	ldr	r2, [pc, #124]	; (800de70 <dhcp_reboot+0x164>)
 800ddf4:	6979      	ldr	r1, [r7, #20]
 800ddf6:	f7fe fd3d 	bl	800c874 <udp_sendto_if>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ddfe:	6978      	ldr	r0, [r7, #20]
 800de00:	f7f8 fdf8 	bl	80069f4 <pbuf_free>
 800de04:	e001      	b.n	800de0a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800de06:	23ff      	movs	r3, #255	; 0xff
 800de08:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	799b      	ldrb	r3, [r3, #6]
 800de0e:	2bff      	cmp	r3, #255	; 0xff
 800de10:	d005      	beq.n	800de1e <dhcp_reboot+0x112>
    dhcp->tries++;
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	799b      	ldrb	r3, [r3, #6]
 800de16:	3301      	adds	r3, #1
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	799b      	ldrb	r3, [r3, #6]
 800de22:	2b09      	cmp	r3, #9
 800de24:	d80a      	bhi.n	800de3c <dhcp_reboot+0x130>
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	799b      	ldrb	r3, [r3, #6]
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	461a      	mov	r2, r3
 800de2e:	0152      	lsls	r2, r2, #5
 800de30:	1ad2      	subs	r2, r2, r3
 800de32:	0092      	lsls	r2, r2, #2
 800de34:	4413      	add	r3, r2
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	b29b      	uxth	r3, r3
 800de3a:	e001      	b.n	800de40 <dhcp_reboot+0x134>
 800de3c:	f242 7310 	movw	r3, #10000	; 0x2710
 800de40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800de42:	89fb      	ldrh	r3, [r7, #14]
 800de44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800de48:	4a0a      	ldr	r2, [pc, #40]	; (800de74 <dhcp_reboot+0x168>)
 800de4a:	fb82 1203 	smull	r1, r2, r2, r3
 800de4e:	1152      	asrs	r2, r2, #5
 800de50:	17db      	asrs	r3, r3, #31
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	b29a      	uxth	r2, r3
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800de5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3720      	adds	r7, #32
 800de62:	46bd      	mov	sp, r7
 800de64:	bdb0      	pop	{r4, r5, r7, pc}
 800de66:	bf00      	nop
 800de68:	20000018 	.word	0x20000018
 800de6c:	20003e80 	.word	0x20003e80
 800de70:	08015e3c 	.word	0x08015e3c
 800de74:	10624dd3 	.word	0x10624dd3

0800de78 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b08a      	sub	sp, #40	; 0x28
 800de7c:	af02      	add	r7, sp, #8
 800de7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 8084 	beq.w	800df96 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	795b      	ldrb	r3, [r3, #5]
 800de92:	2b00      	cmp	r3, #0
 800de94:	f000 8081 	beq.w	800df9a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	699b      	ldr	r3, [r3, #24]
 800de9c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	2200      	movs	r2, #0
 800dea2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	2200      	movs	r2, #0
 800dea8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	2200      	movs	r2, #0
 800deae:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	2200      	movs	r2, #0
 800deb4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	2200      	movs	r2, #0
 800deba:	631a      	str	r2, [r3, #48]	; 0x30
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	62da      	str	r2, [r3, #44]	; 0x2c
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	2200      	movs	r2, #0
 800ded0:	829a      	strh	r2, [r3, #20]
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	8a9a      	ldrh	r2, [r3, #20]
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	825a      	strh	r2, [r3, #18]
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	8a5a      	ldrh	r2, [r3, #18]
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	821a      	strh	r2, [r3, #16]
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	8a1a      	ldrh	r2, [r3, #16]
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fdec 	bl	800eac8 <dhcp_supplied_address>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d03b      	beq.n	800df6e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800def6:	f107 030e 	add.w	r3, r7, #14
 800defa:	2207      	movs	r2, #7
 800defc:	69f9      	ldr	r1, [r7, #28]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 fcde 	bl	800e8c0 <dhcp_create_msg>
 800df04:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d030      	beq.n	800df6e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800df12:	89f8      	ldrh	r0, [r7, #14]
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df1a:	2304      	movs	r3, #4
 800df1c:	2236      	movs	r2, #54	; 0x36
 800df1e:	f000 f85f 	bl	800dfe0 <dhcp_option>
 800df22:	4603      	mov	r3, r0
 800df24:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800df26:	89fc      	ldrh	r4, [r7, #14]
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	4618      	mov	r0, r3
 800df32:	f7f7 fa3e 	bl	80053b2 <lwip_htonl>
 800df36:	4603      	mov	r3, r0
 800df38:	461a      	mov	r2, r3
 800df3a:	4629      	mov	r1, r5
 800df3c:	4620      	mov	r0, r4
 800df3e:	f000 f8db 	bl	800e0f8 <dhcp_option_long>
 800df42:	4603      	mov	r3, r0
 800df44:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800df46:	89f8      	ldrh	r0, [r7, #14]
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	33f0      	adds	r3, #240	; 0xf0
 800df4c:	69ba      	ldr	r2, [r7, #24]
 800df4e:	4619      	mov	r1, r3
 800df50:	f000 fd8c 	bl	800ea6c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800df54:	4b13      	ldr	r3, [pc, #76]	; (800dfa4 <dhcp_release_and_stop+0x12c>)
 800df56:	6818      	ldr	r0, [r3, #0]
 800df58:	f107 0210 	add.w	r2, r7, #16
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	2343      	movs	r3, #67	; 0x43
 800df62:	69b9      	ldr	r1, [r7, #24]
 800df64:	f7fe fc86 	bl	800c874 <udp_sendto_if>
      pbuf_free(p_out);
 800df68:	69b8      	ldr	r0, [r7, #24]
 800df6a:	f7f8 fd43 	bl	80069f4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800df6e:	4b0e      	ldr	r3, [pc, #56]	; (800dfa8 <dhcp_release_and_stop+0x130>)
 800df70:	4a0d      	ldr	r2, [pc, #52]	; (800dfa8 <dhcp_release_and_stop+0x130>)
 800df72:	490d      	ldr	r1, [pc, #52]	; (800dfa8 <dhcp_release_and_stop+0x130>)
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7f8 f8ad 	bl	80060d4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800df7a:	2100      	movs	r1, #0
 800df7c:	69f8      	ldr	r0, [r7, #28]
 800df7e:	f000 f815 	bl	800dfac <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	791b      	ldrb	r3, [r3, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d008      	beq.n	800df9c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800df8a:	f7fe ffbf 	bl	800cf0c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	2200      	movs	r2, #0
 800df92:	711a      	strb	r2, [r3, #4]
 800df94:	e002      	b.n	800df9c <dhcp_release_and_stop+0x124>
    return;
 800df96:	bf00      	nop
 800df98:	e000      	b.n	800df9c <dhcp_release_and_stop+0x124>
    return;
 800df9a:	bf00      	nop
  }
}
 800df9c:	3720      	adds	r7, #32
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bdb0      	pop	{r4, r5, r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20003e80 	.word	0x20003e80
 800dfa8:	08015e38 	.word	0x08015e38

0800dfac <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	795b      	ldrb	r3, [r3, #5]
 800dfbc:	78fa      	ldrb	r2, [r7, #3]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d008      	beq.n	800dfd4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	78fa      	ldrb	r2, [r7, #3]
 800dfc6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	811a      	strh	r2, [r3, #8]
  }
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6039      	str	r1, [r7, #0]
 800dfe8:	4611      	mov	r1, r2
 800dfea:	461a      	mov	r2, r3
 800dfec:	4603      	mov	r3, r0
 800dfee:	80fb      	strh	r3, [r7, #6]
 800dff0:	460b      	mov	r3, r1
 800dff2:	717b      	strb	r3, [r7, #5]
 800dff4:	4613      	mov	r3, r2
 800dff6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800dff8:	88fa      	ldrh	r2, [r7, #6]
 800dffa:	793b      	ldrb	r3, [r7, #4]
 800dffc:	4413      	add	r3, r2
 800dffe:	3302      	adds	r3, #2
 800e000:	2b44      	cmp	r3, #68	; 0x44
 800e002:	d906      	bls.n	800e012 <dhcp_option+0x32>
 800e004:	4b0d      	ldr	r3, [pc, #52]	; (800e03c <dhcp_option+0x5c>)
 800e006:	f240 529a 	movw	r2, #1434	; 0x59a
 800e00a:	490d      	ldr	r1, [pc, #52]	; (800e040 <dhcp_option+0x60>)
 800e00c:	480d      	ldr	r0, [pc, #52]	; (800e044 <dhcp_option+0x64>)
 800e00e:	f003 fffb 	bl	8012008 <iprintf>
  options[options_out_len++] = option_type;
 800e012:	88fb      	ldrh	r3, [r7, #6]
 800e014:	1c5a      	adds	r2, r3, #1
 800e016:	80fa      	strh	r2, [r7, #6]
 800e018:	461a      	mov	r2, r3
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	4413      	add	r3, r2
 800e01e:	797a      	ldrb	r2, [r7, #5]
 800e020:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800e022:	88fb      	ldrh	r3, [r7, #6]
 800e024:	1c5a      	adds	r2, r3, #1
 800e026:	80fa      	strh	r2, [r7, #6]
 800e028:	461a      	mov	r2, r3
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	4413      	add	r3, r2
 800e02e:	793a      	ldrb	r2, [r7, #4]
 800e030:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e032:	88fb      	ldrh	r3, [r7, #6]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	0801522c 	.word	0x0801522c
 800e040:	080153c0 	.word	0x080153c0
 800e044:	0801528c 	.word	0x0801528c

0800e048 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	6039      	str	r1, [r7, #0]
 800e052:	80fb      	strh	r3, [r7, #6]
 800e054:	4613      	mov	r3, r2
 800e056:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e058:	88fb      	ldrh	r3, [r7, #6]
 800e05a:	2b43      	cmp	r3, #67	; 0x43
 800e05c:	d906      	bls.n	800e06c <dhcp_option_byte+0x24>
 800e05e:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <dhcp_option_byte+0x40>)
 800e060:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800e064:	4909      	ldr	r1, [pc, #36]	; (800e08c <dhcp_option_byte+0x44>)
 800e066:	480a      	ldr	r0, [pc, #40]	; (800e090 <dhcp_option_byte+0x48>)
 800e068:	f003 ffce 	bl	8012008 <iprintf>
  options[options_out_len++] = value;
 800e06c:	88fb      	ldrh	r3, [r7, #6]
 800e06e:	1c5a      	adds	r2, r3, #1
 800e070:	80fa      	strh	r2, [r7, #6]
 800e072:	461a      	mov	r2, r3
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	4413      	add	r3, r2
 800e078:	797a      	ldrb	r2, [r7, #5]
 800e07a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e07c:	88fb      	ldrh	r3, [r7, #6]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	0801522c 	.word	0x0801522c
 800e08c:	08015404 	.word	0x08015404
 800e090:	0801528c 	.word	0x0801528c

0800e094 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	4603      	mov	r3, r0
 800e09c:	6039      	str	r1, [r7, #0]
 800e09e:	80fb      	strh	r3, [r7, #6]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e0a4:	88fb      	ldrh	r3, [r7, #6]
 800e0a6:	3302      	adds	r3, #2
 800e0a8:	2b44      	cmp	r3, #68	; 0x44
 800e0aa:	d906      	bls.n	800e0ba <dhcp_option_short+0x26>
 800e0ac:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <dhcp_option_short+0x58>)
 800e0ae:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e0b2:	490f      	ldr	r1, [pc, #60]	; (800e0f0 <dhcp_option_short+0x5c>)
 800e0b4:	480f      	ldr	r0, [pc, #60]	; (800e0f4 <dhcp_option_short+0x60>)
 800e0b6:	f003 ffa7 	bl	8012008 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e0ba:	88bb      	ldrh	r3, [r7, #4]
 800e0bc:	0a1b      	lsrs	r3, r3, #8
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	88fb      	ldrh	r3, [r7, #6]
 800e0c2:	1c59      	adds	r1, r3, #1
 800e0c4:	80f9      	strh	r1, [r7, #6]
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	440b      	add	r3, r1
 800e0cc:	b2d2      	uxtb	r2, r2
 800e0ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e0d0:	88fb      	ldrh	r3, [r7, #6]
 800e0d2:	1c5a      	adds	r2, r3, #1
 800e0d4:	80fa      	strh	r2, [r7, #6]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	4413      	add	r3, r2
 800e0dc:	88ba      	ldrh	r2, [r7, #4]
 800e0de:	b2d2      	uxtb	r2, r2
 800e0e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e0e2:	88fb      	ldrh	r3, [r7, #6]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	0801522c 	.word	0x0801522c
 800e0f0:	0801543c 	.word	0x0801543c
 800e0f4:	0801528c 	.word	0x0801528c

0800e0f8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	4603      	mov	r3, r0
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e106:	89fb      	ldrh	r3, [r7, #14]
 800e108:	3304      	adds	r3, #4
 800e10a:	2b44      	cmp	r3, #68	; 0x44
 800e10c:	d906      	bls.n	800e11c <dhcp_option_long+0x24>
 800e10e:	4b19      	ldr	r3, [pc, #100]	; (800e174 <dhcp_option_long+0x7c>)
 800e110:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800e114:	4918      	ldr	r1, [pc, #96]	; (800e178 <dhcp_option_long+0x80>)
 800e116:	4819      	ldr	r0, [pc, #100]	; (800e17c <dhcp_option_long+0x84>)
 800e118:	f003 ff76 	bl	8012008 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	0e1a      	lsrs	r2, r3, #24
 800e120:	89fb      	ldrh	r3, [r7, #14]
 800e122:	1c59      	adds	r1, r3, #1
 800e124:	81f9      	strh	r1, [r7, #14]
 800e126:	4619      	mov	r1, r3
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	440b      	add	r3, r1
 800e12c:	b2d2      	uxtb	r2, r2
 800e12e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	0c1a      	lsrs	r2, r3, #16
 800e134:	89fb      	ldrh	r3, [r7, #14]
 800e136:	1c59      	adds	r1, r3, #1
 800e138:	81f9      	strh	r1, [r7, #14]
 800e13a:	4619      	mov	r1, r3
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	440b      	add	r3, r1
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	0a1a      	lsrs	r2, r3, #8
 800e148:	89fb      	ldrh	r3, [r7, #14]
 800e14a:	1c59      	adds	r1, r3, #1
 800e14c:	81f9      	strh	r1, [r7, #14]
 800e14e:	4619      	mov	r1, r3
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	440b      	add	r3, r1
 800e154:	b2d2      	uxtb	r2, r2
 800e156:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800e158:	89fb      	ldrh	r3, [r7, #14]
 800e15a:	1c5a      	adds	r2, r3, #1
 800e15c:	81fa      	strh	r2, [r7, #14]
 800e15e:	461a      	mov	r2, r3
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	4413      	add	r3, r2
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	b2d2      	uxtb	r2, r2
 800e168:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e16a:	89fb      	ldrh	r3, [r7, #14]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	0801522c 	.word	0x0801522c
 800e178:	08015478 	.word	0x08015478
 800e17c:	0801528c 	.word	0x0801528c

0800e180 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b090      	sub	sp, #64	; 0x40
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800e192:	2208      	movs	r2, #8
 800e194:	2100      	movs	r1, #0
 800e196:	48be      	ldr	r0, [pc, #760]	; (800e490 <dhcp_parse_reply+0x310>)
 800e198:	f003 ff2e 	bl	8011ff8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	895b      	ldrh	r3, [r3, #10]
 800e1a0:	2b2b      	cmp	r3, #43	; 0x2b
 800e1a2:	d802      	bhi.n	800e1aa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800e1a4:	f06f 0301 	mvn.w	r3, #1
 800e1a8:	e2a8      	b.n	800e6fc <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800e1b0:	23f0      	movs	r3, #240	; 0xf0
 800e1b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	891b      	ldrh	r3, [r3, #8]
 800e1b8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e1be:	e00c      	b.n	800e1da <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c2:	895b      	ldrh	r3, [r3, #10]
 800e1c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	895b      	ldrh	r3, [r3, #10]
 800e1ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <dhcp_parse_reply+0x6a>
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e2:	895b      	ldrh	r3, [r3, #10]
 800e1e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d2ea      	bcs.n	800e1c0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d102      	bne.n	800e1f6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800e1f0:	f06f 0301 	mvn.w	r3, #1
 800e1f4:	e282      	b.n	800e6fc <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800e1f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800e1fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e1fc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e204:	e23a      	b.n	800e67c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800e206:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e20a:	4413      	add	r3, r2
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800e210:	2300      	movs	r3, #0
 800e212:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800e216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e21a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800e21c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e21e:	3302      	adds	r3, #2
 800e220:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800e222:	8bfa      	ldrh	r2, [r7, #30]
 800e224:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e226:	429a      	cmp	r2, r3
 800e228:	d202      	bcs.n	800e230 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800e22a:	f06f 0301 	mvn.w	r3, #1
 800e22e:	e265      	b.n	800e6fc <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800e230:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e232:	3301      	adds	r3, #1
 800e234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e236:	8952      	ldrh	r2, [r2, #10]
 800e238:	4293      	cmp	r3, r2
 800e23a:	da07      	bge.n	800e24c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800e23c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e23e:	3301      	adds	r3, #1
 800e240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e242:	4413      	add	r3, r2
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e24a:	e00b      	b.n	800e264 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d004      	beq.n	800e25e <dhcp_parse_reply+0xde>
 800e254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	e000      	b.n	800e260 <dhcp_parse_reply+0xe0>
 800e25e:	2300      	movs	r3, #0
 800e260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800e264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800e26c:	7dfb      	ldrb	r3, [r7, #23]
 800e26e:	2b3b      	cmp	r3, #59	; 0x3b
 800e270:	f200 812d 	bhi.w	800e4ce <dhcp_parse_reply+0x34e>
 800e274:	a201      	add	r2, pc, #4	; (adr r2, 800e27c <dhcp_parse_reply+0xfc>)
 800e276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27a:	bf00      	nop
 800e27c:	0800e36d 	.word	0x0800e36d
 800e280:	0800e37d 	.word	0x0800e37d
 800e284:	0800e4cf 	.word	0x0800e4cf
 800e288:	0800e39f 	.word	0x0800e39f
 800e28c:	0800e4cf 	.word	0x0800e4cf
 800e290:	0800e4cf 	.word	0x0800e4cf
 800e294:	0800e4cf 	.word	0x0800e4cf
 800e298:	0800e4cf 	.word	0x0800e4cf
 800e29c:	0800e4cf 	.word	0x0800e4cf
 800e2a0:	0800e4cf 	.word	0x0800e4cf
 800e2a4:	0800e4cf 	.word	0x0800e4cf
 800e2a8:	0800e4cf 	.word	0x0800e4cf
 800e2ac:	0800e4cf 	.word	0x0800e4cf
 800e2b0:	0800e4cf 	.word	0x0800e4cf
 800e2b4:	0800e4cf 	.word	0x0800e4cf
 800e2b8:	0800e4cf 	.word	0x0800e4cf
 800e2bc:	0800e4cf 	.word	0x0800e4cf
 800e2c0:	0800e4cf 	.word	0x0800e4cf
 800e2c4:	0800e4cf 	.word	0x0800e4cf
 800e2c8:	0800e4cf 	.word	0x0800e4cf
 800e2cc:	0800e4cf 	.word	0x0800e4cf
 800e2d0:	0800e4cf 	.word	0x0800e4cf
 800e2d4:	0800e4cf 	.word	0x0800e4cf
 800e2d8:	0800e4cf 	.word	0x0800e4cf
 800e2dc:	0800e4cf 	.word	0x0800e4cf
 800e2e0:	0800e4cf 	.word	0x0800e4cf
 800e2e4:	0800e4cf 	.word	0x0800e4cf
 800e2e8:	0800e4cf 	.word	0x0800e4cf
 800e2ec:	0800e4cf 	.word	0x0800e4cf
 800e2f0:	0800e4cf 	.word	0x0800e4cf
 800e2f4:	0800e4cf 	.word	0x0800e4cf
 800e2f8:	0800e4cf 	.word	0x0800e4cf
 800e2fc:	0800e4cf 	.word	0x0800e4cf
 800e300:	0800e4cf 	.word	0x0800e4cf
 800e304:	0800e4cf 	.word	0x0800e4cf
 800e308:	0800e4cf 	.word	0x0800e4cf
 800e30c:	0800e4cf 	.word	0x0800e4cf
 800e310:	0800e4cf 	.word	0x0800e4cf
 800e314:	0800e4cf 	.word	0x0800e4cf
 800e318:	0800e4cf 	.word	0x0800e4cf
 800e31c:	0800e4cf 	.word	0x0800e4cf
 800e320:	0800e4cf 	.word	0x0800e4cf
 800e324:	0800e4cf 	.word	0x0800e4cf
 800e328:	0800e4cf 	.word	0x0800e4cf
 800e32c:	0800e4cf 	.word	0x0800e4cf
 800e330:	0800e4cf 	.word	0x0800e4cf
 800e334:	0800e4cf 	.word	0x0800e4cf
 800e338:	0800e4cf 	.word	0x0800e4cf
 800e33c:	0800e4cf 	.word	0x0800e4cf
 800e340:	0800e4cf 	.word	0x0800e4cf
 800e344:	0800e4cf 	.word	0x0800e4cf
 800e348:	0800e3cb 	.word	0x0800e3cb
 800e34c:	0800e3ed 	.word	0x0800e3ed
 800e350:	0800e429 	.word	0x0800e429
 800e354:	0800e44b 	.word	0x0800e44b
 800e358:	0800e4cf 	.word	0x0800e4cf
 800e35c:	0800e4cf 	.word	0x0800e4cf
 800e360:	0800e4cf 	.word	0x0800e4cf
 800e364:	0800e46d 	.word	0x0800e46d
 800e368:	0800e4ad 	.word	0x0800e4ad
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800e36c:	2300      	movs	r3, #0
 800e36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800e37a:	e0ac      	b.n	800e4d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e380:	2b04      	cmp	r3, #4
 800e382:	d009      	beq.n	800e398 <dhcp_parse_reply+0x218>
 800e384:	4b43      	ldr	r3, [pc, #268]	; (800e494 <dhcp_parse_reply+0x314>)
 800e386:	f240 622e 	movw	r2, #1582	; 0x62e
 800e38a:	4943      	ldr	r1, [pc, #268]	; (800e498 <dhcp_parse_reply+0x318>)
 800e38c:	4843      	ldr	r0, [pc, #268]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e38e:	f003 fe3b 	bl	8012008 <iprintf>
 800e392:	f06f 0305 	mvn.w	r3, #5
 800e396:	e1b1      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e398:	2306      	movs	r3, #6
 800e39a:	623b      	str	r3, [r7, #32]
        break;
 800e39c:	e09b      	b.n	800e4d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800e39e:	2304      	movs	r3, #4
 800e3a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e3a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d209      	bcs.n	800e3c4 <dhcp_parse_reply+0x244>
 800e3b0:	4b38      	ldr	r3, [pc, #224]	; (800e494 <dhcp_parse_reply+0x314>)
 800e3b2:	f240 6233 	movw	r2, #1587	; 0x633
 800e3b6:	493a      	ldr	r1, [pc, #232]	; (800e4a0 <dhcp_parse_reply+0x320>)
 800e3b8:	4838      	ldr	r0, [pc, #224]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e3ba:	f003 fe25 	bl	8012008 <iprintf>
 800e3be:	f06f 0305 	mvn.w	r3, #5
 800e3c2:	e19b      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e3c4:	2307      	movs	r3, #7
 800e3c6:	623b      	str	r3, [r7, #32]
        break;
 800e3c8:	e085      	b.n	800e4d6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	d009      	beq.n	800e3e6 <dhcp_parse_reply+0x266>
 800e3d2:	4b30      	ldr	r3, [pc, #192]	; (800e494 <dhcp_parse_reply+0x314>)
 800e3d4:	f240 6241 	movw	r2, #1601	; 0x641
 800e3d8:	492f      	ldr	r1, [pc, #188]	; (800e498 <dhcp_parse_reply+0x318>)
 800e3da:	4830      	ldr	r0, [pc, #192]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e3dc:	f003 fe14 	bl	8012008 <iprintf>
 800e3e0:	f06f 0305 	mvn.w	r3, #5
 800e3e4:	e18a      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	623b      	str	r3, [r7, #32]
        break;
 800e3ea:	e074      	b.n	800e4d6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d009      	beq.n	800e408 <dhcp_parse_reply+0x288>
 800e3f4:	4b27      	ldr	r3, [pc, #156]	; (800e494 <dhcp_parse_reply+0x314>)
 800e3f6:	f240 624f 	movw	r2, #1615	; 0x64f
 800e3fa:	492a      	ldr	r1, [pc, #168]	; (800e4a4 <dhcp_parse_reply+0x324>)
 800e3fc:	4827      	ldr	r0, [pc, #156]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e3fe:	f003 fe03 	bl	8012008 <iprintf>
 800e402:	f06f 0305 	mvn.w	r3, #5
 800e406:	e179      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e408:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e40a:	2bf0      	cmp	r3, #240	; 0xf0
 800e40c:	d009      	beq.n	800e422 <dhcp_parse_reply+0x2a2>
 800e40e:	4b21      	ldr	r3, [pc, #132]	; (800e494 <dhcp_parse_reply+0x314>)
 800e410:	f240 6251 	movw	r2, #1617	; 0x651
 800e414:	4924      	ldr	r1, [pc, #144]	; (800e4a8 <dhcp_parse_reply+0x328>)
 800e416:	4821      	ldr	r0, [pc, #132]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e418:	f003 fdf6 	bl	8012008 <iprintf>
 800e41c:	f06f 0305 	mvn.w	r3, #5
 800e420:	e16c      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e422:	2300      	movs	r3, #0
 800e424:	623b      	str	r3, [r7, #32]
        break;
 800e426:	e056      	b.n	800e4d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d009      	beq.n	800e444 <dhcp_parse_reply+0x2c4>
 800e430:	4b18      	ldr	r3, [pc, #96]	; (800e494 <dhcp_parse_reply+0x314>)
 800e432:	f240 6255 	movw	r2, #1621	; 0x655
 800e436:	491b      	ldr	r1, [pc, #108]	; (800e4a4 <dhcp_parse_reply+0x324>)
 800e438:	4818      	ldr	r0, [pc, #96]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e43a:	f003 fde5 	bl	8012008 <iprintf>
 800e43e:	f06f 0305 	mvn.w	r3, #5
 800e442:	e15b      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800e444:	2301      	movs	r3, #1
 800e446:	623b      	str	r3, [r7, #32]
        break;
 800e448:	e045      	b.n	800e4d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e44a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d009      	beq.n	800e466 <dhcp_parse_reply+0x2e6>
 800e452:	4b10      	ldr	r3, [pc, #64]	; (800e494 <dhcp_parse_reply+0x314>)
 800e454:	f240 6259 	movw	r2, #1625	; 0x659
 800e458:	490f      	ldr	r1, [pc, #60]	; (800e498 <dhcp_parse_reply+0x318>)
 800e45a:	4810      	ldr	r0, [pc, #64]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e45c:	f003 fdd4 	bl	8012008 <iprintf>
 800e460:	f06f 0305 	mvn.w	r3, #5
 800e464:	e14a      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800e466:	2302      	movs	r3, #2
 800e468:	623b      	str	r3, [r7, #32]
        break;
 800e46a:	e034      	b.n	800e4d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e470:	2b04      	cmp	r3, #4
 800e472:	d009      	beq.n	800e488 <dhcp_parse_reply+0x308>
 800e474:	4b07      	ldr	r3, [pc, #28]	; (800e494 <dhcp_parse_reply+0x314>)
 800e476:	f240 625d 	movw	r2, #1629	; 0x65d
 800e47a:	4907      	ldr	r1, [pc, #28]	; (800e498 <dhcp_parse_reply+0x318>)
 800e47c:	4807      	ldr	r0, [pc, #28]	; (800e49c <dhcp_parse_reply+0x31c>)
 800e47e:	f003 fdc3 	bl	8012008 <iprintf>
 800e482:	f06f 0305 	mvn.w	r3, #5
 800e486:	e139      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800e488:	2304      	movs	r3, #4
 800e48a:	623b      	str	r3, [r7, #32]
        break;
 800e48c:	e023      	b.n	800e4d6 <dhcp_parse_reply+0x356>
 800e48e:	bf00      	nop
 800e490:	200076f0 	.word	0x200076f0
 800e494:	0801522c 	.word	0x0801522c
 800e498:	080154b4 	.word	0x080154b4
 800e49c:	0801528c 	.word	0x0801528c
 800e4a0:	080154c0 	.word	0x080154c0
 800e4a4:	080154d4 	.word	0x080154d4
 800e4a8:	080154e0 	.word	0x080154e0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d009      	beq.n	800e4c8 <dhcp_parse_reply+0x348>
 800e4b4:	4b93      	ldr	r3, [pc, #588]	; (800e704 <dhcp_parse_reply+0x584>)
 800e4b6:	f240 6261 	movw	r2, #1633	; 0x661
 800e4ba:	4993      	ldr	r1, [pc, #588]	; (800e708 <dhcp_parse_reply+0x588>)
 800e4bc:	4893      	ldr	r0, [pc, #588]	; (800e70c <dhcp_parse_reply+0x58c>)
 800e4be:	f003 fda3 	bl	8012008 <iprintf>
 800e4c2:	f06f 0305 	mvn.w	r3, #5
 800e4c6:	e119      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800e4c8:	2305      	movs	r3, #5
 800e4ca:	623b      	str	r3, [r7, #32]
        break;
 800e4cc:	e003      	b.n	800e4d6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800e4d4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d103      	bne.n	800e4e4 <dhcp_parse_reply+0x364>
      offset++;
 800e4dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4de:	3301      	adds	r3, #1
 800e4e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e4e2:	e0a1      	b.n	800e628 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800e4e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ea:	4413      	add	r3, r2
 800e4ec:	3302      	adds	r3, #2
 800e4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4f2:	db02      	blt.n	800e4fa <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800e4f4:	f06f 0301 	mvn.w	r3, #1
 800e4f8:	e100      	b.n	800e6fc <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800e4fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e502:	4413      	add	r3, r2
 800e504:	b29b      	uxth	r3, r3
 800e506:	3302      	adds	r3, #2
 800e508:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800e50a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 808a 	beq.w	800e628 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	db02      	blt.n	800e524 <dhcp_parse_reply+0x3a4>
 800e51e:	6a3b      	ldr	r3, [r7, #32]
 800e520:	2b07      	cmp	r3, #7
 800e522:	dd06      	ble.n	800e532 <dhcp_parse_reply+0x3b2>
 800e524:	4b77      	ldr	r3, [pc, #476]	; (800e704 <dhcp_parse_reply+0x584>)
 800e526:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800e52a:	4979      	ldr	r1, [pc, #484]	; (800e710 <dhcp_parse_reply+0x590>)
 800e52c:	4877      	ldr	r0, [pc, #476]	; (800e70c <dhcp_parse_reply+0x58c>)
 800e52e:	f003 fd6b 	bl	8012008 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800e532:	4a78      	ldr	r2, [pc, #480]	; (800e714 <dhcp_parse_reply+0x594>)
 800e534:	6a3b      	ldr	r3, [r7, #32]
 800e536:	4413      	add	r3, r2
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d174      	bne.n	800e628 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800e53e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e542:	2b04      	cmp	r3, #4
 800e544:	bf28      	it	cs
 800e546:	2304      	movcs	r3, #4
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e54c:	8bfb      	ldrh	r3, [r7, #30]
 800e54e:	8aba      	ldrh	r2, [r7, #20]
 800e550:	f107 0108 	add.w	r1, r7, #8
 800e554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e556:	f7f8 fc53 	bl	8006e00 <pbuf_copy_partial>
 800e55a:	4603      	mov	r3, r0
 800e55c:	461a      	mov	r2, r3
 800e55e:	8abb      	ldrh	r3, [r7, #20]
 800e560:	4293      	cmp	r3, r2
 800e562:	d002      	beq.n	800e56a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800e564:	f06f 0301 	mvn.w	r3, #1
 800e568:	e0c8      	b.n	800e6fc <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800e56a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d933      	bls.n	800e5da <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800e572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e576:	f003 0303 	and.w	r3, r3, #3
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d009      	beq.n	800e594 <dhcp_parse_reply+0x414>
 800e580:	4b60      	ldr	r3, [pc, #384]	; (800e704 <dhcp_parse_reply+0x584>)
 800e582:	f240 6281 	movw	r2, #1665	; 0x681
 800e586:	4964      	ldr	r1, [pc, #400]	; (800e718 <dhcp_parse_reply+0x598>)
 800e588:	4860      	ldr	r0, [pc, #384]	; (800e70c <dhcp_parse_reply+0x58c>)
 800e58a:	f003 fd3d 	bl	8012008 <iprintf>
 800e58e:	f06f 0305 	mvn.w	r3, #5
 800e592:	e0b3      	b.n	800e6fc <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800e594:	4a5f      	ldr	r2, [pc, #380]	; (800e714 <dhcp_parse_reply+0x594>)
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	4413      	add	r3, r2
 800e59a:	2201      	movs	r2, #1
 800e59c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f6 ff06 	bl	80053b2 <lwip_htonl>
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	4a5c      	ldr	r2, [pc, #368]	; (800e71c <dhcp_parse_reply+0x59c>)
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800e5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5b4:	3b04      	subs	r3, #4
 800e5b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800e5ba:	8bfb      	ldrh	r3, [r7, #30]
 800e5bc:	3304      	adds	r3, #4
 800e5be:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800e5c0:	8a7a      	ldrh	r2, [r7, #18]
 800e5c2:	8bfb      	ldrh	r3, [r7, #30]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d202      	bcs.n	800e5ce <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800e5c8:	f06f 0301 	mvn.w	r3, #1
 800e5cc:	e096      	b.n	800e6fc <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800e5ce:	8a7b      	ldrh	r3, [r7, #18]
 800e5d0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800e5d2:	6a3b      	ldr	r3, [r7, #32]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800e5d8:	e79e      	b.n	800e518 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800e5da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5de:	2b04      	cmp	r3, #4
 800e5e0:	d106      	bne.n	800e5f0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7f6 fee4 	bl	80053b2 <lwip_htonl>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	60bb      	str	r3, [r7, #8]
 800e5ee:	e011      	b.n	800e614 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800e5f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d009      	beq.n	800e60c <dhcp_parse_reply+0x48c>
 800e5f8:	4b42      	ldr	r3, [pc, #264]	; (800e704 <dhcp_parse_reply+0x584>)
 800e5fa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800e5fe:	4948      	ldr	r1, [pc, #288]	; (800e720 <dhcp_parse_reply+0x5a0>)
 800e600:	4842      	ldr	r0, [pc, #264]	; (800e70c <dhcp_parse_reply+0x58c>)
 800e602:	f003 fd01 	bl	8012008 <iprintf>
 800e606:	f06f 0305 	mvn.w	r3, #5
 800e60a:	e077      	b.n	800e6fc <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800e60c:	f107 0308 	add.w	r3, r7, #8
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800e614:	4a3f      	ldr	r2, [pc, #252]	; (800e714 <dhcp_parse_reply+0x594>)
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	4413      	add	r3, r2
 800e61a:	2201      	movs	r2, #1
 800e61c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800e61e:	68ba      	ldr	r2, [r7, #8]
 800e620:	493e      	ldr	r1, [pc, #248]	; (800e71c <dhcp_parse_reply+0x59c>)
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	895b      	ldrh	r3, [r3, #10]
 800e62c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e62e:	429a      	cmp	r2, r3
 800e630:	d324      	bcc.n	800e67c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800e632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e634:	895b      	ldrh	r3, [r3, #10]
 800e636:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800e63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63e:	895b      	ldrh	r3, [r3, #10]
 800e640:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800e646:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e648:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d213      	bcs.n	800e676 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	2b00      	cmp	r3, #0
 800e658:	d109      	bne.n	800e66e <dhcp_parse_reply+0x4ee>
 800e65a:	4b2a      	ldr	r3, [pc, #168]	; (800e704 <dhcp_parse_reply+0x584>)
 800e65c:	f240 629d 	movw	r2, #1693	; 0x69d
 800e660:	4930      	ldr	r1, [pc, #192]	; (800e724 <dhcp_parse_reply+0x5a4>)
 800e662:	482a      	ldr	r0, [pc, #168]	; (800e70c <dhcp_parse_reply+0x58c>)
 800e664:	f003 fcd0 	bl	8012008 <iprintf>
 800e668:	f06f 0305 	mvn.w	r3, #5
 800e66c:	e046      	b.n	800e6fc <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800e66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e674:	e002      	b.n	800e67c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800e676:	f06f 0301 	mvn.w	r3, #1
 800e67a:	e03f      	b.n	800e6fc <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00a      	beq.n	800e698 <dhcp_parse_reply+0x518>
 800e682:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e684:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e686:	429a      	cmp	r2, r3
 800e688:	d206      	bcs.n	800e698 <dhcp_parse_reply+0x518>
 800e68a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e68c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e68e:	4413      	add	r3, r2
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2bff      	cmp	r3, #255	; 0xff
 800e694:	f47f adb7 	bne.w	800e206 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800e698:	4b1e      	ldr	r3, [pc, #120]	; (800e714 <dhcp_parse_reply+0x594>)
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d018      	beq.n	800e6d2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e6a0:	4b1e      	ldr	r3, [pc, #120]	; (800e71c <dhcp_parse_reply+0x59c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e6a6:	4b1b      	ldr	r3, [pc, #108]	; (800e714 <dhcp_parse_reply+0x594>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d102      	bne.n	800e6b8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6b6:	e00c      	b.n	800e6d2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d102      	bne.n	800e6c4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6c2:	e006      	b.n	800e6d2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	d103      	bne.n	800e6d2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d006      	beq.n	800e6e6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800e6dc:	236c      	movs	r3, #108	; 0x6c
 800e6de:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e6e0:	23ec      	movs	r3, #236	; 0xec
 800e6e2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800e6e4:	e569      	b.n	800e1ba <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d006      	beq.n	800e6fa <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800e6f0:	232c      	movs	r3, #44	; 0x2c
 800e6f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800e6f4:	236c      	movs	r3, #108	; 0x6c
 800e6f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800e6f8:	e55f      	b.n	800e1ba <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3740      	adds	r7, #64	; 0x40
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	0801522c 	.word	0x0801522c
 800e708:	080154b4 	.word	0x080154b4
 800e70c:	0801528c 	.word	0x0801528c
 800e710:	080154f8 	.word	0x080154f8
 800e714:	200076f0 	.word	0x200076f0
 800e718:	0801550c 	.word	0x0801550c
 800e71c:	200076f8 	.word	0x200076f8
 800e720:	08015524 	.word	0x08015524
 800e724:	08015538 	.word	0x08015538

0800e728 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08a      	sub	sp, #40	; 0x28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800e736:	4b5f      	ldr	r3, [pc, #380]	; (800e8b4 <dhcp_recv+0x18c>)
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e73c:	6a3b      	ldr	r3, [r7, #32]
 800e73e:	6a1b      	ldr	r3, [r3, #32]
 800e740:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 809d 	beq.w	800e88a <dhcp_recv+0x162>
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	791b      	ldrb	r3, [r3, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 8098 	beq.w	800e88a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	895b      	ldrh	r3, [r3, #10]
 800e75e:	2b2b      	cmp	r3, #43	; 0x2b
 800e760:	f240 8095 	bls.w	800e88e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	2b02      	cmp	r3, #2
 800e76a:	f040 8092 	bne.w	800e892 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e76e:	2300      	movs	r3, #0
 800e770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e774:	e012      	b.n	800e79c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800e776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e77a:	6a3a      	ldr	r2, [r7, #32]
 800e77c:	4413      	add	r3, r2
 800e77e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e786:	69b9      	ldr	r1, [r7, #24]
 800e788:	440b      	add	r3, r1
 800e78a:	7f1b      	ldrb	r3, [r3, #28]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	f040 8082 	bne.w	800e896 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e796:	3301      	adds	r3, #1
 800e798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e7a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d203      	bcs.n	800e7b2 <dhcp_recv+0x8a>
 800e7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ae:	2b05      	cmp	r3, #5
 800e7b0:	d9e1      	bls.n	800e776 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7f6 fdfb 	bl	80053b2 <lwip_htonl>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d169      	bne.n	800e89a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800e7c6:	69f9      	ldr	r1, [r7, #28]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff fcd9 	bl	800e180 <dhcp_parse_reply>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d164      	bne.n	800e89e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800e7d4:	4b38      	ldr	r3, [pc, #224]	; (800e8b8 <dhcp_recv+0x190>)
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d062      	beq.n	800e8a2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800e7e2:	4b36      	ldr	r3, [pc, #216]	; (800e8bc <dhcp_recv+0x194>)
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800e7e8:	7cfb      	ldrb	r3, [r7, #19]
 800e7ea:	2b05      	cmp	r3, #5
 800e7ec:	d12a      	bne.n	800e844 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	795b      	ldrb	r3, [r3, #5]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d112      	bne.n	800e81c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800e7f6:	6979      	ldr	r1, [r7, #20]
 800e7f8:	6a38      	ldr	r0, [r7, #32]
 800e7fa:	f7fe fe53 	bl	800d4a4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e804:	f003 0308 	and.w	r3, r3, #8
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d003      	beq.n	800e814 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800e80c:	6a38      	ldr	r0, [r7, #32]
 800e80e:	f7fe fbc1 	bl	800cf94 <dhcp_check>
 800e812:	e047      	b.n	800e8a4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800e814:	6a38      	ldr	r0, [r7, #32]
 800e816:	f7ff f867 	bl	800d8e8 <dhcp_bind>
 800e81a:	e043      	b.n	800e8a4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	795b      	ldrb	r3, [r3, #5]
 800e820:	2b03      	cmp	r3, #3
 800e822:	d007      	beq.n	800e834 <dhcp_recv+0x10c>
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	795b      	ldrb	r3, [r3, #5]
 800e828:	2b04      	cmp	r3, #4
 800e82a:	d003      	beq.n	800e834 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e830:	2b05      	cmp	r3, #5
 800e832:	d137      	bne.n	800e8a4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800e834:	6979      	ldr	r1, [r7, #20]
 800e836:	6a38      	ldr	r0, [r7, #32]
 800e838:	f7fe fe34 	bl	800d4a4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800e83c:	6a38      	ldr	r0, [r7, #32]
 800e83e:	f7ff f853 	bl	800d8e8 <dhcp_bind>
 800e842:	e02f      	b.n	800e8a4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800e844:	7cfb      	ldrb	r3, [r7, #19]
 800e846:	2b06      	cmp	r3, #6
 800e848:	d113      	bne.n	800e872 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800e84e:	2b03      	cmp	r3, #3
 800e850:	d00b      	beq.n	800e86a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	795b      	ldrb	r3, [r3, #5]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d007      	beq.n	800e86a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e85e:	2b04      	cmp	r3, #4
 800e860:	d003      	beq.n	800e86a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	795b      	ldrb	r3, [r3, #5]
 800e866:	2b05      	cmp	r3, #5
 800e868:	d103      	bne.n	800e872 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800e86a:	6a38      	ldr	r0, [r7, #32]
 800e86c:	f7fe fb78 	bl	800cf60 <dhcp_handle_nak>
 800e870:	e018      	b.n	800e8a4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800e872:	7cfb      	ldrb	r3, [r7, #19]
 800e874:	2b02      	cmp	r3, #2
 800e876:	d108      	bne.n	800e88a <dhcp_recv+0x162>
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	795b      	ldrb	r3, [r3, #5]
 800e87c:	2b06      	cmp	r3, #6
 800e87e:	d104      	bne.n	800e88a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800e880:	6979      	ldr	r1, [r7, #20]
 800e882:	6a38      	ldr	r0, [r7, #32]
 800e884:	f7fe fbba 	bl	800cffc <dhcp_handle_offer>
 800e888:	e00c      	b.n	800e8a4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800e88a:	bf00      	nop
 800e88c:	e00a      	b.n	800e8a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e88e:	bf00      	nop
 800e890:	e008      	b.n	800e8a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e892:	bf00      	nop
 800e894:	e006      	b.n	800e8a4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800e896:	bf00      	nop
 800e898:	e004      	b.n	800e8a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e89a:	bf00      	nop
 800e89c:	e002      	b.n	800e8a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e89e:	bf00      	nop
 800e8a0:	e000      	b.n	800e8a4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e8a2:	bf00      	nop
  pbuf_free(p);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f7f8 f8a5 	bl	80069f4 <pbuf_free>
}
 800e8aa:	bf00      	nop
 800e8ac:	3728      	adds	r7, #40	; 0x28
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	20003fa0 	.word	0x20003fa0
 800e8b8:	200076f0 	.word	0x200076f0
 800e8bc:	200076f8 	.word	0x200076f8

0800e8c0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	603b      	str	r3, [r7, #0]
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d108      	bne.n	800e8e8 <dhcp_create_msg+0x28>
 800e8d6:	4b5f      	ldr	r3, [pc, #380]	; (800ea54 <dhcp_create_msg+0x194>)
 800e8d8:	f240 7269 	movw	r2, #1897	; 0x769
 800e8dc:	495e      	ldr	r1, [pc, #376]	; (800ea58 <dhcp_create_msg+0x198>)
 800e8de:	485f      	ldr	r0, [pc, #380]	; (800ea5c <dhcp_create_msg+0x19c>)
 800e8e0:	f003 fb92 	bl	8012008 <iprintf>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	e0b1      	b.n	800ea4c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d108      	bne.n	800e900 <dhcp_create_msg+0x40>
 800e8ee:	4b59      	ldr	r3, [pc, #356]	; (800ea54 <dhcp_create_msg+0x194>)
 800e8f0:	f240 726a 	movw	r2, #1898	; 0x76a
 800e8f4:	495a      	ldr	r1, [pc, #360]	; (800ea60 <dhcp_create_msg+0x1a0>)
 800e8f6:	4859      	ldr	r0, [pc, #356]	; (800ea5c <dhcp_create_msg+0x19c>)
 800e8f8:	f003 fb86 	bl	8012008 <iprintf>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	e0a5      	b.n	800ea4c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800e900:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e904:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e908:	2036      	movs	r0, #54	; 0x36
 800e90a:	f7f7 fd93 	bl	8006434 <pbuf_alloc>
 800e90e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d101      	bne.n	800e91a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	e098      	b.n	800ea4c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	895b      	ldrh	r3, [r3, #10]
 800e91e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800e922:	d206      	bcs.n	800e932 <dhcp_create_msg+0x72>
 800e924:	4b4b      	ldr	r3, [pc, #300]	; (800ea54 <dhcp_create_msg+0x194>)
 800e926:	f240 7272 	movw	r2, #1906	; 0x772
 800e92a:	494e      	ldr	r1, [pc, #312]	; (800ea64 <dhcp_create_msg+0x1a4>)
 800e92c:	484b      	ldr	r0, [pc, #300]	; (800ea5c <dhcp_create_msg+0x19c>)
 800e92e:	f003 fb6b 	bl	8012008 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e932:	79fb      	ldrb	r3, [r7, #7]
 800e934:	2b03      	cmp	r3, #3
 800e936:	d103      	bne.n	800e940 <dhcp_create_msg+0x80>
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	795b      	ldrb	r3, [r3, #5]
 800e93c:	2b03      	cmp	r3, #3
 800e93e:	d10d      	bne.n	800e95c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	799b      	ldrb	r3, [r3, #6]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d105      	bne.n	800e954 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800e948:	f003 fb76 	bl	8012038 <rand>
 800e94c:	4603      	mov	r3, r0
 800e94e:	461a      	mov	r2, r3
 800e950:	4b45      	ldr	r3, [pc, #276]	; (800ea68 <dhcp_create_msg+0x1a8>)
 800e952:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800e954:	4b44      	ldr	r3, [pc, #272]	; (800ea68 <dhcp_create_msg+0x1a8>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800e962:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e966:	2100      	movs	r1, #0
 800e968:	6978      	ldr	r0, [r7, #20]
 800e96a:	f003 fb45 	bl	8011ff8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	2201      	movs	r2, #1
 800e972:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2201      	movs	r2, #1
 800e978:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4618      	mov	r0, r3
 800e98a:	f7f6 fd12 	bl	80053b2 <lwip_htonl>
 800e98e:	4602      	mov	r2, r0
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	2b08      	cmp	r3, #8
 800e998:	d010      	beq.n	800e9bc <dhcp_create_msg+0xfc>
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	2b04      	cmp	r3, #4
 800e99e:	d00d      	beq.n	800e9bc <dhcp_create_msg+0xfc>
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	2b07      	cmp	r3, #7
 800e9a4:	d00a      	beq.n	800e9bc <dhcp_create_msg+0xfc>
 800e9a6:	79fb      	ldrb	r3, [r7, #7]
 800e9a8:	2b03      	cmp	r3, #3
 800e9aa:	d10c      	bne.n	800e9c6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800e9b0:	2b05      	cmp	r3, #5
 800e9b2:	d003      	beq.n	800e9bc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	795b      	ldrb	r3, [r3, #5]
 800e9b8:	2b04      	cmp	r3, #4
 800e9ba:	d104      	bne.n	800e9c6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	3304      	adds	r3, #4
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	83fb      	strh	r3, [r7, #30]
 800e9ca:	e00c      	b.n	800e9e6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800e9cc:	8bfa      	ldrh	r2, [r7, #30]
 800e9ce:	8bfb      	ldrh	r3, [r7, #30]
 800e9d0:	68f9      	ldr	r1, [r7, #12]
 800e9d2:	440a      	add	r2, r1
 800e9d4:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 800e9d8:	697a      	ldr	r2, [r7, #20]
 800e9da:	4413      	add	r3, r2
 800e9dc:	460a      	mov	r2, r1
 800e9de:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e9e0:	8bfb      	ldrh	r3, [r7, #30]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	83fb      	strh	r3, [r7, #30]
 800e9e6:	8bfb      	ldrh	r3, [r7, #30]
 800e9e8:	2b05      	cmp	r3, #5
 800e9ea:	d9ef      	bls.n	800e9cc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e9f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800e9fe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800ea02:	2200      	movs	r2, #0
 800ea04:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800ea08:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800ea12:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	2235      	movs	r2, #53	; 0x35
 800ea20:	2000      	movs	r0, #0
 800ea22:	f7ff fadd 	bl	800dfe0 <dhcp_option>
 800ea26:	4603      	mov	r3, r0
 800ea28:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea30:	79fa      	ldrb	r2, [r7, #7]
 800ea32:	8a7b      	ldrh	r3, [r7, #18]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff fb07 	bl	800e048 <dhcp_option_byte>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d002      	beq.n	800ea4a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	8a7a      	ldrh	r2, [r7, #18]
 800ea48:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800ea4a:	69bb      	ldr	r3, [r7, #24]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3720      	adds	r7, #32
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	0801522c 	.word	0x0801522c
 800ea58:	0801554c 	.word	0x0801554c
 800ea5c:	0801528c 	.word	0x0801528c
 800ea60:	0801556c 	.word	0x0801556c
 800ea64:	0801558c 	.word	0x0801558c
 800ea68:	20003e88 	.word	0x20003e88

0800ea6c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800ea7a:	89fb      	ldrh	r3, [r7, #14]
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	81fa      	strh	r2, [r7, #14]
 800ea80:	461a      	mov	r2, r3
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	4413      	add	r3, r2
 800ea86:	22ff      	movs	r2, #255	; 0xff
 800ea88:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ea8a:	e007      	b.n	800ea9c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800ea8c:	89fb      	ldrh	r3, [r7, #14]
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	81fa      	strh	r2, [r7, #14]
 800ea92:	461a      	mov	r2, r3
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	4413      	add	r3, r2
 800ea98:	2200      	movs	r2, #0
 800ea9a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ea9c:	89fb      	ldrh	r3, [r7, #14]
 800ea9e:	2b43      	cmp	r3, #67	; 0x43
 800eaa0:	d904      	bls.n	800eaac <dhcp_option_trailer+0x40>
 800eaa2:	89fb      	ldrh	r3, [r7, #14]
 800eaa4:	f003 0303 	and.w	r3, r3, #3
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <dhcp_option_trailer+0x46>
 800eaac:	89fb      	ldrh	r3, [r7, #14]
 800eaae:	2b43      	cmp	r3, #67	; 0x43
 800eab0:	d9ec      	bls.n	800ea8c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800eab2:	89fb      	ldrh	r3, [r7, #14]
 800eab4:	33f0      	adds	r3, #240	; 0xf0
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	4619      	mov	r1, r3
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7f7 fe14 	bl	80066e8 <pbuf_realloc>
}
 800eac0:	bf00      	nop
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d017      	beq.n	800eb06 <dhcp_supplied_address+0x3e>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d013      	beq.n	800eb06 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	795b      	ldrb	r3, [r3, #5]
 800eae8:	2b0a      	cmp	r3, #10
 800eaea:	d007      	beq.n	800eafc <dhcp_supplied_address+0x34>
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	795b      	ldrb	r3, [r3, #5]
 800eaf0:	2b05      	cmp	r3, #5
 800eaf2:	d003      	beq.n	800eafc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800eaf8:	2b04      	cmp	r3, #4
 800eafa:	d101      	bne.n	800eb00 <dhcp_supplied_address+0x38>
 800eafc:	2301      	movs	r3, #1
 800eafe:	e000      	b.n	800eb02 <dhcp_supplied_address+0x3a>
 800eb00:	2300      	movs	r3, #0
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	e000      	b.n	800eb08 <dhcp_supplied_address+0x40>
  }
  return 0;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800eb1c:	4915      	ldr	r1, [pc, #84]	; (800eb74 <etharp_free_entry+0x60>)
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	4613      	mov	r3, r2
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	4413      	add	r3, r2
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	440b      	add	r3, r1
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d013      	beq.n	800eb58 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800eb30:	4910      	ldr	r1, [pc, #64]	; (800eb74 <etharp_free_entry+0x60>)
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	4613      	mov	r3, r2
 800eb36:	005b      	lsls	r3, r3, #1
 800eb38:	4413      	add	r3, r2
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	440b      	add	r3, r1
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7f7 ff57 	bl	80069f4 <pbuf_free>
    arp_table[i].q = NULL;
 800eb46:	490b      	ldr	r1, [pc, #44]	; (800eb74 <etharp_free_entry+0x60>)
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	005b      	lsls	r3, r3, #1
 800eb4e:	4413      	add	r3, r2
 800eb50:	00db      	lsls	r3, r3, #3
 800eb52:	440b      	add	r3, r1
 800eb54:	2200      	movs	r2, #0
 800eb56:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800eb58:	4906      	ldr	r1, [pc, #24]	; (800eb74 <etharp_free_entry+0x60>)
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	4413      	add	r3, r2
 800eb62:	00db      	lsls	r3, r3, #3
 800eb64:	440b      	add	r3, r1
 800eb66:	3314      	adds	r3, #20
 800eb68:	2200      	movs	r2, #0
 800eb6a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800eb6c:	bf00      	nop
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20003e8c 	.word	0x20003e8c

0800eb78 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb7e:	2300      	movs	r3, #0
 800eb80:	607b      	str	r3, [r7, #4]
 800eb82:	e096      	b.n	800ecb2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800eb84:	494f      	ldr	r1, [pc, #316]	; (800ecc4 <etharp_tmr+0x14c>)
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	4413      	add	r3, r2
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	440b      	add	r3, r1
 800eb92:	3314      	adds	r3, #20
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800eb98:	78fb      	ldrb	r3, [r7, #3]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 8086 	beq.w	800ecac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800eba0:	4948      	ldr	r1, [pc, #288]	; (800ecc4 <etharp_tmr+0x14c>)
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	4613      	mov	r3, r2
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	4413      	add	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	440b      	add	r3, r1
 800ebae:	3312      	adds	r3, #18
 800ebb0:	881b      	ldrh	r3, [r3, #0]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	b298      	uxth	r0, r3
 800ebb6:	4943      	ldr	r1, [pc, #268]	; (800ecc4 <etharp_tmr+0x14c>)
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	4613      	mov	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	4413      	add	r3, r2
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	440b      	add	r3, r1
 800ebc4:	3312      	adds	r3, #18
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ebca:	493e      	ldr	r1, [pc, #248]	; (800ecc4 <etharp_tmr+0x14c>)
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	440b      	add	r3, r1
 800ebd8:	3312      	adds	r3, #18
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ebe0:	d215      	bcs.n	800ec0e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ebe2:	4938      	ldr	r1, [pc, #224]	; (800ecc4 <etharp_tmr+0x14c>)
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	4413      	add	r3, r2
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	440b      	add	r3, r1
 800ebf0:	3314      	adds	r3, #20
 800ebf2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d10e      	bne.n	800ec16 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ebf8:	4932      	ldr	r1, [pc, #200]	; (800ecc4 <etharp_tmr+0x14c>)
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	005b      	lsls	r3, r3, #1
 800ec00:	4413      	add	r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	440b      	add	r3, r1
 800ec06:	3312      	adds	r3, #18
 800ec08:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ec0a:	2b04      	cmp	r3, #4
 800ec0c:	d903      	bls.n	800ec16 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7ff ff80 	bl	800eb14 <etharp_free_entry>
 800ec14:	e04a      	b.n	800ecac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ec16:	492b      	ldr	r1, [pc, #172]	; (800ecc4 <etharp_tmr+0x14c>)
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	005b      	lsls	r3, r3, #1
 800ec1e:	4413      	add	r3, r2
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	440b      	add	r3, r1
 800ec24:	3314      	adds	r3, #20
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b03      	cmp	r3, #3
 800ec2a:	d10a      	bne.n	800ec42 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ec2c:	4925      	ldr	r1, [pc, #148]	; (800ecc4 <etharp_tmr+0x14c>)
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	4613      	mov	r3, r2
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	4413      	add	r3, r2
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	440b      	add	r3, r1
 800ec3a:	3314      	adds	r3, #20
 800ec3c:	2204      	movs	r2, #4
 800ec3e:	701a      	strb	r2, [r3, #0]
 800ec40:	e034      	b.n	800ecac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ec42:	4920      	ldr	r1, [pc, #128]	; (800ecc4 <etharp_tmr+0x14c>)
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	4613      	mov	r3, r2
 800ec48:	005b      	lsls	r3, r3, #1
 800ec4a:	4413      	add	r3, r2
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	440b      	add	r3, r1
 800ec50:	3314      	adds	r3, #20
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b04      	cmp	r3, #4
 800ec56:	d10a      	bne.n	800ec6e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ec58:	491a      	ldr	r1, [pc, #104]	; (800ecc4 <etharp_tmr+0x14c>)
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	005b      	lsls	r3, r3, #1
 800ec60:	4413      	add	r3, r2
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	440b      	add	r3, r1
 800ec66:	3314      	adds	r3, #20
 800ec68:	2202      	movs	r2, #2
 800ec6a:	701a      	strb	r2, [r3, #0]
 800ec6c:	e01e      	b.n	800ecac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ec6e:	4915      	ldr	r1, [pc, #84]	; (800ecc4 <etharp_tmr+0x14c>)
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	4613      	mov	r3, r2
 800ec74:	005b      	lsls	r3, r3, #1
 800ec76:	4413      	add	r3, r2
 800ec78:	00db      	lsls	r3, r3, #3
 800ec7a:	440b      	add	r3, r1
 800ec7c:	3314      	adds	r3, #20
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d113      	bne.n	800ecac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ec84:	490f      	ldr	r1, [pc, #60]	; (800ecc4 <etharp_tmr+0x14c>)
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	005b      	lsls	r3, r3, #1
 800ec8c:	4413      	add	r3, r2
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	440b      	add	r3, r1
 800ec92:	3308      	adds	r3, #8
 800ec94:	6818      	ldr	r0, [r3, #0]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	005b      	lsls	r3, r3, #1
 800ec9c:	4413      	add	r3, r2
 800ec9e:	00db      	lsls	r3, r3, #3
 800eca0:	4a08      	ldr	r2, [pc, #32]	; (800ecc4 <etharp_tmr+0x14c>)
 800eca2:	4413      	add	r3, r2
 800eca4:	3304      	adds	r3, #4
 800eca6:	4619      	mov	r1, r3
 800eca8:	f000 fe72 	bl	800f990 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	607b      	str	r3, [r7, #4]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b09      	cmp	r3, #9
 800ecb6:	f77f af65 	ble.w	800eb84 <etharp_tmr+0xc>
      }
    }
  }
}
 800ecba:	bf00      	nop
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	20003e8c 	.word	0x20003e8c

0800ecc8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	; 0x28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ecd6:	230a      	movs	r3, #10
 800ecd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ecda:	230a      	movs	r3, #10
 800ecdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ecde:	230a      	movs	r3, #10
 800ece0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ece6:	230a      	movs	r3, #10
 800ece8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	83bb      	strh	r3, [r7, #28]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	837b      	strh	r3, [r7, #26]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	843b      	strh	r3, [r7, #32]
 800ecfa:	e0ae      	b.n	800ee5a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ecfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed00:	49a6      	ldr	r1, [pc, #664]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ed02:	4613      	mov	r3, r2
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	4413      	add	r3, r2
 800ed08:	00db      	lsls	r3, r3, #3
 800ed0a:	440b      	add	r3, r1
 800ed0c:	3314      	adds	r3, #20
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ed12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed16:	2b0a      	cmp	r3, #10
 800ed18:	d105      	bne.n	800ed26 <etharp_find_entry+0x5e>
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d102      	bne.n	800ed26 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ed20:	8c3b      	ldrh	r3, [r7, #32]
 800ed22:	847b      	strh	r3, [r7, #34]	; 0x22
 800ed24:	e095      	b.n	800ee52 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ed26:	7dfb      	ldrb	r3, [r7, #23]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 8092 	beq.w	800ee52 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ed2e:	7dfb      	ldrb	r3, [r7, #23]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d009      	beq.n	800ed48 <etharp_find_entry+0x80>
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d806      	bhi.n	800ed48 <etharp_find_entry+0x80>
 800ed3a:	4b99      	ldr	r3, [pc, #612]	; (800efa0 <etharp_find_entry+0x2d8>)
 800ed3c:	f44f 7292 	mov.w	r2, #292	; 0x124
 800ed40:	4998      	ldr	r1, [pc, #608]	; (800efa4 <etharp_find_entry+0x2dc>)
 800ed42:	4899      	ldr	r0, [pc, #612]	; (800efa8 <etharp_find_entry+0x2e0>)
 800ed44:	f003 f960 	bl	8012008 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d020      	beq.n	800ed90 <etharp_find_entry+0xc8>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6819      	ldr	r1, [r3, #0]
 800ed52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed56:	4891      	ldr	r0, [pc, #580]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ed58:	4613      	mov	r3, r2
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	4413      	add	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	4403      	add	r3, r0
 800ed62:	3304      	adds	r3, #4
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4299      	cmp	r1, r3
 800ed68:	d112      	bne.n	800ed90 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00c      	beq.n	800ed8a <etharp_find_entry+0xc2>
 800ed70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed74:	4989      	ldr	r1, [pc, #548]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ed76:	4613      	mov	r3, r2
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	440b      	add	r3, r1
 800ed80:	3308      	adds	r3, #8
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d102      	bne.n	800ed90 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ed8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed8e:	e100      	b.n	800ef92 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d140      	bne.n	800ee18 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ed96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed9a:	4980      	ldr	r1, [pc, #512]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	005b      	lsls	r3, r3, #1
 800eda0:	4413      	add	r3, r2
 800eda2:	00db      	lsls	r3, r3, #3
 800eda4:	440b      	add	r3, r1
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d01a      	beq.n	800ede2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800edac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edb0:	497a      	ldr	r1, [pc, #488]	; (800ef9c <etharp_find_entry+0x2d4>)
 800edb2:	4613      	mov	r3, r2
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	4413      	add	r3, r2
 800edb8:	00db      	lsls	r3, r3, #3
 800edba:	440b      	add	r3, r1
 800edbc:	3312      	adds	r3, #18
 800edbe:	881b      	ldrh	r3, [r3, #0]
 800edc0:	8bba      	ldrh	r2, [r7, #28]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d845      	bhi.n	800ee52 <etharp_find_entry+0x18a>
            old_queue = i;
 800edc6:	8c3b      	ldrh	r3, [r7, #32]
 800edc8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800edca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edce:	4973      	ldr	r1, [pc, #460]	; (800ef9c <etharp_find_entry+0x2d4>)
 800edd0:	4613      	mov	r3, r2
 800edd2:	005b      	lsls	r3, r3, #1
 800edd4:	4413      	add	r3, r2
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	440b      	add	r3, r1
 800edda:	3312      	adds	r3, #18
 800eddc:	881b      	ldrh	r3, [r3, #0]
 800edde:	83bb      	strh	r3, [r7, #28]
 800ede0:	e037      	b.n	800ee52 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ede2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ede6:	496d      	ldr	r1, [pc, #436]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ede8:	4613      	mov	r3, r2
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	4413      	add	r3, r2
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	440b      	add	r3, r1
 800edf2:	3312      	adds	r3, #18
 800edf4:	881b      	ldrh	r3, [r3, #0]
 800edf6:	8b7a      	ldrh	r2, [r7, #26]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d82a      	bhi.n	800ee52 <etharp_find_entry+0x18a>
            old_pending = i;
 800edfc:	8c3b      	ldrh	r3, [r7, #32]
 800edfe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ee00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee04:	4965      	ldr	r1, [pc, #404]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ee06:	4613      	mov	r3, r2
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	4413      	add	r3, r2
 800ee0c:	00db      	lsls	r3, r3, #3
 800ee0e:	440b      	add	r3, r1
 800ee10:	3312      	adds	r3, #18
 800ee12:	881b      	ldrh	r3, [r3, #0]
 800ee14:	837b      	strh	r3, [r7, #26]
 800ee16:	e01c      	b.n	800ee52 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d919      	bls.n	800ee52 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ee1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee22:	495e      	ldr	r1, [pc, #376]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ee24:	4613      	mov	r3, r2
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	4413      	add	r3, r2
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	440b      	add	r3, r1
 800ee2e:	3312      	adds	r3, #18
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	8b3a      	ldrh	r2, [r7, #24]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d80c      	bhi.n	800ee52 <etharp_find_entry+0x18a>
            old_stable = i;
 800ee38:	8c3b      	ldrh	r3, [r7, #32]
 800ee3a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ee3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee40:	4956      	ldr	r1, [pc, #344]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	440b      	add	r3, r1
 800ee4c:	3312      	adds	r3, #18
 800ee4e:	881b      	ldrh	r3, [r3, #0]
 800ee50:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee52:	8c3b      	ldrh	r3, [r7, #32]
 800ee54:	3301      	adds	r3, #1
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	843b      	strh	r3, [r7, #32]
 800ee5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee5e:	2b09      	cmp	r3, #9
 800ee60:	f77f af4c 	ble.w	800ecfc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ee64:	7afb      	ldrb	r3, [r7, #11]
 800ee66:	f003 0302 	and.w	r3, r3, #2
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d108      	bne.n	800ee80 <etharp_find_entry+0x1b8>
 800ee6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee72:	2b0a      	cmp	r3, #10
 800ee74:	d107      	bne.n	800ee86 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ee76:	7afb      	ldrb	r3, [r7, #11]
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ee80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee84:	e085      	b.n	800ef92 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ee86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee8a:	2b09      	cmp	r3, #9
 800ee8c:	dc02      	bgt.n	800ee94 <etharp_find_entry+0x1cc>
    i = empty;
 800ee8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee90:	843b      	strh	r3, [r7, #32]
 800ee92:	e039      	b.n	800ef08 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ee94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee98:	2b09      	cmp	r3, #9
 800ee9a:	dc14      	bgt.n	800eec6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ee9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee9e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800eea0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eea4:	493d      	ldr	r1, [pc, #244]	; (800ef9c <etharp_find_entry+0x2d4>)
 800eea6:	4613      	mov	r3, r2
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	4413      	add	r3, r2
 800eeac:	00db      	lsls	r3, r3, #3
 800eeae:	440b      	add	r3, r1
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d018      	beq.n	800eee8 <etharp_find_entry+0x220>
 800eeb6:	4b3a      	ldr	r3, [pc, #232]	; (800efa0 <etharp_find_entry+0x2d8>)
 800eeb8:	f240 126d 	movw	r2, #365	; 0x16d
 800eebc:	493b      	ldr	r1, [pc, #236]	; (800efac <etharp_find_entry+0x2e4>)
 800eebe:	483a      	ldr	r0, [pc, #232]	; (800efa8 <etharp_find_entry+0x2e0>)
 800eec0:	f003 f8a2 	bl	8012008 <iprintf>
 800eec4:	e010      	b.n	800eee8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800eec6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800eeca:	2b09      	cmp	r3, #9
 800eecc:	dc02      	bgt.n	800eed4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800eece:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eed0:	843b      	strh	r3, [r7, #32]
 800eed2:	e009      	b.n	800eee8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800eed4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800eed8:	2b09      	cmp	r3, #9
 800eeda:	dc02      	bgt.n	800eee2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800eedc:	8bfb      	ldrh	r3, [r7, #30]
 800eede:	843b      	strh	r3, [r7, #32]
 800eee0:	e002      	b.n	800eee8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800eee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eee6:	e054      	b.n	800ef92 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eee8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eeec:	2b09      	cmp	r3, #9
 800eeee:	dd06      	ble.n	800eefe <etharp_find_entry+0x236>
 800eef0:	4b2b      	ldr	r3, [pc, #172]	; (800efa0 <etharp_find_entry+0x2d8>)
 800eef2:	f240 127f 	movw	r2, #383	; 0x17f
 800eef6:	492e      	ldr	r1, [pc, #184]	; (800efb0 <etharp_find_entry+0x2e8>)
 800eef8:	482b      	ldr	r0, [pc, #172]	; (800efa8 <etharp_find_entry+0x2e0>)
 800eefa:	f003 f885 	bl	8012008 <iprintf>
    etharp_free_entry(i);
 800eefe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff fe06 	bl	800eb14 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ef08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef0c:	2b09      	cmp	r3, #9
 800ef0e:	dd06      	ble.n	800ef1e <etharp_find_entry+0x256>
 800ef10:	4b23      	ldr	r3, [pc, #140]	; (800efa0 <etharp_find_entry+0x2d8>)
 800ef12:	f240 1283 	movw	r2, #387	; 0x183
 800ef16:	4926      	ldr	r1, [pc, #152]	; (800efb0 <etharp_find_entry+0x2e8>)
 800ef18:	4823      	ldr	r0, [pc, #140]	; (800efa8 <etharp_find_entry+0x2e0>)
 800ef1a:	f003 f875 	bl	8012008 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ef1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef22:	491e      	ldr	r1, [pc, #120]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ef24:	4613      	mov	r3, r2
 800ef26:	005b      	lsls	r3, r3, #1
 800ef28:	4413      	add	r3, r2
 800ef2a:	00db      	lsls	r3, r3, #3
 800ef2c:	440b      	add	r3, r1
 800ef2e:	3314      	adds	r3, #20
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d006      	beq.n	800ef44 <etharp_find_entry+0x27c>
 800ef36:	4b1a      	ldr	r3, [pc, #104]	; (800efa0 <etharp_find_entry+0x2d8>)
 800ef38:	f240 1285 	movw	r2, #389	; 0x185
 800ef3c:	491d      	ldr	r1, [pc, #116]	; (800efb4 <etharp_find_entry+0x2ec>)
 800ef3e:	481a      	ldr	r0, [pc, #104]	; (800efa8 <etharp_find_entry+0x2e0>)
 800ef40:	f003 f862 	bl	8012008 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00b      	beq.n	800ef62 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ef4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6819      	ldr	r1, [r3, #0]
 800ef52:	4812      	ldr	r0, [pc, #72]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ef54:	4613      	mov	r3, r2
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	4413      	add	r3, r2
 800ef5a:	00db      	lsls	r3, r3, #3
 800ef5c:	4403      	add	r3, r0
 800ef5e:	3304      	adds	r3, #4
 800ef60:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ef62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef66:	490d      	ldr	r1, [pc, #52]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ef68:	4613      	mov	r3, r2
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	440b      	add	r3, r1
 800ef72:	3312      	adds	r3, #18
 800ef74:	2200      	movs	r2, #0
 800ef76:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ef78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef7c:	4907      	ldr	r1, [pc, #28]	; (800ef9c <etharp_find_entry+0x2d4>)
 800ef7e:	4613      	mov	r3, r2
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	4413      	add	r3, r2
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	440b      	add	r3, r1
 800ef88:	3308      	adds	r3, #8
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ef8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3728      	adds	r7, #40	; 0x28
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20003e8c 	.word	0x20003e8c
 800efa0:	080155cc 	.word	0x080155cc
 800efa4:	08015604 	.word	0x08015604
 800efa8:	08015644 	.word	0x08015644
 800efac:	0801566c 	.word	0x0801566c
 800efb0:	08015684 	.word	0x08015684
 800efb4:	08015698 	.word	0x08015698

0800efb8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b088      	sub	sp, #32
 800efbc:	af02      	add	r7, sp, #8
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
 800efc4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800efcc:	2b06      	cmp	r3, #6
 800efce:	d006      	beq.n	800efde <etharp_update_arp_entry+0x26>
 800efd0:	4b48      	ldr	r3, [pc, #288]	; (800f0f4 <etharp_update_arp_entry+0x13c>)
 800efd2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800efd6:	4948      	ldr	r1, [pc, #288]	; (800f0f8 <etharp_update_arp_entry+0x140>)
 800efd8:	4848      	ldr	r0, [pc, #288]	; (800f0fc <etharp_update_arp_entry+0x144>)
 800efda:	f003 f815 	bl	8012008 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d012      	beq.n	800f00a <etharp_update_arp_entry+0x52>
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00e      	beq.n	800f00a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68f9      	ldr	r1, [r7, #12]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f001 f91e 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800eff8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800effa:	2b00      	cmp	r3, #0
 800effc:	d105      	bne.n	800f00a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f006:	2be0      	cmp	r3, #224	; 0xe0
 800f008:	d102      	bne.n	800f010 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f00a:	f06f 030f 	mvn.w	r3, #15
 800f00e:	e06c      	b.n	800f0ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f010:	78fb      	ldrb	r3, [r7, #3]
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	4619      	mov	r1, r3
 800f016:	68b8      	ldr	r0, [r7, #8]
 800f018:	f7ff fe56 	bl	800ecc8 <etharp_find_entry>
 800f01c:	4603      	mov	r3, r0
 800f01e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f020:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f024:	2b00      	cmp	r3, #0
 800f026:	da02      	bge.n	800f02e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f028:	8afb      	ldrh	r3, [r7, #22]
 800f02a:	b25b      	sxtb	r3, r3
 800f02c:	e05d      	b.n	800f0ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f02e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f032:	4933      	ldr	r1, [pc, #204]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f034:	4613      	mov	r3, r2
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	4413      	add	r3, r2
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	440b      	add	r3, r1
 800f03e:	3314      	adds	r3, #20
 800f040:	2202      	movs	r2, #2
 800f042:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f044:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f048:	492d      	ldr	r1, [pc, #180]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f04a:	4613      	mov	r3, r2
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	4413      	add	r3, r2
 800f050:	00db      	lsls	r3, r3, #3
 800f052:	440b      	add	r3, r1
 800f054:	3308      	adds	r3, #8
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f05a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f05e:	4613      	mov	r3, r2
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	00db      	lsls	r3, r3, #3
 800f066:	3308      	adds	r3, #8
 800f068:	4a25      	ldr	r2, [pc, #148]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f06a:	4413      	add	r3, r2
 800f06c:	3304      	adds	r3, #4
 800f06e:	2206      	movs	r2, #6
 800f070:	6879      	ldr	r1, [r7, #4]
 800f072:	4618      	mov	r0, r3
 800f074:	f002 ffb5 	bl	8011fe2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f078:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f07c:	4920      	ldr	r1, [pc, #128]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f07e:	4613      	mov	r3, r2
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	4413      	add	r3, r2
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	440b      	add	r3, r1
 800f088:	3312      	adds	r3, #18
 800f08a:	2200      	movs	r2, #0
 800f08c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f08e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f092:	491b      	ldr	r1, [pc, #108]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f094:	4613      	mov	r3, r2
 800f096:	005b      	lsls	r3, r3, #1
 800f098:	4413      	add	r3, r2
 800f09a:	00db      	lsls	r3, r3, #3
 800f09c:	440b      	add	r3, r1
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d021      	beq.n	800f0e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f0a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0a8:	4915      	ldr	r1, [pc, #84]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	005b      	lsls	r3, r3, #1
 800f0ae:	4413      	add	r3, r2
 800f0b0:	00db      	lsls	r3, r3, #3
 800f0b2:	440b      	add	r3, r1
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f0b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0bc:	4910      	ldr	r1, [pc, #64]	; (800f100 <etharp_update_arp_entry+0x148>)
 800f0be:	4613      	mov	r3, r2
 800f0c0:	005b      	lsls	r3, r3, #1
 800f0c2:	4413      	add	r3, r2
 800f0c4:	00db      	lsls	r3, r3, #3
 800f0c6:	440b      	add	r3, r1
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f0d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6939      	ldr	r1, [r7, #16]
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f001 ffad 	bl	801103c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f0e2:	6938      	ldr	r0, [r7, #16]
 800f0e4:	f7f7 fc86 	bl	80069f4 <pbuf_free>
  }
  return ERR_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	080155cc 	.word	0x080155cc
 800f0f8:	080156c4 	.word	0x080156c4
 800f0fc:	08015644 	.word	0x08015644
 800f100:	20003e8c 	.word	0x20003e8c

0800f104 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f10c:	2300      	movs	r3, #0
 800f10e:	60fb      	str	r3, [r7, #12]
 800f110:	e01e      	b.n	800f150 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f112:	4913      	ldr	r1, [pc, #76]	; (800f160 <etharp_cleanup_netif+0x5c>)
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	4613      	mov	r3, r2
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	4413      	add	r3, r2
 800f11c:	00db      	lsls	r3, r3, #3
 800f11e:	440b      	add	r3, r1
 800f120:	3314      	adds	r3, #20
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f126:	7afb      	ldrb	r3, [r7, #11]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00e      	beq.n	800f14a <etharp_cleanup_netif+0x46>
 800f12c:	490c      	ldr	r1, [pc, #48]	; (800f160 <etharp_cleanup_netif+0x5c>)
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	4613      	mov	r3, r2
 800f132:	005b      	lsls	r3, r3, #1
 800f134:	4413      	add	r3, r2
 800f136:	00db      	lsls	r3, r3, #3
 800f138:	440b      	add	r3, r1
 800f13a:	3308      	adds	r3, #8
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	429a      	cmp	r2, r3
 800f142:	d102      	bne.n	800f14a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f7ff fce5 	bl	800eb14 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3301      	adds	r3, #1
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2b09      	cmp	r3, #9
 800f154:	dddd      	ble.n	800f112 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f156:	bf00      	nop
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20003e8c 	.word	0x20003e8c

0800f164 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f164:	b5b0      	push	{r4, r5, r7, lr}
 800f166:	b08a      	sub	sp, #40	; 0x28
 800f168:	af04      	add	r7, sp, #16
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d107      	bne.n	800f184 <etharp_input+0x20>
 800f174:	4b3f      	ldr	r3, [pc, #252]	; (800f274 <etharp_input+0x110>)
 800f176:	f240 228a 	movw	r2, #650	; 0x28a
 800f17a:	493f      	ldr	r1, [pc, #252]	; (800f278 <etharp_input+0x114>)
 800f17c:	483f      	ldr	r0, [pc, #252]	; (800f27c <etharp_input+0x118>)
 800f17e:	f002 ff43 	bl	8012008 <iprintf>
 800f182:	e074      	b.n	800f26e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	881b      	ldrh	r3, [r3, #0]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f194:	d10c      	bne.n	800f1b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f19a:	2b06      	cmp	r3, #6
 800f19c:	d108      	bne.n	800f1b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f1a2:	2b04      	cmp	r3, #4
 800f1a4:	d104      	bne.n	800f1b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	885b      	ldrh	r3, [r3, #2]
 800f1aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f1ac:	2b08      	cmp	r3, #8
 800f1ae:	d003      	beq.n	800f1b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7f7 fc1f 	bl	80069f4 <pbuf_free>
    return;
 800f1b6:	e05a      	b.n	800f26e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	330e      	adds	r3, #14
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	3318      	adds	r3, #24
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d102      	bne.n	800f1d8 <etharp_input+0x74>
    for_us = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75fb      	strb	r3, [r7, #23]
 800f1d6:	e009      	b.n	800f1ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	bf0c      	ite	eq
 800f1e4:	2301      	moveq	r3, #1
 800f1e6:	2300      	movne	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	f103 0208 	add.w	r2, r3, #8
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <etharp_input+0x98>
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e000      	b.n	800f1fe <etharp_input+0x9a>
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	f107 010c 	add.w	r1, r7, #12
 800f202:	6838      	ldr	r0, [r7, #0]
 800f204:	f7ff fed8 	bl	800efb8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	88db      	ldrh	r3, [r3, #6]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f212:	d003      	beq.n	800f21c <etharp_input+0xb8>
 800f214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f218:	d01e      	beq.n	800f258 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f21a:	e025      	b.n	800f268 <etharp_input+0x104>
      if (for_us) {
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d021      	beq.n	800f266 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f238:	693a      	ldr	r2, [r7, #16]
 800f23a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f23c:	2102      	movs	r1, #2
 800f23e:	9103      	str	r1, [sp, #12]
 800f240:	f107 010c 	add.w	r1, r7, #12
 800f244:	9102      	str	r1, [sp, #8]
 800f246:	9201      	str	r2, [sp, #4]
 800f248:	9300      	str	r3, [sp, #0]
 800f24a:	462b      	mov	r3, r5
 800f24c:	4622      	mov	r2, r4
 800f24e:	4601      	mov	r1, r0
 800f250:	6838      	ldr	r0, [r7, #0]
 800f252:	f000 faef 	bl	800f834 <etharp_raw>
      break;
 800f256:	e006      	b.n	800f266 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800f258:	f107 030c 	add.w	r3, r7, #12
 800f25c:	4619      	mov	r1, r3
 800f25e:	6838      	ldr	r0, [r7, #0]
 800f260:	f7fe f9fe 	bl	800d660 <dhcp_arp_reply>
      break;
 800f264:	e000      	b.n	800f268 <etharp_input+0x104>
      break;
 800f266:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7f7 fbc3 	bl	80069f4 <pbuf_free>
}
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bdb0      	pop	{r4, r5, r7, pc}
 800f274:	080155cc 	.word	0x080155cc
 800f278:	0801571c 	.word	0x0801571c
 800f27c:	08015644 	.word	0x08015644

0800f280 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af02      	add	r7, sp, #8
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	4613      	mov	r3, r2
 800f28c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f28e:	79fa      	ldrb	r2, [r7, #7]
 800f290:	4944      	ldr	r1, [pc, #272]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	440b      	add	r3, r1
 800f29c:	3314      	adds	r3, #20
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d806      	bhi.n	800f2b2 <etharp_output_to_arp_index+0x32>
 800f2a4:	4b40      	ldr	r3, [pc, #256]	; (800f3a8 <etharp_output_to_arp_index+0x128>)
 800f2a6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800f2aa:	4940      	ldr	r1, [pc, #256]	; (800f3ac <etharp_output_to_arp_index+0x12c>)
 800f2ac:	4840      	ldr	r0, [pc, #256]	; (800f3b0 <etharp_output_to_arp_index+0x130>)
 800f2ae:	f002 feab 	bl	8012008 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f2b2:	79fa      	ldrb	r2, [r7, #7]
 800f2b4:	493b      	ldr	r1, [pc, #236]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	005b      	lsls	r3, r3, #1
 800f2ba:	4413      	add	r3, r2
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	440b      	add	r3, r1
 800f2c0:	3314      	adds	r3, #20
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	2b02      	cmp	r3, #2
 800f2c6:	d153      	bne.n	800f370 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f2c8:	79fa      	ldrb	r2, [r7, #7]
 800f2ca:	4936      	ldr	r1, [pc, #216]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	00db      	lsls	r3, r3, #3
 800f2d4:	440b      	add	r3, r1
 800f2d6:	3312      	adds	r3, #18
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f2de:	d919      	bls.n	800f314 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f2e0:	79fa      	ldrb	r2, [r7, #7]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	4413      	add	r3, r2
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	4a2e      	ldr	r2, [pc, #184]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f2ec:	4413      	add	r3, r2
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f000 fb4c 	bl	800f990 <etharp_request>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d138      	bne.n	800f370 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f2fe:	79fa      	ldrb	r2, [r7, #7]
 800f300:	4928      	ldr	r1, [pc, #160]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f302:	4613      	mov	r3, r2
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	4413      	add	r3, r2
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	440b      	add	r3, r1
 800f30c:	3314      	adds	r3, #20
 800f30e:	2203      	movs	r2, #3
 800f310:	701a      	strb	r2, [r3, #0]
 800f312:	e02d      	b.n	800f370 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f314:	79fa      	ldrb	r2, [r7, #7]
 800f316:	4923      	ldr	r1, [pc, #140]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f318:	4613      	mov	r3, r2
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	00db      	lsls	r3, r3, #3
 800f320:	440b      	add	r3, r1
 800f322:	3312      	adds	r3, #18
 800f324:	881b      	ldrh	r3, [r3, #0]
 800f326:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f32a:	d321      	bcc.n	800f370 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f32c:	79fa      	ldrb	r2, [r7, #7]
 800f32e:	4613      	mov	r3, r2
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4413      	add	r3, r2
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	4a1b      	ldr	r2, [pc, #108]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f338:	4413      	add	r3, r2
 800f33a:	1d19      	adds	r1, r3, #4
 800f33c:	79fa      	ldrb	r2, [r7, #7]
 800f33e:	4613      	mov	r3, r2
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	4413      	add	r3, r2
 800f344:	00db      	lsls	r3, r3, #3
 800f346:	3308      	adds	r3, #8
 800f348:	4a16      	ldr	r2, [pc, #88]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f34a:	4413      	add	r3, r2
 800f34c:	3304      	adds	r3, #4
 800f34e:	461a      	mov	r2, r3
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f000 fafb 	bl	800f94c <etharp_request_dst>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d109      	bne.n	800f370 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f35c:	79fa      	ldrb	r2, [r7, #7]
 800f35e:	4911      	ldr	r1, [pc, #68]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f360:	4613      	mov	r3, r2
 800f362:	005b      	lsls	r3, r3, #1
 800f364:	4413      	add	r3, r2
 800f366:	00db      	lsls	r3, r3, #3
 800f368:	440b      	add	r3, r1
 800f36a:	3314      	adds	r3, #20
 800f36c:	2203      	movs	r2, #3
 800f36e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f376:	79fa      	ldrb	r2, [r7, #7]
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	3308      	adds	r3, #8
 800f382:	4a08      	ldr	r2, [pc, #32]	; (800f3a4 <etharp_output_to_arp_index+0x124>)
 800f384:	4413      	add	r3, r2
 800f386:	1d1a      	adds	r2, r3, #4
 800f388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	4613      	mov	r3, r2
 800f390:	460a      	mov	r2, r1
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f001 fe51 	bl	801103c <ethernet_output>
 800f39a:	4603      	mov	r3, r0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	20003e8c 	.word	0x20003e8c
 800f3a8:	080155cc 	.word	0x080155cc
 800f3ac:	0801573c 	.word	0x0801573c
 800f3b0:	08015644 	.word	0x08015644

0800f3b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08a      	sub	sp, #40	; 0x28
 800f3b8:	af02      	add	r7, sp, #8
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d106      	bne.n	800f3d8 <etharp_output+0x24>
 800f3ca:	4b73      	ldr	r3, [pc, #460]	; (800f598 <etharp_output+0x1e4>)
 800f3cc:	f240 321e 	movw	r2, #798	; 0x31e
 800f3d0:	4972      	ldr	r1, [pc, #456]	; (800f59c <etharp_output+0x1e8>)
 800f3d2:	4873      	ldr	r0, [pc, #460]	; (800f5a0 <etharp_output+0x1ec>)
 800f3d4:	f002 fe18 	bl	8012008 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d106      	bne.n	800f3ec <etharp_output+0x38>
 800f3de:	4b6e      	ldr	r3, [pc, #440]	; (800f598 <etharp_output+0x1e4>)
 800f3e0:	f240 321f 	movw	r2, #799	; 0x31f
 800f3e4:	496f      	ldr	r1, [pc, #444]	; (800f5a4 <etharp_output+0x1f0>)
 800f3e6:	486e      	ldr	r0, [pc, #440]	; (800f5a0 <etharp_output+0x1ec>)
 800f3e8:	f002 fe0e 	bl	8012008 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d106      	bne.n	800f400 <etharp_output+0x4c>
 800f3f2:	4b69      	ldr	r3, [pc, #420]	; (800f598 <etharp_output+0x1e4>)
 800f3f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f3f8:	496b      	ldr	r1, [pc, #428]	; (800f5a8 <etharp_output+0x1f4>)
 800f3fa:	4869      	ldr	r0, [pc, #420]	; (800f5a0 <etharp_output+0x1ec>)
 800f3fc:	f002 fe04 	bl	8012008 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	68f9      	ldr	r1, [r7, #12]
 800f406:	4618      	mov	r0, r3
 800f408:	f000 ff14 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d002      	beq.n	800f418 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f412:	4b66      	ldr	r3, [pc, #408]	; (800f5ac <etharp_output+0x1f8>)
 800f414:	61fb      	str	r3, [r7, #28]
 800f416:	e0af      	b.n	800f578 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f420:	2be0      	cmp	r3, #224	; 0xe0
 800f422:	d118      	bne.n	800f456 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f424:	2301      	movs	r3, #1
 800f426:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f428:	2300      	movs	r3, #0
 800f42a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f42c:	235e      	movs	r3, #94	; 0x5e
 800f42e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3301      	adds	r3, #1
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3302      	adds	r3, #2
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3303      	adds	r3, #3
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f44e:	f107 0310 	add.w	r3, r7, #16
 800f452:	61fb      	str	r3, [r7, #28]
 800f454:	e090      	b.n	800f578 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	3304      	adds	r3, #4
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	405a      	eors	r2, r3
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3308      	adds	r3, #8
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4013      	ands	r3, r2
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d012      	beq.n	800f494 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f474:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f478:	4293      	cmp	r3, r2
 800f47a:	d00b      	beq.n	800f494 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	330c      	adds	r3, #12
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	330c      	adds	r3, #12
 800f48a:	61bb      	str	r3, [r7, #24]
 800f48c:	e002      	b.n	800f494 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f48e:	f06f 0303 	mvn.w	r3, #3
 800f492:	e07d      	b.n	800f590 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f494:	4b46      	ldr	r3, [pc, #280]	; (800f5b0 <etharp_output+0x1fc>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	4619      	mov	r1, r3
 800f49a:	4a46      	ldr	r2, [pc, #280]	; (800f5b4 <etharp_output+0x200>)
 800f49c:	460b      	mov	r3, r1
 800f49e:	005b      	lsls	r3, r3, #1
 800f4a0:	440b      	add	r3, r1
 800f4a2:	00db      	lsls	r3, r3, #3
 800f4a4:	4413      	add	r3, r2
 800f4a6:	3314      	adds	r3, #20
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d925      	bls.n	800f4fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f4ae:	4b40      	ldr	r3, [pc, #256]	; (800f5b0 <etharp_output+0x1fc>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	4a3f      	ldr	r2, [pc, #252]	; (800f5b4 <etharp_output+0x200>)
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	005b      	lsls	r3, r3, #1
 800f4ba:	440b      	add	r3, r1
 800f4bc:	00db      	lsls	r3, r3, #3
 800f4be:	4413      	add	r3, r2
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d117      	bne.n	800f4fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	4b38      	ldr	r3, [pc, #224]	; (800f5b0 <etharp_output+0x1fc>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	4937      	ldr	r1, [pc, #220]	; (800f5b4 <etharp_output+0x200>)
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	4403      	add	r3, r0
 800f4dc:	00db      	lsls	r3, r3, #3
 800f4de:	440b      	add	r3, r1
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d108      	bne.n	800f4fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f4e8:	4b31      	ldr	r3, [pc, #196]	; (800f5b0 <etharp_output+0x1fc>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	68b9      	ldr	r1, [r7, #8]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f7ff fec5 	bl	800f280 <etharp_output_to_arp_index>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	e04a      	b.n	800f590 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	75fb      	strb	r3, [r7, #23]
 800f4fe:	e031      	b.n	800f564 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f500:	7dfa      	ldrb	r2, [r7, #23]
 800f502:	492c      	ldr	r1, [pc, #176]	; (800f5b4 <etharp_output+0x200>)
 800f504:	4613      	mov	r3, r2
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	4413      	add	r3, r2
 800f50a:	00db      	lsls	r3, r3, #3
 800f50c:	440b      	add	r3, r1
 800f50e:	3314      	adds	r3, #20
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d923      	bls.n	800f55e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f516:	7dfa      	ldrb	r2, [r7, #23]
 800f518:	4926      	ldr	r1, [pc, #152]	; (800f5b4 <etharp_output+0x200>)
 800f51a:	4613      	mov	r3, r2
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	4413      	add	r3, r2
 800f520:	00db      	lsls	r3, r3, #3
 800f522:	440b      	add	r3, r1
 800f524:	3308      	adds	r3, #8
 800f526:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d117      	bne.n	800f55e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	6819      	ldr	r1, [r3, #0]
 800f532:	7dfa      	ldrb	r2, [r7, #23]
 800f534:	481f      	ldr	r0, [pc, #124]	; (800f5b4 <etharp_output+0x200>)
 800f536:	4613      	mov	r3, r2
 800f538:	005b      	lsls	r3, r3, #1
 800f53a:	4413      	add	r3, r2
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	4403      	add	r3, r0
 800f540:	3304      	adds	r3, #4
 800f542:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f544:	4299      	cmp	r1, r3
 800f546:	d10a      	bne.n	800f55e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f548:	4a19      	ldr	r2, [pc, #100]	; (800f5b0 <etharp_output+0x1fc>)
 800f54a:	7dfb      	ldrb	r3, [r7, #23]
 800f54c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f54e:	7dfb      	ldrb	r3, [r7, #23]
 800f550:	461a      	mov	r2, r3
 800f552:	68b9      	ldr	r1, [r7, #8]
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f7ff fe93 	bl	800f280 <etharp_output_to_arp_index>
 800f55a:	4603      	mov	r3, r0
 800f55c:	e018      	b.n	800f590 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f55e:	7dfb      	ldrb	r3, [r7, #23]
 800f560:	3301      	adds	r3, #1
 800f562:	75fb      	strb	r3, [r7, #23]
 800f564:	7dfb      	ldrb	r3, [r7, #23]
 800f566:	2b09      	cmp	r3, #9
 800f568:	d9ca      	bls.n	800f500 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	69b9      	ldr	r1, [r7, #24]
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f000 f822 	bl	800f5b8 <etharp_query>
 800f574:	4603      	mov	r3, r0
 800f576:	e00b      	b.n	800f590 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f57e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f001 fd57 	bl	801103c <ethernet_output>
 800f58e:	4603      	mov	r3, r0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3720      	adds	r7, #32
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	080155cc 	.word	0x080155cc
 800f59c:	0801571c 	.word	0x0801571c
 800f5a0:	08015644 	.word	0x08015644
 800f5a4:	0801576c 	.word	0x0801576c
 800f5a8:	0801570c 	.word	0x0801570c
 800f5ac:	08015e40 	.word	0x08015e40
 800f5b0:	20003f7c 	.word	0x20003f7c
 800f5b4:	20003e8c 	.word	0x20003e8c

0800f5b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b08c      	sub	sp, #48	; 0x30
 800f5bc:	af02      	add	r7, sp, #8
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	3326      	adds	r3, #38	; 0x26
 800f5c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f5ca:	23ff      	movs	r3, #255	; 0xff
 800f5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68f9      	ldr	r1, [r7, #12]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fe2a 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d10c      	bne.n	800f600 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f5ee:	2be0      	cmp	r3, #224	; 0xe0
 800f5f0:	d006      	beq.n	800f600 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d003      	beq.n	800f600 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d102      	bne.n	800f606 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f600:	f06f 030f 	mvn.w	r3, #15
 800f604:	e102      	b.n	800f80c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	2101      	movs	r1, #1
 800f60a:	68b8      	ldr	r0, [r7, #8]
 800f60c:	f7ff fb5c 	bl	800ecc8 <etharp_find_entry>
 800f610:	4603      	mov	r3, r0
 800f612:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	da02      	bge.n	800f622 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f61c:	8a7b      	ldrh	r3, [r7, #18]
 800f61e:	b25b      	sxtb	r3, r3
 800f620:	e0f4      	b.n	800f80c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f622:	8a7b      	ldrh	r3, [r7, #18]
 800f624:	2b7e      	cmp	r3, #126	; 0x7e
 800f626:	d906      	bls.n	800f636 <etharp_query+0x7e>
 800f628:	4b7a      	ldr	r3, [pc, #488]	; (800f814 <etharp_query+0x25c>)
 800f62a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f62e:	497a      	ldr	r1, [pc, #488]	; (800f818 <etharp_query+0x260>)
 800f630:	487a      	ldr	r0, [pc, #488]	; (800f81c <etharp_query+0x264>)
 800f632:	f002 fce9 	bl	8012008 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f636:	8a7b      	ldrh	r3, [r7, #18]
 800f638:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f63a:	7c7a      	ldrb	r2, [r7, #17]
 800f63c:	4978      	ldr	r1, [pc, #480]	; (800f820 <etharp_query+0x268>)
 800f63e:	4613      	mov	r3, r2
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	4413      	add	r3, r2
 800f644:	00db      	lsls	r3, r3, #3
 800f646:	440b      	add	r3, r1
 800f648:	3314      	adds	r3, #20
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d115      	bne.n	800f67c <etharp_query+0xc4>
    is_new_entry = 1;
 800f650:	2301      	movs	r3, #1
 800f652:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f654:	7c7a      	ldrb	r2, [r7, #17]
 800f656:	4972      	ldr	r1, [pc, #456]	; (800f820 <etharp_query+0x268>)
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	440b      	add	r3, r1
 800f662:	3314      	adds	r3, #20
 800f664:	2201      	movs	r2, #1
 800f666:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f668:	7c7a      	ldrb	r2, [r7, #17]
 800f66a:	496d      	ldr	r1, [pc, #436]	; (800f820 <etharp_query+0x268>)
 800f66c:	4613      	mov	r3, r2
 800f66e:	005b      	lsls	r3, r3, #1
 800f670:	4413      	add	r3, r2
 800f672:	00db      	lsls	r3, r3, #3
 800f674:	440b      	add	r3, r1
 800f676:	3308      	adds	r3, #8
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f67c:	7c7a      	ldrb	r2, [r7, #17]
 800f67e:	4968      	ldr	r1, [pc, #416]	; (800f820 <etharp_query+0x268>)
 800f680:	4613      	mov	r3, r2
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	4413      	add	r3, r2
 800f686:	00db      	lsls	r3, r3, #3
 800f688:	440b      	add	r3, r1
 800f68a:	3314      	adds	r3, #20
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d011      	beq.n	800f6b6 <etharp_query+0xfe>
 800f692:	7c7a      	ldrb	r2, [r7, #17]
 800f694:	4962      	ldr	r1, [pc, #392]	; (800f820 <etharp_query+0x268>)
 800f696:	4613      	mov	r3, r2
 800f698:	005b      	lsls	r3, r3, #1
 800f69a:	4413      	add	r3, r2
 800f69c:	00db      	lsls	r3, r3, #3
 800f69e:	440b      	add	r3, r1
 800f6a0:	3314      	adds	r3, #20
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d806      	bhi.n	800f6b6 <etharp_query+0xfe>
 800f6a8:	4b5a      	ldr	r3, [pc, #360]	; (800f814 <etharp_query+0x25c>)
 800f6aa:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f6ae:	495d      	ldr	r1, [pc, #372]	; (800f824 <etharp_query+0x26c>)
 800f6b0:	485a      	ldr	r0, [pc, #360]	; (800f81c <etharp_query+0x264>)
 800f6b2:	f002 fca9 	bl	8012008 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f6b6:	6a3b      	ldr	r3, [r7, #32]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d102      	bne.n	800f6c2 <etharp_query+0x10a>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d10c      	bne.n	800f6dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f6c2:	68b9      	ldr	r1, [r7, #8]
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f000 f963 	bl	800f990 <etharp_request>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d102      	bne.n	800f6dc <etharp_query+0x124>
      return result;
 800f6d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f6da:	e097      	b.n	800f80c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <etharp_query+0x138>
 800f6e2:	4b4c      	ldr	r3, [pc, #304]	; (800f814 <etharp_query+0x25c>)
 800f6e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f6e8:	494f      	ldr	r1, [pc, #316]	; (800f828 <etharp_query+0x270>)
 800f6ea:	484c      	ldr	r0, [pc, #304]	; (800f81c <etharp_query+0x264>)
 800f6ec:	f002 fc8c 	bl	8012008 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f6f0:	7c7a      	ldrb	r2, [r7, #17]
 800f6f2:	494b      	ldr	r1, [pc, #300]	; (800f820 <etharp_query+0x268>)
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	4413      	add	r3, r2
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	440b      	add	r3, r1
 800f6fe:	3314      	adds	r3, #20
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d918      	bls.n	800f738 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f706:	4a49      	ldr	r2, [pc, #292]	; (800f82c <etharp_query+0x274>)
 800f708:	7c7b      	ldrb	r3, [r7, #17]
 800f70a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f70c:	7c7a      	ldrb	r2, [r7, #17]
 800f70e:	4613      	mov	r3, r2
 800f710:	005b      	lsls	r3, r3, #1
 800f712:	4413      	add	r3, r2
 800f714:	00db      	lsls	r3, r3, #3
 800f716:	3308      	adds	r3, #8
 800f718:	4a41      	ldr	r2, [pc, #260]	; (800f820 <etharp_query+0x268>)
 800f71a:	4413      	add	r3, r2
 800f71c:	1d1a      	adds	r2, r3, #4
 800f71e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	4613      	mov	r3, r2
 800f726:	697a      	ldr	r2, [r7, #20]
 800f728:	6879      	ldr	r1, [r7, #4]
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f001 fc86 	bl	801103c <ethernet_output>
 800f730:	4603      	mov	r3, r0
 800f732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f736:	e067      	b.n	800f808 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f738:	7c7a      	ldrb	r2, [r7, #17]
 800f73a:	4939      	ldr	r1, [pc, #228]	; (800f820 <etharp_query+0x268>)
 800f73c:	4613      	mov	r3, r2
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	4413      	add	r3, r2
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	440b      	add	r3, r1
 800f746:	3314      	adds	r3, #20
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d15c      	bne.n	800f808 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f74e:	2300      	movs	r3, #0
 800f750:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f756:	e01c      	b.n	800f792 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	895a      	ldrh	r2, [r3, #10]
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	891b      	ldrh	r3, [r3, #8]
 800f760:	429a      	cmp	r2, r3
 800f762:	d10a      	bne.n	800f77a <etharp_query+0x1c2>
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d006      	beq.n	800f77a <etharp_query+0x1c2>
 800f76c:	4b29      	ldr	r3, [pc, #164]	; (800f814 <etharp_query+0x25c>)
 800f76e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f772:	492f      	ldr	r1, [pc, #188]	; (800f830 <etharp_query+0x278>)
 800f774:	4829      	ldr	r0, [pc, #164]	; (800f81c <etharp_query+0x264>)
 800f776:	f002 fc47 	bl	8012008 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	7b1b      	ldrb	r3, [r3, #12]
 800f77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <etharp_query+0x1d4>
        copy_needed = 1;
 800f786:	2301      	movs	r3, #1
 800f788:	61bb      	str	r3, [r7, #24]
        break;
 800f78a:	e005      	b.n	800f798 <etharp_query+0x1e0>
      }
      p = p->next;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1df      	bne.n	800f758 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800f798:	69bb      	ldr	r3, [r7, #24]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d007      	beq.n	800f7ae <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f7a4:	200e      	movs	r0, #14
 800f7a6:	f7f7 fb9d 	bl	8006ee4 <pbuf_clone>
 800f7aa:	61f8      	str	r0, [r7, #28]
 800f7ac:	e004      	b.n	800f7b8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f7b2:	69f8      	ldr	r0, [r7, #28]
 800f7b4:	f7f7 f9c4 	bl	8006b40 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d021      	beq.n	800f802 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f7be:	7c7a      	ldrb	r2, [r7, #17]
 800f7c0:	4917      	ldr	r1, [pc, #92]	; (800f820 <etharp_query+0x268>)
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	4413      	add	r3, r2
 800f7c8:	00db      	lsls	r3, r3, #3
 800f7ca:	440b      	add	r3, r1
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00a      	beq.n	800f7e8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f7d2:	7c7a      	ldrb	r2, [r7, #17]
 800f7d4:	4912      	ldr	r1, [pc, #72]	; (800f820 <etharp_query+0x268>)
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	4413      	add	r3, r2
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	440b      	add	r3, r1
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7f7 f906 	bl	80069f4 <pbuf_free>
      }
      arp_table[i].q = p;
 800f7e8:	7c7a      	ldrb	r2, [r7, #17]
 800f7ea:	490d      	ldr	r1, [pc, #52]	; (800f820 <etharp_query+0x268>)
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	4413      	add	r3, r2
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	440b      	add	r3, r1
 800f7f6:	69fa      	ldr	r2, [r7, #28]
 800f7f8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f800:	e002      	b.n	800f808 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f802:	23ff      	movs	r3, #255	; 0xff
 800f804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3728      	adds	r7, #40	; 0x28
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	080155cc 	.word	0x080155cc
 800f818:	08015778 	.word	0x08015778
 800f81c:	08015644 	.word	0x08015644
 800f820:	20003e8c 	.word	0x20003e8c
 800f824:	08015788 	.word	0x08015788
 800f828:	0801576c 	.word	0x0801576c
 800f82c:	20003f7c 	.word	0x20003f7c
 800f830:	080157b0 	.word	0x080157b0

0800f834 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b08a      	sub	sp, #40	; 0x28
 800f838:	af02      	add	r7, sp, #8
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d106      	bne.n	800f85a <etharp_raw+0x26>
 800f84c:	4b3a      	ldr	r3, [pc, #232]	; (800f938 <etharp_raw+0x104>)
 800f84e:	f240 4257 	movw	r2, #1111	; 0x457
 800f852:	493a      	ldr	r1, [pc, #232]	; (800f93c <etharp_raw+0x108>)
 800f854:	483a      	ldr	r0, [pc, #232]	; (800f940 <etharp_raw+0x10c>)
 800f856:	f002 fbd7 	bl	8012008 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f85a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f85e:	211c      	movs	r1, #28
 800f860:	200e      	movs	r0, #14
 800f862:	f7f6 fde7 	bl	8006434 <pbuf_alloc>
 800f866:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d102      	bne.n	800f874 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f872:	e05d      	b.n	800f930 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f874:	69bb      	ldr	r3, [r7, #24]
 800f876:	895b      	ldrh	r3, [r3, #10]
 800f878:	2b1b      	cmp	r3, #27
 800f87a:	d806      	bhi.n	800f88a <etharp_raw+0x56>
 800f87c:	4b2e      	ldr	r3, [pc, #184]	; (800f938 <etharp_raw+0x104>)
 800f87e:	f240 4263 	movw	r2, #1123	; 0x463
 800f882:	4930      	ldr	r1, [pc, #192]	; (800f944 <etharp_raw+0x110>)
 800f884:	482e      	ldr	r0, [pc, #184]	; (800f940 <etharp_raw+0x10c>)
 800f886:	f002 fbbf 	bl	8012008 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f890:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f892:	4618      	mov	r0, r3
 800f894:	f7f5 fd78 	bl	8005388 <lwip_htons>
 800f898:	4603      	mov	r3, r0
 800f89a:	461a      	mov	r2, r3
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8a6:	2b06      	cmp	r3, #6
 800f8a8:	d006      	beq.n	800f8b8 <etharp_raw+0x84>
 800f8aa:	4b23      	ldr	r3, [pc, #140]	; (800f938 <etharp_raw+0x104>)
 800f8ac:	f240 426a 	movw	r2, #1130	; 0x46a
 800f8b0:	4925      	ldr	r1, [pc, #148]	; (800f948 <etharp_raw+0x114>)
 800f8b2:	4823      	ldr	r0, [pc, #140]	; (800f940 <etharp_raw+0x10c>)
 800f8b4:	f002 fba8 	bl	8012008 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	2206      	movs	r2, #6
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f002 fb8e 	bl	8011fe2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	3312      	adds	r3, #18
 800f8ca:	2206      	movs	r2, #6
 800f8cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f002 fb87 	bl	8011fe2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	330e      	adds	r3, #14
 800f8d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8da:	6812      	ldr	r2, [r2, #0]
 800f8dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	3318      	adds	r3, #24
 800f8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e4:	6812      	ldr	r2, [r2, #0]
 800f8e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	701a      	strb	r2, [r3, #0]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f042 0201 	orr.w	r2, r2, #1
 800f8f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f042 0208 	orr.w	r2, r2, #8
 800f8fe:	709a      	strb	r2, [r3, #2]
 800f900:	2200      	movs	r2, #0
 800f902:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	2206      	movs	r2, #6
 800f908:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2204      	movs	r2, #4
 800f90e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f910:	f640 0306 	movw	r3, #2054	; 0x806
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	69b9      	ldr	r1, [r7, #24]
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f001 fb8d 	bl	801103c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f922:	69b8      	ldr	r0, [r7, #24]
 800f924:	f7f7 f866 	bl	80069f4 <pbuf_free>
  p = NULL;
 800f928:	2300      	movs	r3, #0
 800f92a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f92c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3720      	adds	r7, #32
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	080155cc 	.word	0x080155cc
 800f93c:	0801571c 	.word	0x0801571c
 800f940:	08015644 	.word	0x08015644
 800f944:	080157cc 	.word	0x080157cc
 800f948:	08015800 	.word	0x08015800

0800f94c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b088      	sub	sp, #32
 800f950:	af04      	add	r7, sp, #16
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f968:	2201      	movs	r2, #1
 800f96a:	9203      	str	r2, [sp, #12]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	9202      	str	r2, [sp, #8]
 800f970:	4a06      	ldr	r2, [pc, #24]	; (800f98c <etharp_request_dst+0x40>)
 800f972:	9201      	str	r2, [sp, #4]
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	4603      	mov	r3, r0
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7ff ff5a 	bl	800f834 <etharp_raw>
 800f980:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	08015e48 	.word	0x08015e48

0800f990 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f99a:	4a05      	ldr	r2, [pc, #20]	; (800f9b0 <etharp_request+0x20>)
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7ff ffd4 	bl	800f94c <etharp_request_dst>
 800f9a4:	4603      	mov	r3, r0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	08015e40 	.word	0x08015e40

0800f9b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b08e      	sub	sp, #56	; 0x38
 800f9b8:	af04      	add	r7, sp, #16
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f9be:	4b79      	ldr	r3, [pc, #484]	; (800fba4 <icmp_input+0x1f0>)
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	f003 030f 	and.w	r3, r3, #15
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f9d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9d6:	2b13      	cmp	r3, #19
 800f9d8:	f240 80cd 	bls.w	800fb76 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	895b      	ldrh	r3, [r3, #10]
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	f240 80ca 	bls.w	800fb7a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f9f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 80b7 	beq.w	800fb68 <icmp_input+0x1b4>
 800f9fa:	2b08      	cmp	r3, #8
 800f9fc:	f040 80b7 	bne.w	800fb6e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fa00:	4b69      	ldr	r3, [pc, #420]	; (800fba8 <icmp_input+0x1f4>)
 800fa02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa04:	4b67      	ldr	r3, [pc, #412]	; (800fba4 <icmp_input+0x1f0>)
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa0c:	2be0      	cmp	r3, #224	; 0xe0
 800fa0e:	f000 80bb 	beq.w	800fb88 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fa12:	4b64      	ldr	r3, [pc, #400]	; (800fba4 <icmp_input+0x1f0>)
 800fa14:	695a      	ldr	r2, [r3, #20]
 800fa16:	4b63      	ldr	r3, [pc, #396]	; (800fba4 <icmp_input+0x1f0>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	f000 fc09 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f040 80b1 	bne.w	800fb8c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	891b      	ldrh	r3, [r3, #8]
 800fa2e:	2b07      	cmp	r3, #7
 800fa30:	f240 80a5 	bls.w	800fb7e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fa34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa36:	330e      	adds	r3, #14
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7f6 ff44 	bl	80068c8 <pbuf_add_header>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d04b      	beq.n	800fade <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	891a      	ldrh	r2, [r3, #8]
 800fa4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa4c:	4413      	add	r3, r2
 800fa4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	891b      	ldrh	r3, [r3, #8]
 800fa54:	8b7a      	ldrh	r2, [r7, #26]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	f0c0 809a 	bcc.w	800fb90 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fa5c:	8b7b      	ldrh	r3, [r7, #26]
 800fa5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa62:	4619      	mov	r1, r3
 800fa64:	200e      	movs	r0, #14
 800fa66:	f7f6 fce5 	bl	8006434 <pbuf_alloc>
 800fa6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 8090 	beq.w	800fb94 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	895b      	ldrh	r3, [r3, #10]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d203      	bcs.n	800fa8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fa82:	6978      	ldr	r0, [r7, #20]
 800fa84:	f7f6 ffb6 	bl	80069f4 <pbuf_free>
          goto icmperr;
 800fa88:	e085      	b.n	800fb96 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fa90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa92:	4618      	mov	r0, r3
 800fa94:	f002 faa5 	bl	8011fe2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fa98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6978      	ldr	r0, [r7, #20]
 800fa9e:	f7f6 ff23 	bl	80068e8 <pbuf_remove_header>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d009      	beq.n	800fabc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800faa8:	4b40      	ldr	r3, [pc, #256]	; (800fbac <icmp_input+0x1f8>)
 800faaa:	22b6      	movs	r2, #182	; 0xb6
 800faac:	4940      	ldr	r1, [pc, #256]	; (800fbb0 <icmp_input+0x1fc>)
 800faae:	4841      	ldr	r0, [pc, #260]	; (800fbb4 <icmp_input+0x200>)
 800fab0:	f002 faaa 	bl	8012008 <iprintf>
          pbuf_free(r);
 800fab4:	6978      	ldr	r0, [r7, #20]
 800fab6:	f7f6 ff9d 	bl	80069f4 <pbuf_free>
          goto icmperr;
 800faba:	e06c      	b.n	800fb96 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fabc:	6879      	ldr	r1, [r7, #4]
 800fabe:	6978      	ldr	r0, [r7, #20]
 800fac0:	f7f7 f8cc 	bl	8006c5c <pbuf_copy>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d003      	beq.n	800fad2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800faca:	6978      	ldr	r0, [r7, #20]
 800facc:	f7f6 ff92 	bl	80069f4 <pbuf_free>
          goto icmperr;
 800fad0:	e061      	b.n	800fb96 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f7f6 ff8e 	bl	80069f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	607b      	str	r3, [r7, #4]
 800fadc:	e00f      	b.n	800fafe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fae0:	330e      	adds	r3, #14
 800fae2:	4619      	mov	r1, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7f6 feff 	bl	80068e8 <pbuf_remove_header>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d006      	beq.n	800fafe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800faf0:	4b2e      	ldr	r3, [pc, #184]	; (800fbac <icmp_input+0x1f8>)
 800faf2:	22c7      	movs	r2, #199	; 0xc7
 800faf4:	4930      	ldr	r1, [pc, #192]	; (800fbb8 <icmp_input+0x204>)
 800faf6:	482f      	ldr	r0, [pc, #188]	; (800fbb4 <icmp_input+0x200>)
 800faf8:	f002 fa86 	bl	8012008 <iprintf>
          goto icmperr;
 800fafc:	e04b      	b.n	800fb96 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fb04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb06:	4619      	mov	r1, r3
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7f6 fedd 	bl	80068c8 <pbuf_add_header>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d12b      	bne.n	800fb6c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fb22:	4b20      	ldr	r3, [pc, #128]	; (800fba4 <icmp_input+0x1f0>)
 800fb24:	691a      	ldr	r2, [r3, #16]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2200      	movs	r2, #0
 800fb34:	709a      	strb	r2, [r3, #2]
 800fb36:	2200      	movs	r2, #0
 800fb38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	22ff      	movs	r2, #255	; 0xff
 800fb3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2200      	movs	r2, #0
 800fb44:	729a      	strb	r2, [r3, #10]
 800fb46:	2200      	movs	r2, #0
 800fb48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	9302      	str	r3, [sp, #8]
 800fb4e:	2301      	movs	r3, #1
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	2300      	movs	r3, #0
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	23ff      	movs	r3, #255	; 0xff
 800fb58:	2200      	movs	r2, #0
 800fb5a:	69f9      	ldr	r1, [r7, #28]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 fa91 	bl	8010084 <ip4_output_if>
 800fb62:	4603      	mov	r3, r0
 800fb64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fb66:	e001      	b.n	800fb6c <icmp_input+0x1b8>
      break;
 800fb68:	bf00      	nop
 800fb6a:	e000      	b.n	800fb6e <icmp_input+0x1ba>
      break;
 800fb6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7f6 ff40 	bl	80069f4 <pbuf_free>
  return;
 800fb74:	e013      	b.n	800fb9e <icmp_input+0x1ea>
    goto lenerr;
 800fb76:	bf00      	nop
 800fb78:	e002      	b.n	800fb80 <icmp_input+0x1cc>
    goto lenerr;
 800fb7a:	bf00      	nop
 800fb7c:	e000      	b.n	800fb80 <icmp_input+0x1cc>
        goto lenerr;
 800fb7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7f6 ff37 	bl	80069f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fb86:	e00a      	b.n	800fb9e <icmp_input+0x1ea>
        goto icmperr;
 800fb88:	bf00      	nop
 800fb8a:	e004      	b.n	800fb96 <icmp_input+0x1e2>
        goto icmperr;
 800fb8c:	bf00      	nop
 800fb8e:	e002      	b.n	800fb96 <icmp_input+0x1e2>
          goto icmperr;
 800fb90:	bf00      	nop
 800fb92:	e000      	b.n	800fb96 <icmp_input+0x1e2>
          goto icmperr;
 800fb94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7f6 ff2c 	bl	80069f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fb9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fb9e:	3728      	adds	r7, #40	; 0x28
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	20003fa0 	.word	0x20003fa0
 800fba8:	20003fb4 	.word	0x20003fb4
 800fbac:	08015844 	.word	0x08015844
 800fbb0:	0801587c 	.word	0x0801587c
 800fbb4:	080158b4 	.word	0x080158b4
 800fbb8:	080158dc 	.word	0x080158dc

0800fbbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fbc8:	78fb      	ldrb	r3, [r7, #3]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	2103      	movs	r1, #3
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 f814 	bl	800fbfc <icmp_send_response>
}
 800fbd4:	bf00      	nop
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fbe8:	78fb      	ldrb	r3, [r7, #3]
 800fbea:	461a      	mov	r2, r3
 800fbec:	210b      	movs	r1, #11
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f000 f804 	bl	800fbfc <icmp_send_response>
}
 800fbf4:	bf00      	nop
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b08c      	sub	sp, #48	; 0x30
 800fc00:	af04      	add	r7, sp, #16
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	70fb      	strb	r3, [r7, #3]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fc0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc10:	2124      	movs	r1, #36	; 0x24
 800fc12:	2022      	movs	r0, #34	; 0x22
 800fc14:	f7f6 fc0e 	bl	8006434 <pbuf_alloc>
 800fc18:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d04c      	beq.n	800fcba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	895b      	ldrh	r3, [r3, #10]
 800fc24:	2b23      	cmp	r3, #35	; 0x23
 800fc26:	d806      	bhi.n	800fc36 <icmp_send_response+0x3a>
 800fc28:	4b26      	ldr	r3, [pc, #152]	; (800fcc4 <icmp_send_response+0xc8>)
 800fc2a:	f240 1269 	movw	r2, #361	; 0x169
 800fc2e:	4926      	ldr	r1, [pc, #152]	; (800fcc8 <icmp_send_response+0xcc>)
 800fc30:	4826      	ldr	r0, [pc, #152]	; (800fccc <icmp_send_response+0xd0>)
 800fc32:	f002 f9e9 	bl	8012008 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	78fa      	ldrb	r2, [r7, #3]
 800fc46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	78ba      	ldrb	r2, [r7, #2]
 800fc4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	2200      	movs	r2, #0
 800fc52:	711a      	strb	r2, [r3, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	719a      	strb	r2, [r3, #6]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	f103 0008 	add.w	r0, r3, #8
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	221c      	movs	r2, #28
 800fc70:	4619      	mov	r1, r3
 800fc72:	f002 f9b6 	bl	8011fe2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fc76:	69bb      	ldr	r3, [r7, #24]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fc7c:	f107 030c 	add.w	r3, r7, #12
 800fc80:	4618      	mov	r0, r3
 800fc82:	f000 f825 	bl	800fcd0 <ip4_route>
 800fc86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d011      	beq.n	800fcb2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	2200      	movs	r2, #0
 800fc92:	709a      	strb	r2, [r3, #2]
 800fc94:	2200      	movs	r2, #0
 800fc96:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fc98:	f107 020c 	add.w	r2, r7, #12
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	9302      	str	r3, [sp, #8]
 800fca0:	2301      	movs	r3, #1
 800fca2:	9301      	str	r3, [sp, #4]
 800fca4:	2300      	movs	r3, #0
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	23ff      	movs	r3, #255	; 0xff
 800fcaa:	2100      	movs	r1, #0
 800fcac:	69f8      	ldr	r0, [r7, #28]
 800fcae:	f000 f9e9 	bl	8010084 <ip4_output_if>
  }
  pbuf_free(q);
 800fcb2:	69f8      	ldr	r0, [r7, #28]
 800fcb4:	f7f6 fe9e 	bl	80069f4 <pbuf_free>
 800fcb8:	e000      	b.n	800fcbc <icmp_send_response+0xc0>
    return;
 800fcba:	bf00      	nop
}
 800fcbc:	3720      	adds	r7, #32
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	08015844 	.word	0x08015844
 800fcc8:	08015910 	.word	0x08015910
 800fccc:	080158b4 	.word	0x080158b4

0800fcd0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fcd8:	4b33      	ldr	r3, [pc, #204]	; (800fda8 <ip4_route+0xd8>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	e036      	b.n	800fd4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d02b      	beq.n	800fd48 <ip4_route+0x78>
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcf6:	089b      	lsrs	r3, r3, #2
 800fcf8:	f003 0301 	and.w	r3, r3, #1
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d022      	beq.n	800fd48 <ip4_route+0x78>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3304      	adds	r3, #4
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d01d      	beq.n	800fd48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	3304      	adds	r3, #4
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	405a      	eors	r2, r3
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4013      	ands	r3, r2
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d101      	bne.n	800fd28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	e038      	b.n	800fd9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd2e:	f003 0302 	and.w	r3, r3, #2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d108      	bne.n	800fd48 <ip4_route+0x78>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	330c      	adds	r3, #12
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d101      	bne.n	800fd48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	e028      	b.n	800fd9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	60fb      	str	r3, [r7, #12]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1c5      	bne.n	800fce0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fd54:	4b15      	ldr	r3, [pc, #84]	; (800fdac <ip4_route+0xdc>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d01a      	beq.n	800fd92 <ip4_route+0xc2>
 800fd5c:	4b13      	ldr	r3, [pc, #76]	; (800fdac <ip4_route+0xdc>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd64:	f003 0301 	and.w	r3, r3, #1
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d012      	beq.n	800fd92 <ip4_route+0xc2>
 800fd6c:	4b0f      	ldr	r3, [pc, #60]	; (800fdac <ip4_route+0xdc>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd74:	f003 0304 	and.w	r3, r3, #4
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fd7c:	4b0b      	ldr	r3, [pc, #44]	; (800fdac <ip4_route+0xdc>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	3304      	adds	r3, #4
 800fd82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d004      	beq.n	800fd92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b7f      	cmp	r3, #127	; 0x7f
 800fd90:	d101      	bne.n	800fd96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fd92:	2300      	movs	r3, #0
 800fd94:	e001      	b.n	800fd9a <ip4_route+0xca>
  }

  return netif_default;
 800fd96:	4b05      	ldr	r3, [pc, #20]	; (800fdac <ip4_route+0xdc>)
 800fd98:	681b      	ldr	r3, [r3, #0]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	200076c4 	.word	0x200076c4
 800fdac:	200076c8 	.word	0x200076c8

0800fdb0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d016      	beq.n	800fdf6 <ip4_input_accept+0x46>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	3304      	adds	r3, #4
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d011      	beq.n	800fdf6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <ip4_input_accept+0x50>)
 800fdd4:	695a      	ldr	r2, [r3, #20]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	3304      	adds	r3, #4
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d008      	beq.n	800fdf2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fde0:	4b07      	ldr	r3, [pc, #28]	; (800fe00 <ip4_input_accept+0x50>)
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f000 fa24 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800fdec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e000      	b.n	800fdf8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	20003fa0 	.word	0x20003fa0

0800fe04 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b088      	sub	sp, #32
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	091b      	lsrs	r3, r3, #4
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	d004      	beq.n	800fe2e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7f6 fde5 	bl	80069f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	e121      	b.n	8010072 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	f003 030f 	and.w	r3, r3, #15
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	885b      	ldrh	r3, [r3, #2]
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7f5 fa9f 	bl	8005388 <lwip_htons>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	891b      	ldrh	r3, [r3, #8]
 800fe52:	8a3a      	ldrh	r2, [r7, #16]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d204      	bcs.n	800fe62 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800fe58:	8a3b      	ldrh	r3, [r7, #16]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7f6 fc43 	bl	80066e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	895b      	ldrh	r3, [r3, #10]
 800fe66:	8a7a      	ldrh	r2, [r7, #18]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d807      	bhi.n	800fe7c <ip4_input+0x78>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	891b      	ldrh	r3, [r3, #8]
 800fe70:	8a3a      	ldrh	r2, [r7, #16]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d802      	bhi.n	800fe7c <ip4_input+0x78>
 800fe76:	8a7b      	ldrh	r3, [r7, #18]
 800fe78:	2b13      	cmp	r3, #19
 800fe7a:	d804      	bhi.n	800fe86 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7f6 fdb9 	bl	80069f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fe82:	2300      	movs	r3, #0
 800fe84:	e0f5      	b.n	8010072 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	691b      	ldr	r3, [r3, #16]
 800fe8a:	4a7c      	ldr	r2, [pc, #496]	; (801007c <ip4_input+0x278>)
 800fe8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	4a7a      	ldr	r2, [pc, #488]	; (801007c <ip4_input+0x278>)
 800fe94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe96:	4b79      	ldr	r3, [pc, #484]	; (801007c <ip4_input+0x278>)
 800fe98:	695b      	ldr	r3, [r3, #20]
 800fe9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe9e:	2be0      	cmp	r3, #224	; 0xe0
 800fea0:	d112      	bne.n	800fec8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fea8:	f003 0301 	and.w	r3, r3, #1
 800feac:	b2db      	uxtb	r3, r3
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d007      	beq.n	800fec2 <ip4_input+0xbe>
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	3304      	adds	r3, #4
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <ip4_input+0xbe>
      netif = inp;
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	61bb      	str	r3, [r7, #24]
 800fec0:	e02a      	b.n	800ff18 <ip4_input+0x114>
    } else {
      netif = NULL;
 800fec2:	2300      	movs	r3, #0
 800fec4:	61bb      	str	r3, [r7, #24]
 800fec6:	e027      	b.n	800ff18 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fec8:	6838      	ldr	r0, [r7, #0]
 800feca:	f7ff ff71 	bl	800fdb0 <ip4_input_accept>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <ip4_input+0xd6>
      netif = inp;
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	61bb      	str	r3, [r7, #24]
 800fed8:	e01e      	b.n	800ff18 <ip4_input+0x114>
    } else {
      netif = NULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fede:	4b67      	ldr	r3, [pc, #412]	; (801007c <ip4_input+0x278>)
 800fee0:	695b      	ldr	r3, [r3, #20]
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b7f      	cmp	r3, #127	; 0x7f
 800fee6:	d017      	beq.n	800ff18 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fee8:	4b65      	ldr	r3, [pc, #404]	; (8010080 <ip4_input+0x27c>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	61bb      	str	r3, [r7, #24]
 800feee:	e00e      	b.n	800ff0e <ip4_input+0x10a>
          if (netif == inp) {
 800fef0:	69ba      	ldr	r2, [r7, #24]
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d006      	beq.n	800ff06 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fef8:	69b8      	ldr	r0, [r7, #24]
 800fefa:	f7ff ff59 	bl	800fdb0 <ip4_input_accept>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d108      	bne.n	800ff16 <ip4_input+0x112>
 800ff04:	e000      	b.n	800ff08 <ip4_input+0x104>
            continue;
 800ff06:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	61bb      	str	r3, [r7, #24]
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1ed      	bne.n	800fef0 <ip4_input+0xec>
 800ff14:	e000      	b.n	800ff18 <ip4_input+0x114>
            break;
 800ff16:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d111      	bne.n	800ff42 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ff1e:	69fb      	ldr	r3, [r7, #28]
 800ff20:	7a5b      	ldrb	r3, [r3, #9]
 800ff22:	2b11      	cmp	r3, #17
 800ff24:	d10d      	bne.n	800ff42 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800ff26:	8a7b      	ldrh	r3, [r7, #18]
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	885b      	ldrh	r3, [r3, #2]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800ff38:	d103      	bne.n	800ff42 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d017      	beq.n	800ff78 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ff48:	4b4c      	ldr	r3, [pc, #304]	; (801007c <ip4_input+0x278>)
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d013      	beq.n	800ff78 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ff50:	4b4a      	ldr	r3, [pc, #296]	; (801007c <ip4_input+0x278>)
 800ff52:	691b      	ldr	r3, [r3, #16]
 800ff54:	6839      	ldr	r1, [r7, #0]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f000 f96c 	bl	8010234 <ip4_addr_isbroadcast_u32>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d105      	bne.n	800ff6e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ff62:	4b46      	ldr	r3, [pc, #280]	; (801007c <ip4_input+0x278>)
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ff6a:	2be0      	cmp	r3, #224	; 0xe0
 800ff6c:	d104      	bne.n	800ff78 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7f6 fd40 	bl	80069f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	e07c      	b.n	8010072 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d104      	bne.n	800ff88 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f7f6 fd38 	bl	80069f4 <pbuf_free>
    return ERR_OK;
 800ff84:	2300      	movs	r3, #0
 800ff86:	e074      	b.n	8010072 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	88db      	ldrh	r3, [r3, #6]
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	461a      	mov	r2, r3
 800ff90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ff94:	4013      	ands	r3, r2
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00b      	beq.n	800ffb2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 fc90 	bl	80108c0 <ip4_reass>
 800ffa0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <ip4_input+0x1a8>
      return ERR_OK;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	e062      	b.n	8010072 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ffb2:	4a32      	ldr	r2, [pc, #200]	; (801007c <ip4_input+0x278>)
 800ffb4:	69bb      	ldr	r3, [r7, #24]
 800ffb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ffb8:	4a30      	ldr	r2, [pc, #192]	; (801007c <ip4_input+0x278>)
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ffbe:	4a2f      	ldr	r2, [pc, #188]	; (801007c <ip4_input+0x278>)
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 030f 	and.w	r3, r3, #15
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	4b29      	ldr	r3, [pc, #164]	; (801007c <ip4_input+0x278>)
 800ffd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ffd8:	8a7b      	ldrh	r3, [r7, #18]
 800ffda:	4619      	mov	r1, r3
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7f6 fc83 	bl	80068e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	7a5b      	ldrb	r3, [r3, #9]
 800ffe6:	2b06      	cmp	r3, #6
 800ffe8:	d009      	beq.n	800fffe <ip4_input+0x1fa>
 800ffea:	2b11      	cmp	r3, #17
 800ffec:	d002      	beq.n	800fff4 <ip4_input+0x1f0>
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d00a      	beq.n	8010008 <ip4_input+0x204>
 800fff2:	e00e      	b.n	8010012 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f7fc fb28 	bl	800c64c <udp_input>
        break;
 800fffc:	e026      	b.n	801004c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fffe:	6839      	ldr	r1, [r7, #0]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7f8 fb2f 	bl	8008664 <tcp_input>
        break;
 8010006:	e021      	b.n	801004c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff fcd2 	bl	800f9b4 <icmp_input>
        break;
 8010010:	e01c      	b.n	801004c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010012:	4b1a      	ldr	r3, [pc, #104]	; (801007c <ip4_input+0x278>)
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	69b9      	ldr	r1, [r7, #24]
 8010018:	4618      	mov	r0, r3
 801001a:	f000 f90b 	bl	8010234 <ip4_addr_isbroadcast_u32>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10f      	bne.n	8010044 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010024:	4b15      	ldr	r3, [pc, #84]	; (801007c <ip4_input+0x278>)
 8010026:	695b      	ldr	r3, [r3, #20]
 8010028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801002c:	2be0      	cmp	r3, #224	; 0xe0
 801002e:	d009      	beq.n	8010044 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010030:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010034:	4619      	mov	r1, r3
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f7f6 fcc9 	bl	80069ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801003c:	2102      	movs	r1, #2
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f7ff fdbc 	bl	800fbbc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7f6 fcd5 	bl	80069f4 <pbuf_free>
        break;
 801004a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801004c:	4b0b      	ldr	r3, [pc, #44]	; (801007c <ip4_input+0x278>)
 801004e:	2200      	movs	r2, #0
 8010050:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010052:	4b0a      	ldr	r3, [pc, #40]	; (801007c <ip4_input+0x278>)
 8010054:	2200      	movs	r2, #0
 8010056:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010058:	4b08      	ldr	r3, [pc, #32]	; (801007c <ip4_input+0x278>)
 801005a:	2200      	movs	r2, #0
 801005c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801005e:	4b07      	ldr	r3, [pc, #28]	; (801007c <ip4_input+0x278>)
 8010060:	2200      	movs	r2, #0
 8010062:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010064:	4b05      	ldr	r3, [pc, #20]	; (801007c <ip4_input+0x278>)
 8010066:	2200      	movs	r2, #0
 8010068:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801006a:	4b04      	ldr	r3, [pc, #16]	; (801007c <ip4_input+0x278>)
 801006c:	2200      	movs	r2, #0
 801006e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3720      	adds	r7, #32
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	20003fa0 	.word	0x20003fa0
 8010080:	200076c4 	.word	0x200076c4

08010084 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	; 0x28
 8010088:	af04      	add	r7, sp, #16
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]
 8010090:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d009      	beq.n	80100b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <ip4_output_if+0x26>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d102      	bne.n	80100b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80100aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ac:	3304      	adds	r3, #4
 80100ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80100b0:	78fa      	ldrb	r2, [r7, #3]
 80100b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b4:	9302      	str	r3, [sp, #8]
 80100b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100ba:	9301      	str	r3, [sp, #4]
 80100bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	4613      	mov	r3, r2
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	6979      	ldr	r1, [r7, #20]
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f000 f805 	bl	80100d8 <ip4_output_if_src>
 80100ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b088      	sub	sp, #32
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	7b9b      	ldrb	r3, [r3, #14]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d006      	beq.n	80100fc <ip4_output_if_src+0x24>
 80100ee:	4b4b      	ldr	r3, [pc, #300]	; (801021c <ip4_output_if_src+0x144>)
 80100f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80100f4:	494a      	ldr	r1, [pc, #296]	; (8010220 <ip4_output_if_src+0x148>)
 80100f6:	484b      	ldr	r0, [pc, #300]	; (8010224 <ip4_output_if_src+0x14c>)
 80100f8:	f001 ff86 	bl	8012008 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d060      	beq.n	80101c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010102:	2314      	movs	r3, #20
 8010104:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010106:	2114      	movs	r1, #20
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f7f6 fbdd 	bl	80068c8 <pbuf_add_header>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010114:	f06f 0301 	mvn.w	r3, #1
 8010118:	e07c      	b.n	8010214 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	895b      	ldrh	r3, [r3, #10]
 8010124:	2b13      	cmp	r3, #19
 8010126:	d806      	bhi.n	8010136 <ip4_output_if_src+0x5e>
 8010128:	4b3c      	ldr	r3, [pc, #240]	; (801021c <ip4_output_if_src+0x144>)
 801012a:	f240 3289 	movw	r2, #905	; 0x389
 801012e:	493e      	ldr	r1, [pc, #248]	; (8010228 <ip4_output_if_src+0x150>)
 8010130:	483c      	ldr	r0, [pc, #240]	; (8010224 <ip4_output_if_src+0x14c>)
 8010132:	f001 ff69 	bl	8012008 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	78fa      	ldrb	r2, [r7, #3]
 801013a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010142:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801014c:	8b7b      	ldrh	r3, [r7, #26]
 801014e:	089b      	lsrs	r3, r3, #2
 8010150:	b29b      	uxth	r3, r3
 8010152:	b2db      	uxtb	r3, r3
 8010154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010158:	b2da      	uxtb	r2, r3
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010164:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	891b      	ldrh	r3, [r3, #8]
 801016a:	4618      	mov	r0, r3
 801016c:	f7f5 f90c 	bl	8005388 <lwip_htons>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	2200      	movs	r2, #0
 801017c:	719a      	strb	r2, [r3, #6]
 801017e:	2200      	movs	r2, #0
 8010180:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010182:	4b2a      	ldr	r3, [pc, #168]	; (801022c <ip4_output_if_src+0x154>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	4618      	mov	r0, r3
 8010188:	f7f5 f8fe 	bl	8005388 <lwip_htons>
 801018c:	4603      	mov	r3, r0
 801018e:	461a      	mov	r2, r3
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010194:	4b25      	ldr	r3, [pc, #148]	; (801022c <ip4_output_if_src+0x154>)
 8010196:	881b      	ldrh	r3, [r3, #0]
 8010198:	3301      	adds	r3, #1
 801019a:	b29a      	uxth	r2, r3
 801019c:	4b23      	ldr	r3, [pc, #140]	; (801022c <ip4_output_if_src+0x154>)
 801019e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d104      	bne.n	80101b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80101a6:	4b22      	ldr	r3, [pc, #136]	; (8010230 <ip4_output_if_src+0x158>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	60da      	str	r2, [r3, #12]
 80101ae:	e003      	b.n	80101b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	2200      	movs	r2, #0
 80101bc:	729a      	strb	r2, [r3, #10]
 80101be:	2200      	movs	r2, #0
 80101c0:	72da      	strb	r2, [r3, #11]
 80101c2:	e00f      	b.n	80101e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	895b      	ldrh	r3, [r3, #10]
 80101c8:	2b13      	cmp	r3, #19
 80101ca:	d802      	bhi.n	80101d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80101cc:	f06f 0301 	mvn.w	r3, #1
 80101d0:	e020      	b.n	8010214 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	691b      	ldr	r3, [r3, #16]
 80101dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80101de:	f107 0314 	add.w	r3, r7, #20
 80101e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80101e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00c      	beq.n	8010206 <ip4_output_if_src+0x12e>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	891a      	ldrh	r2, [r3, #8]
 80101f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d906      	bls.n	8010206 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f000 fd4b 	bl	8010c98 <ip4_frag>
 8010202:	4603      	mov	r3, r0
 8010204:	e006      	b.n	8010214 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	68f9      	ldr	r1, [r7, #12]
 801020e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010210:	4798      	blx	r3
 8010212:	4603      	mov	r3, r0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3720      	adds	r7, #32
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	0801593c 	.word	0x0801593c
 8010220:	08015970 	.word	0x08015970
 8010224:	0801597c 	.word	0x0801597c
 8010228:	080159a4 	.word	0x080159a4
 801022c:	20003f7e 	.word	0x20003f7e
 8010230:	08015e38 	.word	0x08015e38

08010234 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010234:	b480      	push	{r7}
 8010236:	b085      	sub	sp, #20
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010248:	d002      	beq.n	8010250 <ip4_addr_isbroadcast_u32+0x1c>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d101      	bne.n	8010254 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010250:	2301      	movs	r3, #1
 8010252:	e02a      	b.n	80102aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801025a:	f003 0302 	and.w	r3, r3, #2
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010262:	2300      	movs	r3, #0
 8010264:	e021      	b.n	80102aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	3304      	adds	r3, #4
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	429a      	cmp	r2, r3
 8010270:	d101      	bne.n	8010276 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010272:	2300      	movs	r3, #0
 8010274:	e019      	b.n	80102aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	3304      	adds	r3, #4
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	405a      	eors	r2, r3
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	3308      	adds	r3, #8
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4013      	ands	r3, r2
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10d      	bne.n	80102a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	3308      	adds	r3, #8
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	43da      	mvns	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	3308      	adds	r3, #8
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d101      	bne.n	80102a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80102a4:	2301      	movs	r3, #1
 80102a6:	e000      	b.n	80102aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80102a8:	2300      	movs	r3, #0
  }
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3714      	adds	r7, #20
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr
	...

080102b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80102c2:	4b12      	ldr	r3, [pc, #72]	; (801030c <ip_reass_tmr+0x54>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80102c8:	e018      	b.n	80102fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	7fdb      	ldrb	r3, [r3, #31]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00b      	beq.n	80102ea <ip_reass_tmr+0x32>
      r->timer--;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	7fdb      	ldrb	r3, [r3, #31]
 80102d6:	3b01      	subs	r3, #1
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	60fb      	str	r3, [r7, #12]
 80102e8:	e008      	b.n	80102fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80102f4:	68b9      	ldr	r1, [r7, #8]
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 f80a 	bl	8010310 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1e3      	bne.n	80102ca <ip_reass_tmr+0x12>
    }
  }
}
 8010302:	bf00      	nop
 8010304:	3710      	adds	r7, #16
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20003f80 	.word	0x20003f80

08010310 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b088      	sub	sp, #32
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	429a      	cmp	r2, r3
 8010324:	d105      	bne.n	8010332 <ip_reass_free_complete_datagram+0x22>
 8010326:	4b45      	ldr	r3, [pc, #276]	; (801043c <ip_reass_free_complete_datagram+0x12c>)
 8010328:	22ab      	movs	r2, #171	; 0xab
 801032a:	4945      	ldr	r1, [pc, #276]	; (8010440 <ip_reass_free_complete_datagram+0x130>)
 801032c:	4845      	ldr	r0, [pc, #276]	; (8010444 <ip_reass_free_complete_datagram+0x134>)
 801032e:	f001 fe6b 	bl	8012008 <iprintf>
  if (prev != NULL) {
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00a      	beq.n	801034e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	429a      	cmp	r2, r3
 8010340:	d005      	beq.n	801034e <ip_reass_free_complete_datagram+0x3e>
 8010342:	4b3e      	ldr	r3, [pc, #248]	; (801043c <ip_reass_free_complete_datagram+0x12c>)
 8010344:	22ad      	movs	r2, #173	; 0xad
 8010346:	4940      	ldr	r1, [pc, #256]	; (8010448 <ip_reass_free_complete_datagram+0x138>)
 8010348:	483e      	ldr	r0, [pc, #248]	; (8010444 <ip_reass_free_complete_datagram+0x134>)
 801034a:	f001 fe5d 	bl	8012008 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	889b      	ldrh	r3, [r3, #4]
 801035a:	b29b      	uxth	r3, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	d12a      	bne.n	80103b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	6858      	ldr	r0, [r3, #4]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3308      	adds	r3, #8
 8010376:	2214      	movs	r2, #20
 8010378:	4619      	mov	r1, r3
 801037a:	f001 fe32 	bl	8011fe2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801037e:	2101      	movs	r1, #1
 8010380:	69b8      	ldr	r0, [r7, #24]
 8010382:	f7ff fc2b 	bl	800fbdc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010386:	69b8      	ldr	r0, [r7, #24]
 8010388:	f7f6 fbc2 	bl	8006b10 <pbuf_clen>
 801038c:	4603      	mov	r3, r0
 801038e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010390:	8bfa      	ldrh	r2, [r7, #30]
 8010392:	8a7b      	ldrh	r3, [r7, #18]
 8010394:	4413      	add	r3, r2
 8010396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801039a:	db05      	blt.n	80103a8 <ip_reass_free_complete_datagram+0x98>
 801039c:	4b27      	ldr	r3, [pc, #156]	; (801043c <ip_reass_free_complete_datagram+0x12c>)
 801039e:	22bc      	movs	r2, #188	; 0xbc
 80103a0:	492a      	ldr	r1, [pc, #168]	; (801044c <ip_reass_free_complete_datagram+0x13c>)
 80103a2:	4828      	ldr	r0, [pc, #160]	; (8010444 <ip_reass_free_complete_datagram+0x134>)
 80103a4:	f001 fe30 	bl	8012008 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80103a8:	8bfa      	ldrh	r2, [r7, #30]
 80103aa:	8a7b      	ldrh	r3, [r7, #18]
 80103ac:	4413      	add	r3, r2
 80103ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80103b0:	69b8      	ldr	r0, [r7, #24]
 80103b2:	f7f6 fb1f 	bl	80069f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80103bc:	e01f      	b.n	80103fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f7f6 fb9e 	bl	8006b10 <pbuf_clen>
 80103d4:	4603      	mov	r3, r0
 80103d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80103d8:	8bfa      	ldrh	r2, [r7, #30]
 80103da:	8a7b      	ldrh	r3, [r7, #18]
 80103dc:	4413      	add	r3, r2
 80103de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103e2:	db05      	blt.n	80103f0 <ip_reass_free_complete_datagram+0xe0>
 80103e4:	4b15      	ldr	r3, [pc, #84]	; (801043c <ip_reass_free_complete_datagram+0x12c>)
 80103e6:	22cc      	movs	r2, #204	; 0xcc
 80103e8:	4918      	ldr	r1, [pc, #96]	; (801044c <ip_reass_free_complete_datagram+0x13c>)
 80103ea:	4816      	ldr	r0, [pc, #88]	; (8010444 <ip_reass_free_complete_datagram+0x134>)
 80103ec:	f001 fe0c 	bl	8012008 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80103f0:	8bfa      	ldrh	r2, [r7, #30]
 80103f2:	8a7b      	ldrh	r3, [r7, #18]
 80103f4:	4413      	add	r3, r2
 80103f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f7f6 fafb 	bl	80069f4 <pbuf_free>
  while (p != NULL) {
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1dc      	bne.n	80103be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010404:	6839      	ldr	r1, [r7, #0]
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 f8c2 	bl	8010590 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801040c:	4b10      	ldr	r3, [pc, #64]	; (8010450 <ip_reass_free_complete_datagram+0x140>)
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	8bfa      	ldrh	r2, [r7, #30]
 8010412:	429a      	cmp	r2, r3
 8010414:	d905      	bls.n	8010422 <ip_reass_free_complete_datagram+0x112>
 8010416:	4b09      	ldr	r3, [pc, #36]	; (801043c <ip_reass_free_complete_datagram+0x12c>)
 8010418:	22d2      	movs	r2, #210	; 0xd2
 801041a:	490e      	ldr	r1, [pc, #56]	; (8010454 <ip_reass_free_complete_datagram+0x144>)
 801041c:	4809      	ldr	r0, [pc, #36]	; (8010444 <ip_reass_free_complete_datagram+0x134>)
 801041e:	f001 fdf3 	bl	8012008 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010422:	4b0b      	ldr	r3, [pc, #44]	; (8010450 <ip_reass_free_complete_datagram+0x140>)
 8010424:	881a      	ldrh	r2, [r3, #0]
 8010426:	8bfb      	ldrh	r3, [r7, #30]
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	b29a      	uxth	r2, r3
 801042c:	4b08      	ldr	r3, [pc, #32]	; (8010450 <ip_reass_free_complete_datagram+0x140>)
 801042e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010430:	8bfb      	ldrh	r3, [r7, #30]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3720      	adds	r7, #32
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	080159d4 	.word	0x080159d4
 8010440:	08015a10 	.word	0x08015a10
 8010444:	08015a1c 	.word	0x08015a1c
 8010448:	08015a44 	.word	0x08015a44
 801044c:	08015a58 	.word	0x08015a58
 8010450:	20003f84 	.word	0x20003f84
 8010454:	08015a78 	.word	0x08015a78

08010458 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b08a      	sub	sp, #40	; 0x28
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010462:	2300      	movs	r3, #0
 8010464:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010466:	2300      	movs	r3, #0
 8010468:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801046a:	2300      	movs	r3, #0
 801046c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801046e:	2300      	movs	r3, #0
 8010470:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010472:	2300      	movs	r3, #0
 8010474:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010476:	4b28      	ldr	r3, [pc, #160]	; (8010518 <ip_reass_remove_oldest_datagram+0xc0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801047c:	e030      	b.n	80104e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010480:	695a      	ldr	r2, [r3, #20]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	429a      	cmp	r2, r3
 8010488:	d10c      	bne.n	80104a4 <ip_reass_remove_oldest_datagram+0x4c>
 801048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048c:	699a      	ldr	r2, [r3, #24]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	429a      	cmp	r2, r3
 8010494:	d106      	bne.n	80104a4 <ip_reass_remove_oldest_datagram+0x4c>
 8010496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010498:	899a      	ldrh	r2, [r3, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	889b      	ldrh	r3, [r3, #4]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d014      	beq.n	80104ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	3301      	adds	r3, #1
 80104a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80104aa:	6a3b      	ldr	r3, [r7, #32]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d104      	bne.n	80104ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	61bb      	str	r3, [r7, #24]
 80104b8:	e009      	b.n	80104ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	7fda      	ldrb	r2, [r3, #31]
 80104be:	6a3b      	ldr	r3, [r7, #32]
 80104c0:	7fdb      	ldrb	r3, [r3, #31]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d803      	bhi.n	80104ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80104c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d001      	beq.n	80104da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80104d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80104da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80104e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1cb      	bne.n	801047e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d008      	beq.n	80104fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80104ec:	69b9      	ldr	r1, [r7, #24]
 80104ee:	6a38      	ldr	r0, [r7, #32]
 80104f0:	f7ff ff0e 	bl	8010310 <ip_reass_free_complete_datagram>
 80104f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	4413      	add	r3, r2
 80104fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	429a      	cmp	r2, r3
 8010504:	da02      	bge.n	801050c <ip_reass_remove_oldest_datagram+0xb4>
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	2b01      	cmp	r3, #1
 801050a:	dcac      	bgt.n	8010466 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801050c:	697b      	ldr	r3, [r7, #20]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3728      	adds	r7, #40	; 0x28
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	20003f80 	.word	0x20003f80

0801051c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010526:	2004      	movs	r0, #4
 8010528:	f7f5 fbe4 	bl	8005cf4 <memp_malloc>
 801052c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d110      	bne.n	8010556 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff ff8e 	bl	8010458 <ip_reass_remove_oldest_datagram>
 801053c:	4602      	mov	r2, r0
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	4293      	cmp	r3, r2
 8010542:	dc03      	bgt.n	801054c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010544:	2004      	movs	r0, #4
 8010546:	f7f5 fbd5 	bl	8005cf4 <memp_malloc>
 801054a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010552:	2300      	movs	r3, #0
 8010554:	e016      	b.n	8010584 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010556:	2220      	movs	r2, #32
 8010558:	2100      	movs	r1, #0
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f001 fd4c 	bl	8011ff8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	220f      	movs	r2, #15
 8010564:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010566:	4b09      	ldr	r3, [pc, #36]	; (801058c <ip_reass_enqueue_new_datagram+0x70>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801056e:	4a07      	ldr	r2, [pc, #28]	; (801058c <ip_reass_enqueue_new_datagram+0x70>)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	3308      	adds	r3, #8
 8010578:	2214      	movs	r2, #20
 801057a:	6879      	ldr	r1, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	f001 fd30 	bl	8011fe2 <memcpy>
  return ipr;
 8010582:	68fb      	ldr	r3, [r7, #12]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	20003f80 	.word	0x20003f80

08010590 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801059a:	4b10      	ldr	r3, [pc, #64]	; (80105dc <ip_reass_dequeue_datagram+0x4c>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d104      	bne.n	80105ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a0c      	ldr	r2, [pc, #48]	; (80105dc <ip_reass_dequeue_datagram+0x4c>)
 80105aa:	6013      	str	r3, [r2, #0]
 80105ac:	e00d      	b.n	80105ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d106      	bne.n	80105c2 <ip_reass_dequeue_datagram+0x32>
 80105b4:	4b0a      	ldr	r3, [pc, #40]	; (80105e0 <ip_reass_dequeue_datagram+0x50>)
 80105b6:	f240 1245 	movw	r2, #325	; 0x145
 80105ba:	490a      	ldr	r1, [pc, #40]	; (80105e4 <ip_reass_dequeue_datagram+0x54>)
 80105bc:	480a      	ldr	r0, [pc, #40]	; (80105e8 <ip_reass_dequeue_datagram+0x58>)
 80105be:	f001 fd23 	bl	8012008 <iprintf>
    prev->next = ipr->next;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80105ca:	6879      	ldr	r1, [r7, #4]
 80105cc:	2004      	movs	r0, #4
 80105ce:	f7f5 fbe3 	bl	8005d98 <memp_free>
}
 80105d2:	bf00      	nop
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	20003f80 	.word	0x20003f80
 80105e0:	080159d4 	.word	0x080159d4
 80105e4:	08015a9c 	.word	0x08015a9c
 80105e8:	08015a1c 	.word	0x08015a1c

080105ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08c      	sub	sp, #48	; 0x30
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80105f8:	2300      	movs	r3, #0
 80105fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80105fc:	2301      	movs	r3, #1
 80105fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	885b      	ldrh	r3, [r3, #2]
 801060a:	b29b      	uxth	r3, r3
 801060c:	4618      	mov	r0, r3
 801060e:	f7f4 febb 	bl	8005388 <lwip_htons>
 8010612:	4603      	mov	r3, r0
 8010614:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	f003 030f 	and.w	r3, r3, #15
 801061e:	b2db      	uxtb	r3, r3
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010624:	7e7b      	ldrb	r3, [r7, #25]
 8010626:	b29b      	uxth	r3, r3
 8010628:	8b7a      	ldrh	r2, [r7, #26]
 801062a:	429a      	cmp	r2, r3
 801062c:	d202      	bcs.n	8010634 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010632:	e135      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010634:	7e7b      	ldrb	r3, [r7, #25]
 8010636:	b29b      	uxth	r3, r3
 8010638:	8b7a      	ldrh	r2, [r7, #26]
 801063a:	1ad3      	subs	r3, r2, r3
 801063c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	88db      	ldrh	r3, [r3, #6]
 8010642:	b29b      	uxth	r3, r3
 8010644:	4618      	mov	r0, r3
 8010646:	f7f4 fe9f 	bl	8005388 <lwip_htons>
 801064a:	4603      	mov	r3, r0
 801064c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010650:	b29b      	uxth	r3, r3
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	2200      	movs	r2, #0
 8010660:	701a      	strb	r2, [r3, #0]
 8010662:	2200      	movs	r2, #0
 8010664:	705a      	strb	r2, [r3, #1]
 8010666:	2200      	movs	r2, #0
 8010668:	709a      	strb	r2, [r3, #2]
 801066a:	2200      	movs	r2, #0
 801066c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	8afa      	ldrh	r2, [r7, #22]
 8010672:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010674:	8afa      	ldrh	r2, [r7, #22]
 8010676:	8b7b      	ldrh	r3, [r7, #26]
 8010678:	4413      	add	r3, r2
 801067a:	b29a      	uxth	r2, r3
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010682:	88db      	ldrh	r3, [r3, #6]
 8010684:	b29b      	uxth	r3, r3
 8010686:	8afa      	ldrh	r2, [r7, #22]
 8010688:	429a      	cmp	r2, r3
 801068a:	d902      	bls.n	8010692 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801068c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010690:	e106      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	627b      	str	r3, [r7, #36]	; 0x24
 8010698:	e068      	b.n	801076c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80106a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a2:	889b      	ldrh	r3, [r3, #4]
 80106a4:	b29a      	uxth	r2, r3
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	889b      	ldrh	r3, [r3, #4]
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d235      	bcs.n	801071c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80106b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d020      	beq.n	80106fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80106bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106be:	889b      	ldrh	r3, [r3, #4]
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c4:	88db      	ldrh	r3, [r3, #6]
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d307      	bcc.n	80106dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80106cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ce:	88db      	ldrh	r3, [r3, #6]
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	889b      	ldrh	r3, [r3, #4]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	429a      	cmp	r2, r3
 80106da:	d902      	bls.n	80106e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80106dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106e0:	e0de      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	68ba      	ldr	r2, [r7, #8]
 80106e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80106e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ea:	88db      	ldrh	r3, [r3, #6]
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f0:	889b      	ldrh	r3, [r3, #4]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d03d      	beq.n	8010774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80106f8:	2300      	movs	r3, #0
 80106fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80106fc:	e03a      	b.n	8010774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80106fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010700:	88db      	ldrh	r3, [r3, #6]
 8010702:	b29a      	uxth	r2, r3
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	889b      	ldrh	r3, [r3, #4]
 8010708:	b29b      	uxth	r3, r3
 801070a:	429a      	cmp	r2, r3
 801070c:	d902      	bls.n	8010714 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801070e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010712:	e0c5      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	605a      	str	r2, [r3, #4]
      break;
 801071a:	e02b      	b.n	8010774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	889b      	ldrh	r3, [r3, #4]
 8010720:	b29a      	uxth	r2, r3
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	889b      	ldrh	r3, [r3, #4]
 8010726:	b29b      	uxth	r3, r3
 8010728:	429a      	cmp	r2, r3
 801072a:	d102      	bne.n	8010732 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801072c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010730:	e0b6      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010734:	889b      	ldrh	r3, [r3, #4]
 8010736:	b29a      	uxth	r2, r3
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	88db      	ldrh	r3, [r3, #6]
 801073c:	b29b      	uxth	r3, r3
 801073e:	429a      	cmp	r2, r3
 8010740:	d202      	bcs.n	8010748 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010746:	e0ab      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074a:	2b00      	cmp	r3, #0
 801074c:	d009      	beq.n	8010762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010750:	88db      	ldrh	r3, [r3, #6]
 8010752:	b29a      	uxth	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	889b      	ldrh	r3, [r3, #4]
 8010758:	b29b      	uxth	r3, r3
 801075a:	429a      	cmp	r2, r3
 801075c:	d001      	beq.n	8010762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076e:	2b00      	cmp	r3, #0
 8010770:	d193      	bne.n	801069a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010772:	e000      	b.n	8010776 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010774:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010778:	2b00      	cmp	r3, #0
 801077a:	d12d      	bne.n	80107d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	2b00      	cmp	r3, #0
 8010780:	d01c      	beq.n	80107bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010784:	88db      	ldrh	r3, [r3, #6]
 8010786:	b29a      	uxth	r2, r3
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	889b      	ldrh	r3, [r3, #4]
 801078c:	b29b      	uxth	r3, r3
 801078e:	429a      	cmp	r2, r3
 8010790:	d906      	bls.n	80107a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010792:	4b45      	ldr	r3, [pc, #276]	; (80108a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010794:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010798:	4944      	ldr	r1, [pc, #272]	; (80108ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801079a:	4845      	ldr	r0, [pc, #276]	; (80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801079c:	f001 fc34 	bl	8012008 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	68ba      	ldr	r2, [r7, #8]
 80107a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80107a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a8:	88db      	ldrh	r3, [r3, #6]
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ae:	889b      	ldrh	r3, [r3, #4]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d010      	beq.n	80107d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	623b      	str	r3, [r7, #32]
 80107ba:	e00d      	b.n	80107d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d006      	beq.n	80107d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80107c4:	4b38      	ldr	r3, [pc, #224]	; (80108a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80107c6:	f240 12bf 	movw	r2, #447	; 0x1bf
 80107ca:	493a      	ldr	r1, [pc, #232]	; (80108b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80107cc:	4838      	ldr	r0, [pc, #224]	; (80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80107ce:	f001 fc1b 	bl	8012008 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	68ba      	ldr	r2, [r7, #8]
 80107d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d105      	bne.n	80107ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	7f9b      	ldrb	r3, [r3, #30]
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d059      	beq.n	801089e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d04f      	beq.n	8010890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d006      	beq.n	8010806 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	889b      	ldrh	r3, [r3, #4]
 8010800:	b29b      	uxth	r3, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	d002      	beq.n	801080c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	623b      	str	r3, [r7, #32]
 801080a:	e041      	b.n	8010890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010816:	e012      	b.n	801083e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	88db      	ldrh	r3, [r3, #6]
 8010822:	b29a      	uxth	r2, r3
 8010824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010826:	889b      	ldrh	r3, [r3, #4]
 8010828:	b29b      	uxth	r3, r3
 801082a:	429a      	cmp	r2, r3
 801082c:	d002      	beq.n	8010834 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	623b      	str	r3, [r7, #32]
            break;
 8010832:	e007      	b.n	8010844 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010836:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1e9      	bne.n	8010818 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010844:	6a3b      	ldr	r3, [r7, #32]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d022      	beq.n	8010890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d106      	bne.n	8010860 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010852:	4b15      	ldr	r3, [pc, #84]	; (80108a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010854:	f240 12df 	movw	r2, #479	; 0x1df
 8010858:	4917      	ldr	r1, [pc, #92]	; (80108b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801085a:	4815      	ldr	r0, [pc, #84]	; (80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801085c:	f001 fbd4 	bl	8012008 <iprintf>
          LWIP_ASSERT("sanity check",
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010868:	429a      	cmp	r2, r3
 801086a:	d106      	bne.n	801087a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801086c:	4b0e      	ldr	r3, [pc, #56]	; (80108a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801086e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010872:	4911      	ldr	r1, [pc, #68]	; (80108b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010874:	480e      	ldr	r0, [pc, #56]	; (80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010876:	f001 fbc7 	bl	8012008 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d006      	beq.n	8010890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010882:	4b09      	ldr	r3, [pc, #36]	; (80108a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010884:	f240 12e3 	movw	r2, #483	; 0x1e3
 8010888:	490c      	ldr	r1, [pc, #48]	; (80108bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801088a:	4809      	ldr	r0, [pc, #36]	; (80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801088c:	f001 fbbc 	bl	8012008 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010890:	6a3b      	ldr	r3, [r7, #32]
 8010892:	2b00      	cmp	r3, #0
 8010894:	bf14      	ite	ne
 8010896:	2301      	movne	r3, #1
 8010898:	2300      	moveq	r3, #0
 801089a:	b2db      	uxtb	r3, r3
 801089c:	e000      	b.n	80108a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3730      	adds	r7, #48	; 0x30
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	080159d4 	.word	0x080159d4
 80108ac:	08015ab8 	.word	0x08015ab8
 80108b0:	08015a1c 	.word	0x08015a1c
 80108b4:	08015ad8 	.word	0x08015ad8
 80108b8:	08015b10 	.word	0x08015b10
 80108bc:	08015b20 	.word	0x08015b20

080108c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08e      	sub	sp, #56	; 0x38
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80108ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	f003 030f 	and.w	r3, r3, #15
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	2b14      	cmp	r3, #20
 80108de:	f040 8167 	bne.w	8010bb0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80108e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e4:	88db      	ldrh	r3, [r3, #6]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7f4 fd4d 	bl	8005388 <lwip_htons>
 80108ee:	4603      	mov	r3, r0
 80108f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	00db      	lsls	r3, r3, #3
 80108f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	885b      	ldrh	r3, [r3, #2]
 80108fe:	b29b      	uxth	r3, r3
 8010900:	4618      	mov	r0, r3
 8010902:	f7f4 fd41 	bl	8005388 <lwip_htons>
 8010906:	4603      	mov	r3, r0
 8010908:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	f003 030f 	and.w	r3, r3, #15
 8010912:	b2db      	uxtb	r3, r3
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801091a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801091e:	b29b      	uxth	r3, r3
 8010920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010922:	429a      	cmp	r2, r3
 8010924:	f0c0 8146 	bcc.w	8010bb4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801092c:	b29b      	uxth	r3, r3
 801092e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7f6 f8eb 	bl	8006b10 <pbuf_clen>
 801093a:	4603      	mov	r3, r0
 801093c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801093e:	4ba3      	ldr	r3, [pc, #652]	; (8010bcc <ip4_reass+0x30c>)
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	461a      	mov	r2, r3
 8010944:	8c3b      	ldrh	r3, [r7, #32]
 8010946:	4413      	add	r3, r2
 8010948:	2b0a      	cmp	r3, #10
 801094a:	dd10      	ble.n	801096e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801094c:	8c3b      	ldrh	r3, [r7, #32]
 801094e:	4619      	mov	r1, r3
 8010950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010952:	f7ff fd81 	bl	8010458 <ip_reass_remove_oldest_datagram>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	f000 812d 	beq.w	8010bb8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801095e:	4b9b      	ldr	r3, [pc, #620]	; (8010bcc <ip4_reass+0x30c>)
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	8c3b      	ldrh	r3, [r7, #32]
 8010966:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010968:	2b0a      	cmp	r3, #10
 801096a:	f300 8125 	bgt.w	8010bb8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801096e:	4b98      	ldr	r3, [pc, #608]	; (8010bd0 <ip4_reass+0x310>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	633b      	str	r3, [r7, #48]	; 0x30
 8010974:	e015      	b.n	80109a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	695a      	ldr	r2, [r3, #20]
 801097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	429a      	cmp	r2, r3
 8010980:	d10c      	bne.n	801099c <ip4_reass+0xdc>
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	699a      	ldr	r2, [r3, #24]
 8010986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010988:	691b      	ldr	r3, [r3, #16]
 801098a:	429a      	cmp	r2, r3
 801098c:	d106      	bne.n	801099c <ip4_reass+0xdc>
 801098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010990:	899a      	ldrh	r2, [r3, #12]
 8010992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010994:	889b      	ldrh	r3, [r3, #4]
 8010996:	b29b      	uxth	r3, r3
 8010998:	429a      	cmp	r2, r3
 801099a:	d006      	beq.n	80109aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	633b      	str	r3, [r7, #48]	; 0x30
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d1e6      	bne.n	8010976 <ip4_reass+0xb6>
 80109a8:	e000      	b.n	80109ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80109aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80109ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d109      	bne.n	80109c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80109b2:	8c3b      	ldrh	r3, [r7, #32]
 80109b4:	4619      	mov	r1, r3
 80109b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109b8:	f7ff fdb0 	bl	801051c <ip_reass_enqueue_new_datagram>
 80109bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80109be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d11c      	bne.n	80109fe <ip4_reass+0x13e>
      goto nullreturn;
 80109c4:	e0f9      	b.n	8010bba <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80109c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c8:	88db      	ldrh	r3, [r3, #6]
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7f4 fcdb 	bl	8005388 <lwip_htons>
 80109d2:	4603      	mov	r3, r0
 80109d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d110      	bne.n	80109fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80109dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109de:	89db      	ldrh	r3, [r3, #14]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7f4 fcd1 	bl	8005388 <lwip_htons>
 80109e6:	4603      	mov	r3, r0
 80109e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80109f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f2:	3308      	adds	r3, #8
 80109f4:	2214      	movs	r2, #20
 80109f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109f8:	4618      	mov	r0, r3
 80109fa:	f001 faf2 	bl	8011fe2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	88db      	ldrh	r3, [r3, #6]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	f003 0320 	and.w	r3, r3, #32
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	bf0c      	ite	eq
 8010a0c:	2301      	moveq	r3, #1
 8010a0e:	2300      	movne	r3, #0
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00e      	beq.n	8010a38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010a1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a1e:	4413      	add	r3, r2
 8010a20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010a22:	8b7a      	ldrh	r2, [r7, #26]
 8010a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a26:	429a      	cmp	r2, r3
 8010a28:	f0c0 80a0 	bcc.w	8010b6c <ip4_reass+0x2ac>
 8010a2c:	8b7b      	ldrh	r3, [r7, #26]
 8010a2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010a32:	4293      	cmp	r3, r2
 8010a34:	f200 809a 	bhi.w	8010b6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010a38:	69fa      	ldr	r2, [r7, #28]
 8010a3a:	6879      	ldr	r1, [r7, #4]
 8010a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a3e:	f7ff fdd5 	bl	80105ec <ip_reass_chain_frag_into_datagram_and_validate>
 8010a42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a4a:	f000 8091 	beq.w	8010b70 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010a4e:	4b5f      	ldr	r3, [pc, #380]	; (8010bcc <ip4_reass+0x30c>)
 8010a50:	881a      	ldrh	r2, [r3, #0]
 8010a52:	8c3b      	ldrh	r3, [r7, #32]
 8010a54:	4413      	add	r3, r2
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	4b5c      	ldr	r3, [pc, #368]	; (8010bcc <ip4_reass+0x30c>)
 8010a5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00d      	beq.n	8010a7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010a62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a66:	4413      	add	r3, r2
 8010a68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6c:	8a7a      	ldrh	r2, [r7, #18]
 8010a6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a72:	7f9b      	ldrb	r3, [r3, #30]
 8010a74:	f043 0301 	orr.w	r3, r3, #1
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d171      	bne.n	8010b68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a86:	8b9b      	ldrh	r3, [r3, #28]
 8010a88:	3314      	adds	r3, #20
 8010a8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	3308      	adds	r3, #8
 8010aa2:	2214      	movs	r2, #20
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aa8:	f001 fa9b 	bl	8011fe2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010aac:	8a3b      	ldrh	r3, [r7, #16]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7f4 fc6a 	bl	8005388 <lwip_htons>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	2200      	movs	r2, #0
 8010ac0:	719a      	strb	r2, [r3, #6]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac8:	2200      	movs	r2, #0
 8010aca:	729a      	strb	r2, [r3, #10]
 8010acc:	2200      	movs	r2, #0
 8010ace:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010ad6:	e00d      	b.n	8010af4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010ade:	2114      	movs	r1, #20
 8010ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ae2:	f7f5 ff01 	bl	80068e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010ae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7f6 f851 	bl	8006b90 <pbuf_cat>
      r = iprh->next_pbuf;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1ee      	bne.n	8010ad8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010afa:	4b35      	ldr	r3, [pc, #212]	; (8010bd0 <ip4_reass+0x310>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d102      	bne.n	8010b0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010b04:	2300      	movs	r3, #0
 8010b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b08:	e010      	b.n	8010b2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010b0a:	4b31      	ldr	r3, [pc, #196]	; (8010bd0 <ip4_reass+0x310>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b10:	e007      	b.n	8010b22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d006      	beq.n	8010b2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1f4      	bne.n	8010b12 <ip4_reass+0x252>
 8010b28:	e000      	b.n	8010b2c <ip4_reass+0x26c>
          break;
 8010b2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b30:	f7ff fd2e 	bl	8010590 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f7f5 ffeb 	bl	8006b10 <pbuf_clen>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010b3e:	4b23      	ldr	r3, [pc, #140]	; (8010bcc <ip4_reass+0x30c>)
 8010b40:	881b      	ldrh	r3, [r3, #0]
 8010b42:	8c3a      	ldrh	r2, [r7, #32]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d906      	bls.n	8010b56 <ip4_reass+0x296>
 8010b48:	4b22      	ldr	r3, [pc, #136]	; (8010bd4 <ip4_reass+0x314>)
 8010b4a:	f240 229b 	movw	r2, #667	; 0x29b
 8010b4e:	4922      	ldr	r1, [pc, #136]	; (8010bd8 <ip4_reass+0x318>)
 8010b50:	4822      	ldr	r0, [pc, #136]	; (8010bdc <ip4_reass+0x31c>)
 8010b52:	f001 fa59 	bl	8012008 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010b56:	4b1d      	ldr	r3, [pc, #116]	; (8010bcc <ip4_reass+0x30c>)
 8010b58:	881a      	ldrh	r2, [r3, #0]
 8010b5a:	8c3b      	ldrh	r3, [r7, #32]
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	4b1a      	ldr	r3, [pc, #104]	; (8010bcc <ip4_reass+0x30c>)
 8010b62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	e02c      	b.n	8010bc2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	e02a      	b.n	8010bc2 <ip4_reass+0x302>

nullreturn_ipr:
 8010b6c:	bf00      	nop
 8010b6e:	e000      	b.n	8010b72 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010b70:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <ip4_reass+0x2c6>
 8010b78:	4b16      	ldr	r3, [pc, #88]	; (8010bd4 <ip4_reass+0x314>)
 8010b7a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010b7e:	4918      	ldr	r1, [pc, #96]	; (8010be0 <ip4_reass+0x320>)
 8010b80:	4816      	ldr	r0, [pc, #88]	; (8010bdc <ip4_reass+0x31c>)
 8010b82:	f001 fa41 	bl	8012008 <iprintf>
  if (ipr->p == NULL) {
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d114      	bne.n	8010bb8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010b8e:	4b10      	ldr	r3, [pc, #64]	; (8010bd0 <ip4_reass+0x310>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d006      	beq.n	8010ba6 <ip4_reass+0x2e6>
 8010b98:	4b0e      	ldr	r3, [pc, #56]	; (8010bd4 <ip4_reass+0x314>)
 8010b9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010b9e:	4911      	ldr	r1, [pc, #68]	; (8010be4 <ip4_reass+0x324>)
 8010ba0:	480e      	ldr	r0, [pc, #56]	; (8010bdc <ip4_reass+0x31c>)
 8010ba2:	f001 fa31 	bl	8012008 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010baa:	f7ff fcf1 	bl	8010590 <ip_reass_dequeue_datagram>
 8010bae:	e004      	b.n	8010bba <ip4_reass+0x2fa>
    goto nullreturn;
 8010bb0:	bf00      	nop
 8010bb2:	e002      	b.n	8010bba <ip4_reass+0x2fa>
    goto nullreturn;
 8010bb4:	bf00      	nop
 8010bb6:	e000      	b.n	8010bba <ip4_reass+0x2fa>
  }

nullreturn:
 8010bb8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f7f5 ff1a 	bl	80069f4 <pbuf_free>
  return NULL;
 8010bc0:	2300      	movs	r3, #0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3738      	adds	r7, #56	; 0x38
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	20003f84 	.word	0x20003f84
 8010bd0:	20003f80 	.word	0x20003f80
 8010bd4:	080159d4 	.word	0x080159d4
 8010bd8:	08015b44 	.word	0x08015b44
 8010bdc:	08015a1c 	.word	0x08015a1c
 8010be0:	08015b60 	.word	0x08015b60
 8010be4:	08015b6c 	.word	0x08015b6c

08010be8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010bec:	2005      	movs	r0, #5
 8010bee:	f7f5 f881 	bl	8005cf4 <memp_malloc>
 8010bf2:	4603      	mov	r3, r0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d106      	bne.n	8010c14 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010c06:	4b07      	ldr	r3, [pc, #28]	; (8010c24 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010c08:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010c0c:	4906      	ldr	r1, [pc, #24]	; (8010c28 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010c0e:	4807      	ldr	r0, [pc, #28]	; (8010c2c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010c10:	f001 f9fa 	bl	8012008 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	2005      	movs	r0, #5
 8010c18:	f7f5 f8be 	bl	8005d98 <memp_free>
}
 8010c1c:	bf00      	nop
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	080159d4 	.word	0x080159d4
 8010c28:	08015b8c 	.word	0x08015b8c
 8010c2c:	08015a1c 	.word	0x08015a1c

08010c30 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d106      	bne.n	8010c50 <ipfrag_free_pbuf_custom+0x20>
 8010c42:	4b11      	ldr	r3, [pc, #68]	; (8010c88 <ipfrag_free_pbuf_custom+0x58>)
 8010c44:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010c48:	4910      	ldr	r1, [pc, #64]	; (8010c8c <ipfrag_free_pbuf_custom+0x5c>)
 8010c4a:	4811      	ldr	r0, [pc, #68]	; (8010c90 <ipfrag_free_pbuf_custom+0x60>)
 8010c4c:	f001 f9dc 	bl	8012008 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d006      	beq.n	8010c66 <ipfrag_free_pbuf_custom+0x36>
 8010c58:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <ipfrag_free_pbuf_custom+0x58>)
 8010c5a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010c5e:	490d      	ldr	r1, [pc, #52]	; (8010c94 <ipfrag_free_pbuf_custom+0x64>)
 8010c60:	480b      	ldr	r0, [pc, #44]	; (8010c90 <ipfrag_free_pbuf_custom+0x60>)
 8010c62:	f001 f9d1 	bl	8012008 <iprintf>
  if (pcr->original != NULL) {
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	695b      	ldr	r3, [r3, #20]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d004      	beq.n	8010c78 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	695b      	ldr	r3, [r3, #20]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7f5 febe 	bl	80069f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f7ff ffbd 	bl	8010bf8 <ip_frag_free_pbuf_custom_ref>
}
 8010c7e:	bf00      	nop
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	080159d4 	.word	0x080159d4
 8010c8c:	08015b98 	.word	0x08015b98
 8010c90:	08015a1c 	.word	0x08015a1c
 8010c94:	08015ba4 	.word	0x08015ba4

08010c98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b094      	sub	sp, #80	; 0x50
 8010c9c:	af02      	add	r7, sp, #8
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010cae:	3b14      	subs	r3, #20
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	da00      	bge.n	8010cb6 <ip4_frag+0x1e>
 8010cb4:	3307      	adds	r3, #7
 8010cb6:	10db      	asrs	r3, r3, #3
 8010cb8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010cba:	2314      	movs	r3, #20
 8010cbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	f003 030f 	and.w	r3, r3, #15
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	2b14      	cmp	r3, #20
 8010cd8:	d002      	beq.n	8010ce0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010cda:	f06f 0305 	mvn.w	r3, #5
 8010cde:	e10f      	b.n	8010f00 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	895b      	ldrh	r3, [r3, #10]
 8010ce4:	2b13      	cmp	r3, #19
 8010ce6:	d809      	bhi.n	8010cfc <ip4_frag+0x64>
 8010ce8:	4b87      	ldr	r3, [pc, #540]	; (8010f08 <ip4_frag+0x270>)
 8010cea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010cee:	4987      	ldr	r1, [pc, #540]	; (8010f0c <ip4_frag+0x274>)
 8010cf0:	4887      	ldr	r0, [pc, #540]	; (8010f10 <ip4_frag+0x278>)
 8010cf2:	f001 f989 	bl	8012008 <iprintf>
 8010cf6:	f06f 0305 	mvn.w	r3, #5
 8010cfa:	e101      	b.n	8010f00 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfe:	88db      	ldrh	r3, [r3, #6]
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7f4 fb40 	bl	8005388 <lwip_htons>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010d0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010d16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	891b      	ldrh	r3, [r3, #8]
 8010d22:	3b14      	subs	r3, #20
 8010d24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010d28:	e0e0      	b.n	8010eec <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010d2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d2c:	00db      	lsls	r3, r3, #3
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d34:	4293      	cmp	r3, r2
 8010d36:	bf28      	it	cs
 8010d38:	4613      	movcs	r3, r2
 8010d3a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010d3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d40:	2114      	movs	r1, #20
 8010d42:	200e      	movs	r0, #14
 8010d44:	f7f5 fb76 	bl	8006434 <pbuf_alloc>
 8010d48:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	f000 80d4 	beq.w	8010efa <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d54:	895b      	ldrh	r3, [r3, #10]
 8010d56:	2b13      	cmp	r3, #19
 8010d58:	d806      	bhi.n	8010d68 <ip4_frag+0xd0>
 8010d5a:	4b6b      	ldr	r3, [pc, #428]	; (8010f08 <ip4_frag+0x270>)
 8010d5c:	f240 3225 	movw	r2, #805	; 0x325
 8010d60:	496c      	ldr	r1, [pc, #432]	; (8010f14 <ip4_frag+0x27c>)
 8010d62:	486b      	ldr	r0, [pc, #428]	; (8010f10 <ip4_frag+0x278>)
 8010d64:	f001 f950 	bl	8012008 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	2214      	movs	r2, #20
 8010d6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d70:	4618      	mov	r0, r3
 8010d72:	f001 f936 	bl	8011fe2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010d7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010d82:	e064      	b.n	8010e4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	895a      	ldrh	r2, [r3, #10]
 8010d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	895b      	ldrh	r3, [r3, #10]
 8010d92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d906      	bls.n	8010da6 <ip4_frag+0x10e>
 8010d98:	4b5b      	ldr	r3, [pc, #364]	; (8010f08 <ip4_frag+0x270>)
 8010d9a:	f240 322d 	movw	r2, #813	; 0x32d
 8010d9e:	495e      	ldr	r1, [pc, #376]	; (8010f18 <ip4_frag+0x280>)
 8010da0:	485b      	ldr	r0, [pc, #364]	; (8010f10 <ip4_frag+0x278>)
 8010da2:	f001 f931 	bl	8012008 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010da6:	8bfa      	ldrh	r2, [r7, #30]
 8010da8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010dac:	4293      	cmp	r3, r2
 8010dae:	bf28      	it	cs
 8010db0:	4613      	movcs	r3, r2
 8010db2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010db6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d105      	bne.n	8010dca <ip4_frag+0x132>
        poff = 0;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	60fb      	str	r3, [r7, #12]
        continue;
 8010dc8:	e041      	b.n	8010e4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010dca:	f7ff ff0d 	bl	8010be8 <ip_frag_alloc_pbuf_custom_ref>
 8010dce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010dd0:	69bb      	ldr	r3, [r7, #24]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d103      	bne.n	8010dde <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dd8:	f7f5 fe0c 	bl	80069f4 <pbuf_free>
        goto memerr;
 8010ddc:	e08e      	b.n	8010efc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010dde:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010de4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010de6:	4413      	add	r3, r2
 8010de8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010dec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010df0:	9201      	str	r2, [sp, #4]
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	4603      	mov	r3, r0
 8010df6:	2241      	movs	r2, #65	; 0x41
 8010df8:	2000      	movs	r0, #0
 8010dfa:	f7f5 fc41 	bl	8006680 <pbuf_alloced_custom>
 8010dfe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d106      	bne.n	8010e14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010e06:	69b8      	ldr	r0, [r7, #24]
 8010e08:	f7ff fef6 	bl	8010bf8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e0e:	f7f5 fdf1 	bl	80069f4 <pbuf_free>
        goto memerr;
 8010e12:	e073      	b.n	8010efc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f7f5 fe93 	bl	8006b40 <pbuf_ref>
      pcr->original = p;
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	68fa      	ldr	r2, [r7, #12]
 8010e1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	4a3e      	ldr	r2, [pc, #248]	; (8010f1c <ip4_frag+0x284>)
 8010e24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010e26:	6979      	ldr	r1, [r7, #20]
 8010e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e2a:	f7f5 feb1 	bl	8006b90 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010e2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010e32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010e3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d004      	beq.n	8010e4e <ip4_frag+0x1b6>
        poff = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010e4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d196      	bne.n	8010d84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010e56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010e58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010e5c:	4413      	add	r3, r2
 8010e5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010e60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010e68:	3b14      	subs	r3, #20
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	bfd4      	ite	le
 8010e6e:	2301      	movle	r3, #1
 8010e70:	2300      	movgt	r3, #0
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010e76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010e80:	6a3b      	ldr	r3, [r7, #32]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d002      	beq.n	8010e8c <ip4_frag+0x1f4>
 8010e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d003      	beq.n	8010e94 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010e8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010e92:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010e94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7f4 fa76 	bl	8005388 <lwip_htons>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010ea4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ea6:	3314      	adds	r3, #20
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7f4 fa6c 	bl	8005388 <lwip_htons>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	2200      	movs	r2, #0
 8010ebc:	729a      	strb	r2, [r3, #10]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	695b      	ldr	r3, [r3, #20]
 8010ec6:	687a      	ldr	r2, [r7, #4]
 8010ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010eca:	68b8      	ldr	r0, [r7, #8]
 8010ecc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ed0:	f7f5 fd90 	bl	80069f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010ed4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ed8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010ee0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ee4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010eec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f47f af1a 	bne.w	8010d2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	e002      	b.n	8010f00 <ip4_frag+0x268>
      goto memerr;
 8010efa:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3748      	adds	r7, #72	; 0x48
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	080159d4 	.word	0x080159d4
 8010f0c:	08015bb0 	.word	0x08015bb0
 8010f10:	08015a1c 	.word	0x08015a1c
 8010f14:	08015bcc 	.word	0x08015bcc
 8010f18:	08015bec 	.word	0x08015bec
 8010f1c:	08010c31 	.word	0x08010c31

08010f20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b086      	sub	sp, #24
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010f2a:	230e      	movs	r3, #14
 8010f2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	895b      	ldrh	r3, [r3, #10]
 8010f32:	2b0e      	cmp	r3, #14
 8010f34:	d96e      	bls.n	8011014 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	7bdb      	ldrb	r3, [r3, #15]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d106      	bne.n	8010f4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f44:	3301      	adds	r3, #1
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	7b1a      	ldrb	r2, [r3, #12]
 8010f56:	7b5b      	ldrb	r3, [r3, #13]
 8010f58:	021b      	lsls	r3, r3, #8
 8010f5a:	4313      	orrs	r3, r2
 8010f5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d023      	beq.n	8010fb2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d10f      	bne.n	8010f92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	785b      	ldrb	r3, [r3, #1]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d11b      	bne.n	8010fb2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010f7e:	2b5e      	cmp	r3, #94	; 0x5e
 8010f80:	d117      	bne.n	8010fb2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	7b5b      	ldrb	r3, [r3, #13]
 8010f86:	f043 0310 	orr.w	r3, r3, #16
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	735a      	strb	r2, [r3, #13]
 8010f90:	e00f      	b.n	8010fb2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	2206      	movs	r2, #6
 8010f96:	4928      	ldr	r1, [pc, #160]	; (8011038 <ethernet_input+0x118>)
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f001 f813 	bl	8011fc4 <memcmp>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d106      	bne.n	8010fb2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	7b5b      	ldrb	r3, [r3, #13]
 8010fa8:	f043 0308 	orr.w	r3, r3, #8
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010fb2:	89fb      	ldrh	r3, [r7, #14]
 8010fb4:	2b08      	cmp	r3, #8
 8010fb6:	d003      	beq.n	8010fc0 <ethernet_input+0xa0>
 8010fb8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010fbc:	d014      	beq.n	8010fe8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010fbe:	e032      	b.n	8011026 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fc6:	f003 0308 	and.w	r3, r3, #8
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d024      	beq.n	8011018 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010fce:	8afb      	ldrh	r3, [r7, #22]
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7f5 fc88 	bl	80068e8 <pbuf_remove_header>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d11e      	bne.n	801101c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7fe ff0f 	bl	800fe04 <ip4_input>
      break;
 8010fe6:	e013      	b.n	8011010 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fee:	f003 0308 	and.w	r3, r3, #8
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d014      	beq.n	8011020 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010ff6:	8afb      	ldrh	r3, [r7, #22]
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7f5 fc74 	bl	80068e8 <pbuf_remove_header>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d10e      	bne.n	8011024 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7fe f8ab 	bl	800f164 <etharp_input>
      break;
 801100e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	e00c      	b.n	801102e <ethernet_input+0x10e>
    goto free_and_return;
 8011014:	bf00      	nop
 8011016:	e006      	b.n	8011026 <ethernet_input+0x106>
        goto free_and_return;
 8011018:	bf00      	nop
 801101a:	e004      	b.n	8011026 <ethernet_input+0x106>
        goto free_and_return;
 801101c:	bf00      	nop
 801101e:	e002      	b.n	8011026 <ethernet_input+0x106>
        goto free_and_return;
 8011020:	bf00      	nop
 8011022:	e000      	b.n	8011026 <ethernet_input+0x106>
        goto free_and_return;
 8011024:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f7f5 fce4 	bl	80069f4 <pbuf_free>
  return ERR_OK;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	08015e40 	.word	0x08015e40

0801103c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801104a:	8c3b      	ldrh	r3, [r7, #32]
 801104c:	4618      	mov	r0, r3
 801104e:	f7f4 f99b 	bl	8005388 <lwip_htons>
 8011052:	4603      	mov	r3, r0
 8011054:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011056:	210e      	movs	r1, #14
 8011058:	68b8      	ldr	r0, [r7, #8]
 801105a:	f7f5 fc35 	bl	80068c8 <pbuf_add_header>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d125      	bne.n	80110b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	8afa      	ldrh	r2, [r7, #22]
 801106e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	2206      	movs	r2, #6
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	4618      	mov	r0, r3
 8011078:	f000 ffb3 	bl	8011fe2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	3306      	adds	r3, #6
 8011080:	2206      	movs	r2, #6
 8011082:	6879      	ldr	r1, [r7, #4]
 8011084:	4618      	mov	r0, r3
 8011086:	f000 ffac 	bl	8011fe2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011090:	2b06      	cmp	r3, #6
 8011092:	d006      	beq.n	80110a2 <ethernet_output+0x66>
 8011094:	4b0a      	ldr	r3, [pc, #40]	; (80110c0 <ethernet_output+0x84>)
 8011096:	f240 1233 	movw	r2, #307	; 0x133
 801109a:	490a      	ldr	r1, [pc, #40]	; (80110c4 <ethernet_output+0x88>)
 801109c:	480a      	ldr	r0, [pc, #40]	; (80110c8 <ethernet_output+0x8c>)
 801109e:	f000 ffb3 	bl	8012008 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	68b9      	ldr	r1, [r7, #8]
 80110a8:	68f8      	ldr	r0, [r7, #12]
 80110aa:	4798      	blx	r3
 80110ac:	4603      	mov	r3, r0
 80110ae:	e002      	b.n	80110b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80110b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80110b2:	f06f 0301 	mvn.w	r3, #1
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3718      	adds	r7, #24
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	08015bfc 	.word	0x08015bfc
 80110c4:	08015c34 	.word	0x08015c34
 80110c8:	08015c68 	.word	0x08015c68

080110cc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	60bb      	str	r3, [r7, #8]
 80110da:	2304      	movs	r3, #4
 80110dc:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80110de:	f107 0308 	add.w	r3, r7, #8
 80110e2:	2100      	movs	r1, #0
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7f1 fbc7 	bl	8002878 <osMessageCreate>
 80110ea:	4602      	mov	r2, r0
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d102      	bne.n	80110fe <sys_mbox_new+0x32>
    return ERR_MEM;
 80110f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110fc:	e000      	b.n	8011100 <sys_mbox_new+0x34>

  return ERR_OK;
 80110fe:	2300      	movs	r3, #0
}
 8011100:	4618      	mov	r0, r3
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	6839      	ldr	r1, [r7, #0]
 8011118:	2200      	movs	r2, #0
 801111a:	4618      	mov	r0, r3
 801111c:	f7f1 fbbe 	bl	800289c <osMessagePut>
 8011120:	4603      	mov	r3, r0
 8011122:	2b00      	cmp	r3, #0
 8011124:	d102      	bne.n	801112c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8011126:	2300      	movs	r3, #0
 8011128:	73fb      	strb	r3, [r7, #15]
 801112a:	e001      	b.n	8011130 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801112c:	23ff      	movs	r3, #255	; 0xff
 801112e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011130:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b08c      	sub	sp, #48	; 0x30
 8011140:	af00      	add	r7, sp, #0
 8011142:	61f8      	str	r0, [r7, #28]
 8011144:	61b9      	str	r1, [r7, #24]
 8011146:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8011148:	f7f1 fa19 	bl	800257e <osKernelSysTick>
 801114c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d017      	beq.n	8011184 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	6819      	ldr	r1, [r3, #0]
 8011158:	f107 0320 	add.w	r3, r7, #32
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	4618      	mov	r0, r3
 8011160:	f7f1 fbdc 	bl	800291c <osMessageGet>

    if(event.status == osEventMessage)
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	2b10      	cmp	r3, #16
 8011168:	d109      	bne.n	801117e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	461a      	mov	r2, r3
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8011172:	f7f1 fa04 	bl	800257e <osKernelSysTick>
 8011176:	4602      	mov	r2, r0
 8011178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	e019      	b.n	80111b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011182:	e016      	b.n	80111b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	6819      	ldr	r1, [r3, #0]
 8011188:	463b      	mov	r3, r7
 801118a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801118e:	4618      	mov	r0, r3
 8011190:	f7f1 fbc4 	bl	800291c <osMessageGet>
 8011194:	f107 0320 	add.w	r3, r7, #32
 8011198:	463a      	mov	r2, r7
 801119a:	ca07      	ldmia	r2, {r0, r1, r2}
 801119c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	461a      	mov	r2, r3
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80111a8:	f7f1 f9e9 	bl	800257e <osKernelSysTick>
 80111ac:	4602      	mov	r2, r0
 80111ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3730      	adds	r7, #48	; 0x30
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80111ba:	b480      	push	{r7}
 80111bc:	b083      	sub	sp, #12
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <sys_mbox_valid+0x14>
    return 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	e000      	b.n	80111d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80111ce:	2301      	movs	r3, #1
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80111e0:	4803      	ldr	r0, [pc, #12]	; (80111f0 <sys_init+0x14>)
 80111e2:	f7f1 fa17 	bl	8002614 <osMutexCreate>
 80111e6:	4602      	mov	r2, r0
 80111e8:	4b02      	ldr	r3, [pc, #8]	; (80111f4 <sys_init+0x18>)
 80111ea:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80111ec:	bf00      	nop
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	08015e50 	.word	0x08015e50
 80111f4:	20007718 	.word	0x20007718

080111f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8011200:	2300      	movs	r3, #0
 8011202:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8011204:	f107 030c 	add.w	r3, r7, #12
 8011208:	4618      	mov	r0, r3
 801120a:	f7f1 fa03 	bl	8002614 <osMutexCreate>
 801120e:	4602      	mov	r2, r0
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d102      	bne.n	8011222 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011220:	e000      	b.n	8011224 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011222:	2300      	movs	r3, #0
}
 8011224:	4618      	mov	r0, r3
 8011226:	3710      	adds	r7, #16
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801123c:	4618      	mov	r0, r3
 801123e:	f7f1 f9f5 	bl	800262c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8011242:	bf00      	nop
 8011244:	3708      	adds	r7, #8
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4618      	mov	r0, r3
 8011258:	f7f1 fa36 	bl	80026c8 <osMutexRelease>
}
 801125c:	bf00      	nop
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b08a      	sub	sp, #40	; 0x28
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
 8011270:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	617b      	str	r3, [r7, #20]
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	61bb      	str	r3, [r7, #24]
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	b21b      	sxth	r3, r3
 801127e:	83bb      	strh	r3, [r7, #28]
 8011280:	2300      	movs	r3, #0
 8011282:	623b      	str	r3, [r7, #32]
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8011288:	f107 0314 	add.w	r3, r7, #20
 801128c:	6879      	ldr	r1, [r7, #4]
 801128e:	4618      	mov	r0, r3
 8011290:	f7f1 f985 	bl	800259e <osThreadCreate>
 8011294:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8011296:	4618      	mov	r0, r3
 8011298:	3728      	adds	r7, #40	; 0x28
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
	...

080112a0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80112a4:	4b04      	ldr	r3, [pc, #16]	; (80112b8 <sys_arch_protect+0x18>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7f1 f9bd 	bl	800262c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80112b2:	2301      	movs	r3, #1
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20007718 	.word	0x20007718

080112bc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80112c4:	4b04      	ldr	r3, [pc, #16]	; (80112d8 <sys_arch_unprotect+0x1c>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f1 f9fd 	bl	80026c8 <osMutexRelease>
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	20007718 	.word	0x20007718

080112dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b08e      	sub	sp, #56	; 0x38
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112e8:	2200      	movs	r2, #0
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	605a      	str	r2, [r3, #4]
 80112ee:	609a      	str	r2, [r3, #8]
 80112f0:	60da      	str	r2, [r3, #12]
 80112f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	4a52      	ldr	r2, [pc, #328]	; (8011444 <HAL_ETH_MspInit+0x168>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	f040 809e 	bne.w	801143c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8011300:	4b51      	ldr	r3, [pc, #324]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011304:	4a50      	ldr	r2, [pc, #320]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801130a:	6313      	str	r3, [r2, #48]	; 0x30
 801130c:	4b4e      	ldr	r3, [pc, #312]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011314:	623b      	str	r3, [r7, #32]
 8011316:	6a3b      	ldr	r3, [r7, #32]
 8011318:	4b4b      	ldr	r3, [pc, #300]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801131c:	4a4a      	ldr	r2, [pc, #296]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801131e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011322:	6313      	str	r3, [r2, #48]	; 0x30
 8011324:	4b48      	ldr	r3, [pc, #288]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801132c:	61fb      	str	r3, [r7, #28]
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	4b45      	ldr	r3, [pc, #276]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011334:	4a44      	ldr	r2, [pc, #272]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011336:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801133a:	6313      	str	r3, [r2, #48]	; 0x30
 801133c:	4b42      	ldr	r3, [pc, #264]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011344:	61bb      	str	r3, [r7, #24]
 8011346:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011348:	4b3f      	ldr	r3, [pc, #252]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134c:	4a3e      	ldr	r2, [pc, #248]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801134e:	f043 0304 	orr.w	r3, r3, #4
 8011352:	6313      	str	r3, [r2, #48]	; 0x30
 8011354:	4b3c      	ldr	r3, [pc, #240]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011358:	f003 0304 	and.w	r3, r3, #4
 801135c:	617b      	str	r3, [r7, #20]
 801135e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011360:	4b39      	ldr	r3, [pc, #228]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011364:	4a38      	ldr	r2, [pc, #224]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011366:	f043 0301 	orr.w	r3, r3, #1
 801136a:	6313      	str	r3, [r2, #48]	; 0x30
 801136c:	4b36      	ldr	r3, [pc, #216]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011370:	f003 0301 	and.w	r3, r3, #1
 8011374:	613b      	str	r3, [r7, #16]
 8011376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011378:	4b33      	ldr	r3, [pc, #204]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801137c:	4a32      	ldr	r2, [pc, #200]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801137e:	f043 0302 	orr.w	r3, r3, #2
 8011382:	6313      	str	r3, [r2, #48]	; 0x30
 8011384:	4b30      	ldr	r3, [pc, #192]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011388:	f003 0302 	and.w	r3, r3, #2
 801138c:	60fb      	str	r3, [r7, #12]
 801138e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011390:	4b2d      	ldr	r3, [pc, #180]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011394:	4a2c      	ldr	r2, [pc, #176]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 8011396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801139a:	6313      	str	r3, [r2, #48]	; 0x30
 801139c:	4b2a      	ldr	r3, [pc, #168]	; (8011448 <HAL_ETH_MspInit+0x16c>)
 801139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113a4:	60bb      	str	r3, [r7, #8]
 80113a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80113a8:	2332      	movs	r3, #50	; 0x32
 80113aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113ac:	2302      	movs	r3, #2
 80113ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113b0:	2300      	movs	r3, #0
 80113b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113b4:	2303      	movs	r3, #3
 80113b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113b8:	230b      	movs	r3, #11
 80113ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113c0:	4619      	mov	r1, r3
 80113c2:	4822      	ldr	r0, [pc, #136]	; (801144c <HAL_ETH_MspInit+0x170>)
 80113c4:	f7f0 fa90 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80113c8:	2386      	movs	r3, #134	; 0x86
 80113ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113cc:	2302      	movs	r3, #2
 80113ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113d0:	2300      	movs	r3, #0
 80113d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113d4:	2303      	movs	r3, #3
 80113d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113d8:	230b      	movs	r3, #11
 80113da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113e0:	4619      	mov	r1, r3
 80113e2:	481b      	ldr	r0, [pc, #108]	; (8011450 <HAL_ETH_MspInit+0x174>)
 80113e4:	f7f0 fa80 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80113e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80113ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113ee:	2302      	movs	r3, #2
 80113f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113f2:	2300      	movs	r3, #0
 80113f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113f6:	2303      	movs	r3, #3
 80113f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113fa:	230b      	movs	r3, #11
 80113fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80113fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011402:	4619      	mov	r1, r3
 8011404:	4813      	ldr	r0, [pc, #76]	; (8011454 <HAL_ETH_MspInit+0x178>)
 8011406:	f7f0 fa6f 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801140a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011410:	2302      	movs	r3, #2
 8011412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011414:	2300      	movs	r3, #0
 8011416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011418:	2303      	movs	r3, #3
 801141a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801141c:	230b      	movs	r3, #11
 801141e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011424:	4619      	mov	r1, r3
 8011426:	480c      	ldr	r0, [pc, #48]	; (8011458 <HAL_ETH_MspInit+0x17c>)
 8011428:	f7f0 fa5e 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801142c:	2200      	movs	r2, #0
 801142e:	2105      	movs	r1, #5
 8011430:	203d      	movs	r0, #61	; 0x3d
 8011432:	f7ef fa30 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011436:	203d      	movs	r0, #61	; 0x3d
 8011438:	f7ef fa49 	bl	80008ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801143c:	bf00      	nop
 801143e:	3738      	adds	r7, #56	; 0x38
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	40028000 	.word	0x40028000
 8011448:	40023800 	.word	0x40023800
 801144c:	40020800 	.word	0x40020800
 8011450:	40020000 	.word	0x40020000
 8011454:	40020400 	.word	0x40020400
 8011458:	40021800 	.word	0x40021800

0801145c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8011464:	4b04      	ldr	r3, [pc, #16]	; (8011478 <HAL_ETH_RxCpltCallback+0x1c>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f7f1 f9cf 	bl	800280c <osSemaphoreRelease>
}
 801146e:	bf00      	nop
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	20003f88 	.word	0x20003f88

0801147c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 801147c:	b5b0      	push	{r4, r5, r7, lr}
 801147e:	b08c      	sub	sp, #48	; 0x30
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8011484:	2300      	movs	r3, #0
 8011486:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011488:	4b5a      	ldr	r3, [pc, #360]	; (80115f4 <low_level_init+0x178>)
 801148a:	4a5b      	ldr	r2, [pc, #364]	; (80115f8 <low_level_init+0x17c>)
 801148c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801148e:	4b59      	ldr	r3, [pc, #356]	; (80115f4 <low_level_init+0x178>)
 8011490:	2201      	movs	r2, #1
 8011492:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8011494:	4b57      	ldr	r3, [pc, #348]	; (80115f4 <low_level_init+0x178>)
 8011496:	2201      	movs	r2, #1
 8011498:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801149a:	2300      	movs	r3, #0
 801149c:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 80114a0:	2380      	movs	r3, #128	; 0x80
 80114a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 80114a6:	23e1      	movs	r3, #225	; 0xe1
 80114a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 80114ac:	2300      	movs	r3, #0
 80114ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x00;
 80114b2:	2300      	movs	r3, #0
 80114b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x00;
 80114b8:	2300      	movs	r3, #0
 80114ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 80114be:	4a4d      	ldr	r2, [pc, #308]	; (80115f4 <low_level_init+0x178>)
 80114c0:	f107 0320 	add.w	r3, r7, #32
 80114c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80114c6:	4b4b      	ldr	r3, [pc, #300]	; (80115f4 <low_level_init+0x178>)
 80114c8:	2201      	movs	r2, #1
 80114ca:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80114cc:	4b49      	ldr	r3, [pc, #292]	; (80115f4 <low_level_init+0x178>)
 80114ce:	2200      	movs	r2, #0
 80114d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80114d2:	4b48      	ldr	r3, [pc, #288]	; (80115f4 <low_level_init+0x178>)
 80114d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80114d8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80114da:	4846      	ldr	r0, [pc, #280]	; (80115f4 <low_level_init+0x178>)
 80114dc:	f7ef fa12 	bl	8000904 <HAL_ETH_Init>
 80114e0:	4603      	mov	r3, r0
 80114e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (hal_eth_init_status == HAL_OK)
 80114e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d108      	bne.n	8011500 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114f4:	f043 0304 	orr.w	r3, r3, #4
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011500:	2304      	movs	r3, #4
 8011502:	4a3e      	ldr	r2, [pc, #248]	; (80115fc <low_level_init+0x180>)
 8011504:	493e      	ldr	r1, [pc, #248]	; (8011600 <low_level_init+0x184>)
 8011506:	483b      	ldr	r0, [pc, #236]	; (80115f4 <low_level_init+0x178>)
 8011508:	f7ef fb98 	bl	8000c3c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801150c:	2304      	movs	r3, #4
 801150e:	4a3d      	ldr	r2, [pc, #244]	; (8011604 <low_level_init+0x188>)
 8011510:	493d      	ldr	r1, [pc, #244]	; (8011608 <low_level_init+0x18c>)
 8011512:	4838      	ldr	r0, [pc, #224]	; (80115f4 <low_level_init+0x178>)
 8011514:	f7ef fbfb 	bl	8000d0e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2206      	movs	r2, #6
 801151c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011520:	4b34      	ldr	r3, [pc, #208]	; (80115f4 <low_level_init+0x178>)
 8011522:	695b      	ldr	r3, [r3, #20]
 8011524:	781a      	ldrb	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801152c:	4b31      	ldr	r3, [pc, #196]	; (80115f4 <low_level_init+0x178>)
 801152e:	695b      	ldr	r3, [r3, #20]
 8011530:	785a      	ldrb	r2, [r3, #1]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011538:	4b2e      	ldr	r3, [pc, #184]	; (80115f4 <low_level_init+0x178>)
 801153a:	695b      	ldr	r3, [r3, #20]
 801153c:	789a      	ldrb	r2, [r3, #2]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011544:	4b2b      	ldr	r3, [pc, #172]	; (80115f4 <low_level_init+0x178>)
 8011546:	695b      	ldr	r3, [r3, #20]
 8011548:	78da      	ldrb	r2, [r3, #3]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011550:	4b28      	ldr	r3, [pc, #160]	; (80115f4 <low_level_init+0x178>)
 8011552:	695b      	ldr	r3, [r3, #20]
 8011554:	791a      	ldrb	r2, [r3, #4]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801155c:	4b25      	ldr	r3, [pc, #148]	; (80115f4 <low_level_init+0x178>)
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	795a      	ldrb	r2, [r3, #5]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801156e:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011576:	f043 030a 	orr.w	r3, r3, #10
 801157a:	b2da      	uxtb	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8011582:	2300      	movs	r3, #0
 8011584:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011586:	f107 031c 	add.w	r3, r7, #28
 801158a:	2101      	movs	r1, #1
 801158c:	4618      	mov	r0, r3
 801158e:	f7f1 f8d1 	bl	8002734 <osSemaphoreCreate>
 8011592:	4602      	mov	r2, r0
 8011594:	4b1d      	ldr	r3, [pc, #116]	; (801160c <low_level_init+0x190>)
 8011596:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011598:	4b1d      	ldr	r3, [pc, #116]	; (8011610 <low_level_init+0x194>)
 801159a:	f107 0408 	add.w	r4, r7, #8
 801159e:	461d      	mov	r5, r3
 80115a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80115a4:	682b      	ldr	r3, [r5, #0]
 80115a6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 80115a8:	f107 0308 	add.w	r3, r7, #8
 80115ac:	6879      	ldr	r1, [r7, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7f0 fff5 	bl	800259e <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80115b4:	480f      	ldr	r0, [pc, #60]	; (80115f4 <low_level_init+0x178>)
 80115b6:	f7ef fed2 	bl	800135e <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80115ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80115be:	461a      	mov	r2, r3
 80115c0:	211d      	movs	r1, #29
 80115c2:	480c      	ldr	r0, [pc, #48]	; (80115f4 <low_level_init+0x178>)
 80115c4:	f7ef fdfd 	bl	80011c2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ca:	f043 030b 	orr.w	r3, r3, #11
 80115ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80115d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d2:	461a      	mov	r2, r3
 80115d4:	211d      	movs	r1, #29
 80115d6:	4807      	ldr	r0, [pc, #28]	; (80115f4 <low_level_init+0x178>)
 80115d8:	f7ef fe5b 	bl	8001292 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80115dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80115e0:	461a      	mov	r2, r3
 80115e2:	211d      	movs	r1, #29
 80115e4:	4803      	ldr	r0, [pc, #12]	; (80115f4 <low_level_init+0x178>)
 80115e6:	f7ef fdec 	bl	80011c2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80115ea:	bf00      	nop
 80115ec:	3730      	adds	r7, #48	; 0x30
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bdb0      	pop	{r4, r5, r7, pc}
 80115f2:	bf00      	nop
 80115f4:	20008fec 	.word	0x20008fec
 80115f8:	40028000 	.word	0x40028000
 80115fc:	20009034 	.word	0x20009034
 8011600:	2000771c 	.word	0x2000771c
 8011604:	2000779c 	.word	0x2000779c
 8011608:	20008f6c 	.word	0x20008f6c
 801160c:	20003f88 	.word	0x20003f88
 8011610:	08015c98 	.word	0x08015c98

08011614 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08a      	sub	sp, #40	; 0x28
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801161e:	4b4b      	ldr	r3, [pc, #300]	; (801174c <low_level_output+0x138>)
 8011620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801162a:	2300      	movs	r3, #0
 801162c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8011632:	2300      	movs	r3, #0
 8011634:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8011636:	4b45      	ldr	r3, [pc, #276]	; (801174c <low_level_output+0x138>)
 8011638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801163a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	623b      	str	r3, [r7, #32]
 8011644:	e05a      	b.n	80116fc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	da03      	bge.n	8011656 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801164e:	23f8      	movs	r3, #248	; 0xf8
 8011650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8011654:	e05c      	b.n	8011710 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8011656:	6a3b      	ldr	r3, [r7, #32]
 8011658:	895b      	ldrh	r3, [r3, #10]
 801165a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 801165c:	2300      	movs	r3, #0
 801165e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011660:	e02f      	b.n	80116c2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011662:	69fa      	ldr	r2, [r7, #28]
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	18d0      	adds	r0, r2, r3
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	18d1      	adds	r1, r2, r3
 8011670:	693a      	ldr	r2, [r7, #16]
 8011672:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8011676:	1a9b      	subs	r3, r3, r2
 8011678:	461a      	mov	r2, r3
 801167a:	f000 fcb2 	bl	8011fe2 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	da03      	bge.n	8011694 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801168c:	23f8      	movs	r3, #248	; 0xf8
 801168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011692:	e03d      	b.n	8011710 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801169a:	693a      	ldr	r2, [r7, #16]
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	4413      	add	r3, r2
 80116a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80116a4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	1ad3      	subs	r3, r2, r3
 80116ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80116b0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80116bc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80116be:	2300      	movs	r3, #0
 80116c0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	4413      	add	r3, r2
 80116c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d8c8      	bhi.n	8011662 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80116d0:	69fa      	ldr	r2, [r7, #28]
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	18d0      	adds	r0, r2, r3
 80116d6:	6a3b      	ldr	r3, [r7, #32]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	4413      	add	r3, r2
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	4619      	mov	r1, r3
 80116e2:	f000 fc7e 	bl	8011fe2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80116e6:	693a      	ldr	r2, [r7, #16]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	4413      	add	r3, r2
 80116ec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80116ee:	697a      	ldr	r2, [r7, #20]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	4413      	add	r3, r2
 80116f4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80116f6:	6a3b      	ldr	r3, [r7, #32]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	623b      	str	r3, [r7, #32]
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d1a1      	bne.n	8011646 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8011702:	6979      	ldr	r1, [r7, #20]
 8011704:	4811      	ldr	r0, [pc, #68]	; (801174c <low_level_output+0x138>)
 8011706:	f7ef fb6f 	bl	8000de8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8011710:	4b0e      	ldr	r3, [pc, #56]	; (801174c <low_level_output+0x138>)
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	f241 0314 	movw	r3, #4116	; 0x1014
 8011718:	4413      	add	r3, r2
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f003 0320 	and.w	r3, r3, #32
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00d      	beq.n	8011740 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8011724:	4b09      	ldr	r3, [pc, #36]	; (801174c <low_level_output+0x138>)
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	f241 0314 	movw	r3, #4116	; 0x1014
 801172c:	4413      	add	r3, r2
 801172e:	2220      	movs	r2, #32
 8011730:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8011732:	4b06      	ldr	r3, [pc, #24]	; (801174c <low_level_output+0x138>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	f241 0304 	movw	r3, #4100	; 0x1004
 801173a:	4413      	add	r3, r2
 801173c:	2200      	movs	r2, #0
 801173e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8011740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011744:	4618      	mov	r0, r3
 8011746:	3728      	adds	r7, #40	; 0x28
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	20008fec 	.word	0x20008fec

08011750 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b08c      	sub	sp, #48	; 0x30
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011758:	2300      	movs	r3, #0
 801175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 801176c:	2300      	movs	r3, #0
 801176e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8011770:	2300      	movs	r3, #0
 8011772:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8011774:	484f      	ldr	r0, [pc, #316]	; (80118b4 <low_level_input+0x164>)
 8011776:	f7ef fc21 	bl	8000fbc <HAL_ETH_GetReceivedFrame_IT>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <low_level_input+0x34>
    return NULL;
 8011780:	2300      	movs	r3, #0
 8011782:	e092      	b.n	80118aa <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8011784:	4b4b      	ldr	r3, [pc, #300]	; (80118b4 <low_level_input+0x164>)
 8011786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011788:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801178a:	4b4a      	ldr	r3, [pc, #296]	; (80118b4 <low_level_input+0x164>)
 801178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801178e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8011790:	89fb      	ldrh	r3, [r7, #14]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d007      	beq.n	80117a6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8011796:	89fb      	ldrh	r3, [r7, #14]
 8011798:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801179c:	4619      	mov	r1, r3
 801179e:	2000      	movs	r0, #0
 80117a0:	f7f4 fe48 	bl	8006434 <pbuf_alloc>
 80117a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80117a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d04b      	beq.n	8011844 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80117ac:	4b41      	ldr	r3, [pc, #260]	; (80118b4 <low_level_input+0x164>)
 80117ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80117ba:	e040      	b.n	801183e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	895b      	ldrh	r3, [r3, #10]
 80117c0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80117c2:	2300      	movs	r3, #0
 80117c4:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80117c6:	e021      	b.n	801180c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	18d0      	adds	r0, r2, r3
 80117d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	18d1      	adds	r1, r2, r3
 80117d6:	69fa      	ldr	r2, [r7, #28]
 80117d8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80117dc:	1a9b      	subs	r3, r3, r2
 80117de:	461a      	mov	r2, r3
 80117e0:	f000 fbff 	bl	8011fe2 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80117e4:	6a3b      	ldr	r3, [r7, #32]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80117f0:	69fa      	ldr	r2, [r7, #28]
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	4413      	add	r3, r2
 80117f6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80117fa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011806:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801180c:	697a      	ldr	r2, [r7, #20]
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	4413      	add	r3, r2
 8011812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011816:	4293      	cmp	r3, r2
 8011818:	d8d6      	bhi.n	80117c8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	18d0      	adds	r0, r2, r3
 8011822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	4413      	add	r3, r2
 8011828:	697a      	ldr	r2, [r7, #20]
 801182a:	4619      	mov	r1, r3
 801182c:	f000 fbd9 	bl	8011fe2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8011830:	69fa      	ldr	r2, [r7, #28]
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	4413      	add	r3, r2
 8011836:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8011838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	62bb      	str	r3, [r7, #40]	; 0x28
 801183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1bb      	bne.n	80117bc <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8011844:	4b1b      	ldr	r3, [pc, #108]	; (80118b4 <low_level_input+0x164>)
 8011846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011848:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801184a:	2300      	movs	r3, #0
 801184c:	613b      	str	r3, [r7, #16]
 801184e:	e00b      	b.n	8011868 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8011850:	6a3b      	ldr	r3, [r7, #32]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	3301      	adds	r3, #1
 8011866:	613b      	str	r3, [r7, #16]
 8011868:	4b12      	ldr	r3, [pc, #72]	; (80118b4 <low_level_input+0x164>)
 801186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801186c:	693a      	ldr	r2, [r7, #16]
 801186e:	429a      	cmp	r2, r3
 8011870:	d3ee      	bcc.n	8011850 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8011872:	4b10      	ldr	r3, [pc, #64]	; (80118b4 <low_level_input+0x164>)
 8011874:	2200      	movs	r2, #0
 8011876:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <low_level_input+0x164>)
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	f241 0314 	movw	r3, #4116	; 0x1014
 8011880:	4413      	add	r3, r2
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00d      	beq.n	80118a8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801188c:	4b09      	ldr	r3, [pc, #36]	; (80118b4 <low_level_input+0x164>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	f241 0314 	movw	r3, #4116	; 0x1014
 8011894:	4413      	add	r3, r2
 8011896:	2280      	movs	r2, #128	; 0x80
 8011898:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801189a:	4b06      	ldr	r3, [pc, #24]	; (80118b4 <low_level_input+0x164>)
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	f241 0308 	movw	r3, #4104	; 0x1008
 80118a2:	4413      	add	r3, r2
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80118a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3730      	adds	r7, #48	; 0x30
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	20008fec 	.word	0x20008fec

080118b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <ethernetif_input+0x4c>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7f0 ff4f 	bl	8002770 <osSemaphoreWait>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1f5      	bne.n	80118c4 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f7ff ff39 	bl	8011750 <low_level_input>
 80118de:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00a      	beq.n	80118fc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	691b      	ldr	r3, [r3, #16]
 80118ea:	68f9      	ldr	r1, [r7, #12]
 80118ec:	68b8      	ldr	r0, [r7, #8]
 80118ee:	4798      	blx	r3
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d002      	beq.n	80118fc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80118f6:	68b8      	ldr	r0, [r7, #8]
 80118f8:	f7f5 f87c 	bl	80069f4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1ea      	bne.n	80118d8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8011902:	e7df      	b.n	80118c4 <ethernetif_input+0xc>
 8011904:	20003f88 	.word	0x20003f88

08011908 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d106      	bne.n	8011924 <ethernetif_init+0x1c>
 8011916:	4b0e      	ldr	r3, [pc, #56]	; (8011950 <ethernetif_init+0x48>)
 8011918:	f240 222d 	movw	r2, #557	; 0x22d
 801191c:	490d      	ldr	r1, [pc, #52]	; (8011954 <ethernetif_init+0x4c>)
 801191e:	480e      	ldr	r0, [pc, #56]	; (8011958 <ethernetif_init+0x50>)
 8011920:	f000 fb72 	bl	8012008 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2273      	movs	r2, #115	; 0x73
 8011928:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2274      	movs	r2, #116	; 0x74
 8011930:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a09      	ldr	r2, [pc, #36]	; (801195c <ethernetif_init+0x54>)
 8011938:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4a08      	ldr	r2, [pc, #32]	; (8011960 <ethernetif_init+0x58>)
 801193e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff fd9b 	bl	801147c <low_level_init>

  return ERR_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	08015cac 	.word	0x08015cac
 8011954:	08015cc0 	.word	0x08015cc0
 8011958:	08015cd0 	.word	0x08015cd0
 801195c:	0800f3b5 	.word	0x0800f3b5
 8011960:	08011615 	.word	0x08011615

08011964 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011968:	f7ee fe8c 	bl	8000684 <HAL_GetTick>
 801196c:	4603      	mov	r3, r0
}
 801196e:	4618      	mov	r0, r3
 8011970:	bd80      	pop	{r7, pc}
	...

08011974 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801197a:	2100      	movs	r1, #0
 801197c:	2000      	movs	r0, #0
 801197e:	f7f3 fcb9 	bl	80052f4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8011982:	4b17      	ldr	r3, [pc, #92]	; (80119e0 <MX_LWIP_Init+0x6c>)
 8011984:	2200      	movs	r2, #0
 8011986:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8011988:	4b16      	ldr	r3, [pc, #88]	; (80119e4 <MX_LWIP_Init+0x70>)
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 801198e:	4b16      	ldr	r3, [pc, #88]	; (80119e8 <MX_LWIP_Init+0x74>)
 8011990:	2200      	movs	r2, #0
 8011992:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8011994:	4b15      	ldr	r3, [pc, #84]	; (80119ec <MX_LWIP_Init+0x78>)
 8011996:	9302      	str	r3, [sp, #8]
 8011998:	4b15      	ldr	r3, [pc, #84]	; (80119f0 <MX_LWIP_Init+0x7c>)
 801199a:	9301      	str	r3, [sp, #4]
 801199c:	2300      	movs	r3, #0
 801199e:	9300      	str	r3, [sp, #0]
 80119a0:	4b11      	ldr	r3, [pc, #68]	; (80119e8 <MX_LWIP_Init+0x74>)
 80119a2:	4a10      	ldr	r2, [pc, #64]	; (80119e4 <MX_LWIP_Init+0x70>)
 80119a4:	490e      	ldr	r1, [pc, #56]	; (80119e0 <MX_LWIP_Init+0x6c>)
 80119a6:	4813      	ldr	r0, [pc, #76]	; (80119f4 <MX_LWIP_Init+0x80>)
 80119a8:	f7f4 fa28 	bl	8005dfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80119ac:	4811      	ldr	r0, [pc, #68]	; (80119f4 <MX_LWIP_Init+0x80>)
 80119ae:	f7f4 fbdb 	bl	8006168 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80119b2:	4b10      	ldr	r3, [pc, #64]	; (80119f4 <MX_LWIP_Init+0x80>)
 80119b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119b8:	089b      	lsrs	r3, r3, #2
 80119ba:	f003 0301 	and.w	r3, r3, #1
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d003      	beq.n	80119cc <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80119c4:	480b      	ldr	r0, [pc, #44]	; (80119f4 <MX_LWIP_Init+0x80>)
 80119c6:	f7f4 fbdf 	bl	8006188 <netif_set_up>
 80119ca:	e002      	b.n	80119d2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80119cc:	4809      	ldr	r0, [pc, #36]	; (80119f4 <MX_LWIP_Init+0x80>)
 80119ce:	f7f4 fc47 	bl	8006260 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80119d2:	4808      	ldr	r0, [pc, #32]	; (80119f4 <MX_LWIP_Init+0x80>)
 80119d4:	f7fb fdc6 	bl	800d564 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80119d8:	bf00      	nop
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	2000a838 	.word	0x2000a838
 80119e4:	2000a83c 	.word	0x2000a83c
 80119e8:	2000a840 	.word	0x2000a840
 80119ec:	08005231 	.word	0x08005231
 80119f0:	08011909 	.word	0x08011909
 80119f4:	2000a804 	.word	0x2000a804

080119f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80119f8:	b5b0      	push	{r4, r5, r7, lr}
 80119fa:	b086      	sub	sp, #24
 80119fc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80119fe:	f7ee fdef 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8011a02:	f000 f819 	bl	8011a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8011a06:	f000 f873 	bl	8011af0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8011a0a:	4b09      	ldr	r3, [pc, #36]	; (8011a30 <main+0x38>)
 8011a0c:	1d3c      	adds	r4, r7, #4
 8011a0e:	461d      	mov	r5, r3
 8011a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a14:	682b      	ldr	r3, [r5, #0]
 8011a16:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8011a18:	1d3b      	adds	r3, r7, #4
 8011a1a:	2100      	movs	r1, #0
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f0 fdbe 	bl	800259e <osThreadCreate>
 8011a22:	4602      	mov	r2, r0
 8011a24:	4b03      	ldr	r3, [pc, #12]	; (8011a34 <main+0x3c>)
 8011a26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8011a28:	f7f0 fda2 	bl	8002570 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8011a2c:	e7fe      	b.n	8011a2c <main+0x34>
 8011a2e:	bf00      	nop
 8011a30:	08015d04 	.word	0x08015d04
 8011a34:	2000a844 	.word	0x2000a844

08011a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b094      	sub	sp, #80	; 0x50
 8011a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011a3e:	f107 031c 	add.w	r3, r7, #28
 8011a42:	2234      	movs	r2, #52	; 0x34
 8011a44:	2100      	movs	r1, #0
 8011a46:	4618      	mov	r0, r3
 8011a48:	f000 fad6 	bl	8011ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011a4c:	f107 0308 	add.w	r3, r7, #8
 8011a50:	2200      	movs	r2, #0
 8011a52:	601a      	str	r2, [r3, #0]
 8011a54:	605a      	str	r2, [r3, #4]
 8011a56:	609a      	str	r2, [r3, #8]
 8011a58:	60da      	str	r2, [r3, #12]
 8011a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a5c:	4b22      	ldr	r3, [pc, #136]	; (8011ae8 <SystemClock_Config+0xb0>)
 8011a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a60:	4a21      	ldr	r2, [pc, #132]	; (8011ae8 <SystemClock_Config+0xb0>)
 8011a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a66:	6413      	str	r3, [r2, #64]	; 0x40
 8011a68:	4b1f      	ldr	r3, [pc, #124]	; (8011ae8 <SystemClock_Config+0xb0>)
 8011a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a70:	607b      	str	r3, [r7, #4]
 8011a72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8011a74:	4b1d      	ldr	r3, [pc, #116]	; (8011aec <SystemClock_Config+0xb4>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011a7c:	4a1b      	ldr	r2, [pc, #108]	; (8011aec <SystemClock_Config+0xb4>)
 8011a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	4b19      	ldr	r3, [pc, #100]	; (8011aec <SystemClock_Config+0xb4>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011a8c:	603b      	str	r3, [r7, #0]
 8011a8e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8011a90:	2302      	movs	r3, #2
 8011a92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8011a94:	2301      	movs	r3, #1
 8011a96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8011a98:	2310      	movs	r3, #16
 8011a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011aa0:	f107 031c 	add.w	r3, r7, #28
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7f0 f8fd 	bl	8001ca4 <HAL_RCC_OscConfig>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d001      	beq.n	8011ab4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8011ab0:	f000 f906 	bl	8011cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011ab4:	230f      	movs	r3, #15
 8011ab6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011abc:	2300      	movs	r3, #0
 8011abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ac4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8011aca:	f107 0308 	add.w	r3, r7, #8
 8011ace:	2100      	movs	r1, #0
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7f0 fb59 	bl	8002188 <HAL_RCC_ClockConfig>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d001      	beq.n	8011ae0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8011adc:	f000 f8f0 	bl	8011cc0 <Error_Handler>
  }
}
 8011ae0:	bf00      	nop
 8011ae2:	3750      	adds	r7, #80	; 0x50
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	40023800 	.word	0x40023800
 8011aec:	40007000 	.word	0x40007000

08011af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b08c      	sub	sp, #48	; 0x30
 8011af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011af6:	f107 031c 	add.w	r3, r7, #28
 8011afa:	2200      	movs	r2, #0
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	605a      	str	r2, [r3, #4]
 8011b00:	609a      	str	r2, [r3, #8]
 8011b02:	60da      	str	r2, [r3, #12]
 8011b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b06:	4b5e      	ldr	r3, [pc, #376]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b0a:	4a5d      	ldr	r2, [pc, #372]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b0c:	f043 0304 	orr.w	r3, r3, #4
 8011b10:	6313      	str	r3, [r2, #48]	; 0x30
 8011b12:	4b5b      	ldr	r3, [pc, #364]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b16:	f003 0304 	and.w	r3, r3, #4
 8011b1a:	61bb      	str	r3, [r7, #24]
 8011b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011b1e:	4b58      	ldr	r3, [pc, #352]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b22:	4a57      	ldr	r2, [pc, #348]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b28:	6313      	str	r3, [r2, #48]	; 0x30
 8011b2a:	4b55      	ldr	r3, [pc, #340]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b32:	617b      	str	r3, [r7, #20]
 8011b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b36:	4b52      	ldr	r3, [pc, #328]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b3a:	4a51      	ldr	r2, [pc, #324]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b3c:	f043 0301 	orr.w	r3, r3, #1
 8011b40:	6313      	str	r3, [r2, #48]	; 0x30
 8011b42:	4b4f      	ldr	r3, [pc, #316]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b46:	f003 0301 	and.w	r3, r3, #1
 8011b4a:	613b      	str	r3, [r7, #16]
 8011b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011b4e:	4b4c      	ldr	r3, [pc, #304]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b52:	4a4b      	ldr	r2, [pc, #300]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b54:	f043 0302 	orr.w	r3, r3, #2
 8011b58:	6313      	str	r3, [r2, #48]	; 0x30
 8011b5a:	4b49      	ldr	r3, [pc, #292]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5e:	f003 0302 	and.w	r3, r3, #2
 8011b62:	60fb      	str	r3, [r7, #12]
 8011b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011b66:	4b46      	ldr	r3, [pc, #280]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b6a:	4a45      	ldr	r2, [pc, #276]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b6c:	f043 0308 	orr.w	r3, r3, #8
 8011b70:	6313      	str	r3, [r2, #48]	; 0x30
 8011b72:	4b43      	ldr	r3, [pc, #268]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b76:	f003 0308 	and.w	r3, r3, #8
 8011b7a:	60bb      	str	r3, [r7, #8]
 8011b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011b7e:	4b40      	ldr	r3, [pc, #256]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b82:	4a3f      	ldr	r2, [pc, #252]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b88:	6313      	str	r3, [r2, #48]	; 0x30
 8011b8a:	4b3d      	ldr	r3, [pc, #244]	; (8011c80 <MX_GPIO_Init+0x190>)
 8011b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b92:	607b      	str	r3, [r7, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8011b96:	2200      	movs	r2, #0
 8011b98:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8011b9c:	4839      	ldr	r0, [pc, #228]	; (8011c84 <MX_GPIO_Init+0x194>)
 8011b9e:	f7f0 f84d 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	2140      	movs	r1, #64	; 0x40
 8011ba6:	4838      	ldr	r0, [pc, #224]	; (8011c88 <MX_GPIO_Init+0x198>)
 8011ba8:	f7f0 f848 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8011bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011bb2:	4b36      	ldr	r3, [pc, #216]	; (8011c8c <MX_GPIO_Init+0x19c>)
 8011bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8011bba:	f107 031c 	add.w	r3, r7, #28
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	4833      	ldr	r0, [pc, #204]	; (8011c90 <MX_GPIO_Init+0x1a0>)
 8011bc2:	f7ef fe91 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8011bc6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8011bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011bd8:	f107 031c 	add.w	r3, r7, #28
 8011bdc:	4619      	mov	r1, r3
 8011bde:	4829      	ldr	r0, [pc, #164]	; (8011c84 <MX_GPIO_Init+0x194>)
 8011be0:	f7ef fe82 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8011be4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bea:	2302      	movs	r3, #2
 8011bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bf2:	2303      	movs	r3, #3
 8011bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011bf6:	2307      	movs	r3, #7
 8011bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011bfa:	f107 031c 	add.w	r3, r7, #28
 8011bfe:	4619      	mov	r1, r3
 8011c00:	4824      	ldr	r0, [pc, #144]	; (8011c94 <MX_GPIO_Init+0x1a4>)
 8011c02:	f7ef fe71 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8011c06:	2340      	movs	r3, #64	; 0x40
 8011c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c12:	2300      	movs	r3, #0
 8011c14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8011c16:	f107 031c 	add.w	r3, r7, #28
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	481a      	ldr	r0, [pc, #104]	; (8011c88 <MX_GPIO_Init+0x198>)
 8011c1e:	f7ef fe63 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8011c22:	2380      	movs	r3, #128	; 0x80
 8011c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011c26:	2300      	movs	r3, #0
 8011c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8011c2e:	f107 031c 	add.w	r3, r7, #28
 8011c32:	4619      	mov	r1, r3
 8011c34:	4814      	ldr	r0, [pc, #80]	; (8011c88 <MX_GPIO_Init+0x198>)
 8011c36:	f7ef fe57 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8011c3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8011c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c40:	2302      	movs	r3, #2
 8011c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c44:	2300      	movs	r3, #0
 8011c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c48:	2303      	movs	r3, #3
 8011c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011c4c:	230a      	movs	r3, #10
 8011c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c50:	f107 031c 	add.w	r3, r7, #28
 8011c54:	4619      	mov	r1, r3
 8011c56:	4810      	ldr	r0, [pc, #64]	; (8011c98 <MX_GPIO_Init+0x1a8>)
 8011c58:	f7ef fe46 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8011c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011c62:	2300      	movs	r3, #0
 8011c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c66:	2300      	movs	r3, #0
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011c6a:	f107 031c 	add.w	r3, r7, #28
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4809      	ldr	r0, [pc, #36]	; (8011c98 <MX_GPIO_Init+0x1a8>)
 8011c72:	f7ef fe39 	bl	80018e8 <HAL_GPIO_Init>

}
 8011c76:	bf00      	nop
 8011c78:	3730      	adds	r7, #48	; 0x30
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	40023800 	.word	0x40023800
 8011c84:	40020400 	.word	0x40020400
 8011c88:	40021800 	.word	0x40021800
 8011c8c:	10110000 	.word	0x10110000
 8011c90:	40020800 	.word	0x40020800
 8011c94:	40020c00 	.word	0x40020c00
 8011c98:	40020000 	.word	0x40020000

08011c9c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for LWIP */
  MX_LWIP_Init();
 8011ca4:	f7ff fe66 	bl	8011974 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8011ca8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011cac:	4803      	ldr	r0, [pc, #12]	; (8011cbc <StartDefaultTask+0x20>)
 8011cae:	f7ef ffde 	bl	8001c6e <HAL_GPIO_TogglePin>
	  osDelay(250);
 8011cb2:	20fa      	movs	r0, #250	; 0xfa
 8011cb4:	f7f0 fc9a 	bl	80025ec <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8011cb8:	e7f6      	b.n	8011ca8 <StartDefaultTask+0xc>
 8011cba:	bf00      	nop
 8011cbc:	40020400 	.word	0x40020400

08011cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8011cc4:	bf00      	nop
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
	...

08011cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8011cd6:	4b11      	ldr	r3, [pc, #68]	; (8011d1c <HAL_MspInit+0x4c>)
 8011cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cda:	4a10      	ldr	r2, [pc, #64]	; (8011d1c <HAL_MspInit+0x4c>)
 8011cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8011ce2:	4b0e      	ldr	r3, [pc, #56]	; (8011d1c <HAL_MspInit+0x4c>)
 8011ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cea:	607b      	str	r3, [r7, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011cee:	4b0b      	ldr	r3, [pc, #44]	; (8011d1c <HAL_MspInit+0x4c>)
 8011cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cf2:	4a0a      	ldr	r2, [pc, #40]	; (8011d1c <HAL_MspInit+0x4c>)
 8011cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8011cfa:	4b08      	ldr	r3, [pc, #32]	; (8011d1c <HAL_MspInit+0x4c>)
 8011cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d02:	603b      	str	r3, [r7, #0]
 8011d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011d06:	2200      	movs	r2, #0
 8011d08:	210f      	movs	r1, #15
 8011d0a:	f06f 0001 	mvn.w	r0, #1
 8011d0e:	f7ee fdc2 	bl	8000896 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011d12:	bf00      	nop
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	40023800 	.word	0x40023800

08011d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011d20:	b480      	push	{r7}
 8011d22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011d24:	bf00      	nop
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr

08011d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011d2e:	b480      	push	{r7}
 8011d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011d32:	e7fe      	b.n	8011d32 <HardFault_Handler+0x4>

08011d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011d34:	b480      	push	{r7}
 8011d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011d38:	e7fe      	b.n	8011d38 <MemManage_Handler+0x4>

08011d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011d3a:	b480      	push	{r7}
 8011d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011d3e:	e7fe      	b.n	8011d3e <BusFault_Handler+0x4>

08011d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011d40:	b480      	push	{r7}
 8011d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011d44:	e7fe      	b.n	8011d44 <UsageFault_Handler+0x4>

08011d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011d46:	b480      	push	{r7}
 8011d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011d4a:	bf00      	nop
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr

08011d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011d58:	f7ee fc80 	bl	800065c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8011d5c:	f7f2 fb26 	bl	80043ac <xTaskGetSchedulerState>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d001      	beq.n	8011d6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8011d66:	f7f2 feff 	bl	8004b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011d6a:	bf00      	nop
 8011d6c:	bd80      	pop	{r7, pc}
	...

08011d70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8011d74:	4802      	ldr	r0, [pc, #8]	; (8011d80 <ETH_IRQHandler+0x10>)
 8011d76:	f7ef f9a9 	bl	80010cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8011d7a:	bf00      	nop
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	20008fec 	.word	0x20008fec

08011d84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011d90:	2300      	movs	r3, #0
 8011d92:	617b      	str	r3, [r7, #20]
 8011d94:	e00a      	b.n	8011dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011d96:	f3af 8000 	nop.w
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	1c5a      	adds	r2, r3, #1
 8011da0:	60ba      	str	r2, [r7, #8]
 8011da2:	b2ca      	uxtb	r2, r1
 8011da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	3301      	adds	r3, #1
 8011daa:	617b      	str	r3, [r7, #20]
 8011dac:	697a      	ldr	r2, [r7, #20]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	dbf0      	blt.n	8011d96 <_read+0x12>
	}

return len;
 8011db4:	687b      	ldr	r3, [r7, #4]
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3718      	adds	r7, #24
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b086      	sub	sp, #24
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	60f8      	str	r0, [r7, #12]
 8011dc6:	60b9      	str	r1, [r7, #8]
 8011dc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011dca:	2300      	movs	r3, #0
 8011dcc:	617b      	str	r3, [r7, #20]
 8011dce:	e009      	b.n	8011de4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	1c5a      	adds	r2, r3, #1
 8011dd4:	60ba      	str	r2, [r7, #8]
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	3301      	adds	r3, #1
 8011de2:	617b      	str	r3, [r7, #20]
 8011de4:	697a      	ldr	r2, [r7, #20]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	dbf1      	blt.n	8011dd0 <_write+0x12>
	}
	return len;
 8011dec:	687b      	ldr	r3, [r7, #4]
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3718      	adds	r7, #24
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <_close>:

int _close(int file)
{
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
	return -1;
 8011dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	370c      	adds	r7, #12
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr

08011e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011e0e:	b480      	push	{r7}
 8011e10:	b083      	sub	sp, #12
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
 8011e16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011e1e:	605a      	str	r2, [r3, #4]
	return 0;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <_isatty>:

int _isatty(int file)
{
 8011e2e:	b480      	push	{r7}
 8011e30:	b083      	sub	sp, #12
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]
	return 1;
 8011e36:	2301      	movs	r3, #1
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	370c      	adds	r7, #12
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr

08011e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]
	return 0;
 8011e50:	2300      	movs	r3, #0
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3714      	adds	r7, #20
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
	...

08011e60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011e60:	b480      	push	{r7}
 8011e62:	b085      	sub	sp, #20
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011e68:	4b11      	ldr	r3, [pc, #68]	; (8011eb0 <_sbrk+0x50>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d102      	bne.n	8011e76 <_sbrk+0x16>
		heap_end = &end;
 8011e70:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <_sbrk+0x50>)
 8011e72:	4a10      	ldr	r2, [pc, #64]	; (8011eb4 <_sbrk+0x54>)
 8011e74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011e76:	4b0e      	ldr	r3, [pc, #56]	; (8011eb0 <_sbrk+0x50>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011e7c:	4b0c      	ldr	r3, [pc, #48]	; (8011eb0 <_sbrk+0x50>)
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	4413      	add	r3, r2
 8011e84:	466a      	mov	r2, sp
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d905      	bls.n	8011e96 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8011e8a:	4b0b      	ldr	r3, [pc, #44]	; (8011eb8 <_sbrk+0x58>)
 8011e8c:	220c      	movs	r2, #12
 8011e8e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8011e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e94:	e006      	b.n	8011ea4 <_sbrk+0x44>
	}

	heap_end += incr;
 8011e96:	4b06      	ldr	r3, [pc, #24]	; (8011eb0 <_sbrk+0x50>)
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	4a04      	ldr	r2, [pc, #16]	; (8011eb0 <_sbrk+0x50>)
 8011ea0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3714      	adds	r7, #20
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr
 8011eb0:	20003f8c 	.word	0x20003f8c
 8011eb4:	2000a850 	.word	0x2000a850
 8011eb8:	2000a848 	.word	0x2000a848

08011ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011ec0:	4b15      	ldr	r3, [pc, #84]	; (8011f18 <SystemInit+0x5c>)
 8011ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ec6:	4a14      	ldr	r2, [pc, #80]	; (8011f18 <SystemInit+0x5c>)
 8011ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011ed0:	4b12      	ldr	r3, [pc, #72]	; (8011f1c <SystemInit+0x60>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	4a11      	ldr	r2, [pc, #68]	; (8011f1c <SystemInit+0x60>)
 8011ed6:	f043 0301 	orr.w	r3, r3, #1
 8011eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011edc:	4b0f      	ldr	r3, [pc, #60]	; (8011f1c <SystemInit+0x60>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011ee2:	4b0e      	ldr	r3, [pc, #56]	; (8011f1c <SystemInit+0x60>)
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	490d      	ldr	r1, [pc, #52]	; (8011f1c <SystemInit+0x60>)
 8011ee8:	4b0d      	ldr	r3, [pc, #52]	; (8011f20 <SystemInit+0x64>)
 8011eea:	4013      	ands	r3, r2
 8011eec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011eee:	4b0b      	ldr	r3, [pc, #44]	; (8011f1c <SystemInit+0x60>)
 8011ef0:	4a0c      	ldr	r2, [pc, #48]	; (8011f24 <SystemInit+0x68>)
 8011ef2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011ef4:	4b09      	ldr	r3, [pc, #36]	; (8011f1c <SystemInit+0x60>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	4a08      	ldr	r2, [pc, #32]	; (8011f1c <SystemInit+0x60>)
 8011efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011efe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011f00:	4b06      	ldr	r3, [pc, #24]	; (8011f1c <SystemInit+0x60>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011f06:	4b04      	ldr	r3, [pc, #16]	; (8011f18 <SystemInit+0x5c>)
 8011f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011f0c:	609a      	str	r2, [r3, #8]
#endif
}
 8011f0e:	bf00      	nop
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr
 8011f18:	e000ed00 	.word	0xe000ed00
 8011f1c:	40023800 	.word	0x40023800
 8011f20:	fef6ffff 	.word	0xfef6ffff
 8011f24:	24003010 	.word	0x24003010

08011f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011f2e:	e003      	b.n	8011f38 <LoopCopyDataInit>

08011f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011f30:	4b0c      	ldr	r3, [pc, #48]	; (8011f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011f36:	3104      	adds	r1, #4

08011f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011f38:	480b      	ldr	r0, [pc, #44]	; (8011f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011f3a:	4b0c      	ldr	r3, [pc, #48]	; (8011f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011f40:	d3f6      	bcc.n	8011f30 <CopyDataInit>
  ldr  r2, =_sbss
 8011f42:	4a0b      	ldr	r2, [pc, #44]	; (8011f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011f44:	e002      	b.n	8011f4c <LoopFillZerobss>

08011f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011f48:	f842 3b04 	str.w	r3, [r2], #4

08011f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011f50:	d3f9      	bcc.n	8011f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8011f52:	f7ff ffb3 	bl	8011ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011f56:	f000 f811 	bl	8011f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011f5a:	f7ff fd4d 	bl	80119f8 <main>
  bx  lr    
 8011f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011f60:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8011f64:	08015f0c 	.word	0x08015f0c
  ldr  r0, =_sdata
 8011f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011f6c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8011f70:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8011f74:	2000a84c 	.word	0x2000a84c

08011f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011f78:	e7fe      	b.n	8011f78 <ADC_IRQHandler>
	...

08011f7c <__libc_init_array>:
 8011f7c:	b570      	push	{r4, r5, r6, lr}
 8011f7e:	4e0d      	ldr	r6, [pc, #52]	; (8011fb4 <__libc_init_array+0x38>)
 8011f80:	4c0d      	ldr	r4, [pc, #52]	; (8011fb8 <__libc_init_array+0x3c>)
 8011f82:	1ba4      	subs	r4, r4, r6
 8011f84:	10a4      	asrs	r4, r4, #2
 8011f86:	2500      	movs	r5, #0
 8011f88:	42a5      	cmp	r5, r4
 8011f8a:	d109      	bne.n	8011fa0 <__libc_init_array+0x24>
 8011f8c:	4e0b      	ldr	r6, [pc, #44]	; (8011fbc <__libc_init_array+0x40>)
 8011f8e:	4c0c      	ldr	r4, [pc, #48]	; (8011fc0 <__libc_init_array+0x44>)
 8011f90:	f000 ff5a 	bl	8012e48 <_init>
 8011f94:	1ba4      	subs	r4, r4, r6
 8011f96:	10a4      	asrs	r4, r4, #2
 8011f98:	2500      	movs	r5, #0
 8011f9a:	42a5      	cmp	r5, r4
 8011f9c:	d105      	bne.n	8011faa <__libc_init_array+0x2e>
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}
 8011fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fa4:	4798      	blx	r3
 8011fa6:	3501      	adds	r5, #1
 8011fa8:	e7ee      	b.n	8011f88 <__libc_init_array+0xc>
 8011faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fae:	4798      	blx	r3
 8011fb0:	3501      	adds	r5, #1
 8011fb2:	e7f2      	b.n	8011f9a <__libc_init_array+0x1e>
 8011fb4:	08015f04 	.word	0x08015f04
 8011fb8:	08015f04 	.word	0x08015f04
 8011fbc:	08015f04 	.word	0x08015f04
 8011fc0:	08015f08 	.word	0x08015f08

08011fc4 <memcmp>:
 8011fc4:	b530      	push	{r4, r5, lr}
 8011fc6:	2400      	movs	r4, #0
 8011fc8:	42a2      	cmp	r2, r4
 8011fca:	d101      	bne.n	8011fd0 <memcmp+0xc>
 8011fcc:	2000      	movs	r0, #0
 8011fce:	e007      	b.n	8011fe0 <memcmp+0x1c>
 8011fd0:	5d03      	ldrb	r3, [r0, r4]
 8011fd2:	3401      	adds	r4, #1
 8011fd4:	190d      	adds	r5, r1, r4
 8011fd6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011fda:	42ab      	cmp	r3, r5
 8011fdc:	d0f4      	beq.n	8011fc8 <memcmp+0x4>
 8011fde:	1b58      	subs	r0, r3, r5
 8011fe0:	bd30      	pop	{r4, r5, pc}

08011fe2 <memcpy>:
 8011fe2:	b510      	push	{r4, lr}
 8011fe4:	1e43      	subs	r3, r0, #1
 8011fe6:	440a      	add	r2, r1
 8011fe8:	4291      	cmp	r1, r2
 8011fea:	d100      	bne.n	8011fee <memcpy+0xc>
 8011fec:	bd10      	pop	{r4, pc}
 8011fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ff6:	e7f7      	b.n	8011fe8 <memcpy+0x6>

08011ff8 <memset>:
 8011ff8:	4402      	add	r2, r0
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d100      	bne.n	8012002 <memset+0xa>
 8012000:	4770      	bx	lr
 8012002:	f803 1b01 	strb.w	r1, [r3], #1
 8012006:	e7f9      	b.n	8011ffc <memset+0x4>

08012008 <iprintf>:
 8012008:	b40f      	push	{r0, r1, r2, r3}
 801200a:	4b0a      	ldr	r3, [pc, #40]	; (8012034 <iprintf+0x2c>)
 801200c:	b513      	push	{r0, r1, r4, lr}
 801200e:	681c      	ldr	r4, [r3, #0]
 8012010:	b124      	cbz	r4, 801201c <iprintf+0x14>
 8012012:	69a3      	ldr	r3, [r4, #24]
 8012014:	b913      	cbnz	r3, 801201c <iprintf+0x14>
 8012016:	4620      	mov	r0, r4
 8012018:	f000 f882 	bl	8012120 <__sinit>
 801201c:	ab05      	add	r3, sp, #20
 801201e:	9a04      	ldr	r2, [sp, #16]
 8012020:	68a1      	ldr	r1, [r4, #8]
 8012022:	9301      	str	r3, [sp, #4]
 8012024:	4620      	mov	r0, r4
 8012026:	f000 f9df 	bl	80123e8 <_vfiprintf_r>
 801202a:	b002      	add	sp, #8
 801202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012030:	b004      	add	sp, #16
 8012032:	4770      	bx	lr
 8012034:	20000020 	.word	0x20000020

08012038 <rand>:
 8012038:	b538      	push	{r3, r4, r5, lr}
 801203a:	4b13      	ldr	r3, [pc, #76]	; (8012088 <rand+0x50>)
 801203c:	681c      	ldr	r4, [r3, #0]
 801203e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012040:	b97b      	cbnz	r3, 8012062 <rand+0x2a>
 8012042:	2018      	movs	r0, #24
 8012044:	f000 f8f6 	bl	8012234 <malloc>
 8012048:	4a10      	ldr	r2, [pc, #64]	; (801208c <rand+0x54>)
 801204a:	4b11      	ldr	r3, [pc, #68]	; (8012090 <rand+0x58>)
 801204c:	63a0      	str	r0, [r4, #56]	; 0x38
 801204e:	e9c0 2300 	strd	r2, r3, [r0]
 8012052:	4b10      	ldr	r3, [pc, #64]	; (8012094 <rand+0x5c>)
 8012054:	6083      	str	r3, [r0, #8]
 8012056:	230b      	movs	r3, #11
 8012058:	8183      	strh	r3, [r0, #12]
 801205a:	2201      	movs	r2, #1
 801205c:	2300      	movs	r3, #0
 801205e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012064:	480c      	ldr	r0, [pc, #48]	; (8012098 <rand+0x60>)
 8012066:	690a      	ldr	r2, [r1, #16]
 8012068:	694b      	ldr	r3, [r1, #20]
 801206a:	4c0c      	ldr	r4, [pc, #48]	; (801209c <rand+0x64>)
 801206c:	4350      	muls	r0, r2
 801206e:	fb04 0003 	mla	r0, r4, r3, r0
 8012072:	fba2 2304 	umull	r2, r3, r2, r4
 8012076:	4403      	add	r3, r0
 8012078:	1c54      	adds	r4, r2, #1
 801207a:	f143 0500 	adc.w	r5, r3, #0
 801207e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8012082:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8012086:	bd38      	pop	{r3, r4, r5, pc}
 8012088:	20000020 	.word	0x20000020
 801208c:	abcd330e 	.word	0xabcd330e
 8012090:	e66d1234 	.word	0xe66d1234
 8012094:	0005deec 	.word	0x0005deec
 8012098:	5851f42d 	.word	0x5851f42d
 801209c:	4c957f2d 	.word	0x4c957f2d

080120a0 <std>:
 80120a0:	2300      	movs	r3, #0
 80120a2:	b510      	push	{r4, lr}
 80120a4:	4604      	mov	r4, r0
 80120a6:	e9c0 3300 	strd	r3, r3, [r0]
 80120aa:	6083      	str	r3, [r0, #8]
 80120ac:	8181      	strh	r1, [r0, #12]
 80120ae:	6643      	str	r3, [r0, #100]	; 0x64
 80120b0:	81c2      	strh	r2, [r0, #14]
 80120b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120b6:	6183      	str	r3, [r0, #24]
 80120b8:	4619      	mov	r1, r3
 80120ba:	2208      	movs	r2, #8
 80120bc:	305c      	adds	r0, #92	; 0x5c
 80120be:	f7ff ff9b 	bl	8011ff8 <memset>
 80120c2:	4b05      	ldr	r3, [pc, #20]	; (80120d8 <std+0x38>)
 80120c4:	6263      	str	r3, [r4, #36]	; 0x24
 80120c6:	4b05      	ldr	r3, [pc, #20]	; (80120dc <std+0x3c>)
 80120c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80120ca:	4b05      	ldr	r3, [pc, #20]	; (80120e0 <std+0x40>)
 80120cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120ce:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <std+0x44>)
 80120d0:	6224      	str	r4, [r4, #32]
 80120d2:	6323      	str	r3, [r4, #48]	; 0x30
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	bf00      	nop
 80120d8:	08012945 	.word	0x08012945
 80120dc:	08012967 	.word	0x08012967
 80120e0:	0801299f 	.word	0x0801299f
 80120e4:	080129c3 	.word	0x080129c3

080120e8 <_cleanup_r>:
 80120e8:	4901      	ldr	r1, [pc, #4]	; (80120f0 <_cleanup_r+0x8>)
 80120ea:	f000 b885 	b.w	80121f8 <_fwalk_reent>
 80120ee:	bf00      	nop
 80120f0:	08012c9d 	.word	0x08012c9d

080120f4 <__sfmoreglue>:
 80120f4:	b570      	push	{r4, r5, r6, lr}
 80120f6:	1e4a      	subs	r2, r1, #1
 80120f8:	2568      	movs	r5, #104	; 0x68
 80120fa:	4355      	muls	r5, r2
 80120fc:	460e      	mov	r6, r1
 80120fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012102:	f000 f8ed 	bl	80122e0 <_malloc_r>
 8012106:	4604      	mov	r4, r0
 8012108:	b140      	cbz	r0, 801211c <__sfmoreglue+0x28>
 801210a:	2100      	movs	r1, #0
 801210c:	e9c0 1600 	strd	r1, r6, [r0]
 8012110:	300c      	adds	r0, #12
 8012112:	60a0      	str	r0, [r4, #8]
 8012114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012118:	f7ff ff6e 	bl	8011ff8 <memset>
 801211c:	4620      	mov	r0, r4
 801211e:	bd70      	pop	{r4, r5, r6, pc}

08012120 <__sinit>:
 8012120:	6983      	ldr	r3, [r0, #24]
 8012122:	b510      	push	{r4, lr}
 8012124:	4604      	mov	r4, r0
 8012126:	bb33      	cbnz	r3, 8012176 <__sinit+0x56>
 8012128:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801212c:	6503      	str	r3, [r0, #80]	; 0x50
 801212e:	4b12      	ldr	r3, [pc, #72]	; (8012178 <__sinit+0x58>)
 8012130:	4a12      	ldr	r2, [pc, #72]	; (801217c <__sinit+0x5c>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	6282      	str	r2, [r0, #40]	; 0x28
 8012136:	4298      	cmp	r0, r3
 8012138:	bf04      	itt	eq
 801213a:	2301      	moveq	r3, #1
 801213c:	6183      	streq	r3, [r0, #24]
 801213e:	f000 f81f 	bl	8012180 <__sfp>
 8012142:	6060      	str	r0, [r4, #4]
 8012144:	4620      	mov	r0, r4
 8012146:	f000 f81b 	bl	8012180 <__sfp>
 801214a:	60a0      	str	r0, [r4, #8]
 801214c:	4620      	mov	r0, r4
 801214e:	f000 f817 	bl	8012180 <__sfp>
 8012152:	2200      	movs	r2, #0
 8012154:	60e0      	str	r0, [r4, #12]
 8012156:	2104      	movs	r1, #4
 8012158:	6860      	ldr	r0, [r4, #4]
 801215a:	f7ff ffa1 	bl	80120a0 <std>
 801215e:	2201      	movs	r2, #1
 8012160:	2109      	movs	r1, #9
 8012162:	68a0      	ldr	r0, [r4, #8]
 8012164:	f7ff ff9c 	bl	80120a0 <std>
 8012168:	2202      	movs	r2, #2
 801216a:	2112      	movs	r1, #18
 801216c:	68e0      	ldr	r0, [r4, #12]
 801216e:	f7ff ff97 	bl	80120a0 <std>
 8012172:	2301      	movs	r3, #1
 8012174:	61a3      	str	r3, [r4, #24]
 8012176:	bd10      	pop	{r4, pc}
 8012178:	08015e64 	.word	0x08015e64
 801217c:	080120e9 	.word	0x080120e9

08012180 <__sfp>:
 8012180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012182:	4b1b      	ldr	r3, [pc, #108]	; (80121f0 <__sfp+0x70>)
 8012184:	681e      	ldr	r6, [r3, #0]
 8012186:	69b3      	ldr	r3, [r6, #24]
 8012188:	4607      	mov	r7, r0
 801218a:	b913      	cbnz	r3, 8012192 <__sfp+0x12>
 801218c:	4630      	mov	r0, r6
 801218e:	f7ff ffc7 	bl	8012120 <__sinit>
 8012192:	3648      	adds	r6, #72	; 0x48
 8012194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012198:	3b01      	subs	r3, #1
 801219a:	d503      	bpl.n	80121a4 <__sfp+0x24>
 801219c:	6833      	ldr	r3, [r6, #0]
 801219e:	b133      	cbz	r3, 80121ae <__sfp+0x2e>
 80121a0:	6836      	ldr	r6, [r6, #0]
 80121a2:	e7f7      	b.n	8012194 <__sfp+0x14>
 80121a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80121a8:	b16d      	cbz	r5, 80121c6 <__sfp+0x46>
 80121aa:	3468      	adds	r4, #104	; 0x68
 80121ac:	e7f4      	b.n	8012198 <__sfp+0x18>
 80121ae:	2104      	movs	r1, #4
 80121b0:	4638      	mov	r0, r7
 80121b2:	f7ff ff9f 	bl	80120f4 <__sfmoreglue>
 80121b6:	6030      	str	r0, [r6, #0]
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d1f1      	bne.n	80121a0 <__sfp+0x20>
 80121bc:	230c      	movs	r3, #12
 80121be:	603b      	str	r3, [r7, #0]
 80121c0:	4604      	mov	r4, r0
 80121c2:	4620      	mov	r0, r4
 80121c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c6:	4b0b      	ldr	r3, [pc, #44]	; (80121f4 <__sfp+0x74>)
 80121c8:	6665      	str	r5, [r4, #100]	; 0x64
 80121ca:	e9c4 5500 	strd	r5, r5, [r4]
 80121ce:	60a5      	str	r5, [r4, #8]
 80121d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80121d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80121d8:	2208      	movs	r2, #8
 80121da:	4629      	mov	r1, r5
 80121dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80121e0:	f7ff ff0a 	bl	8011ff8 <memset>
 80121e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80121e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80121ec:	e7e9      	b.n	80121c2 <__sfp+0x42>
 80121ee:	bf00      	nop
 80121f0:	08015e64 	.word	0x08015e64
 80121f4:	ffff0001 	.word	0xffff0001

080121f8 <_fwalk_reent>:
 80121f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121fc:	4680      	mov	r8, r0
 80121fe:	4689      	mov	r9, r1
 8012200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012204:	2600      	movs	r6, #0
 8012206:	b914      	cbnz	r4, 801220e <_fwalk_reent+0x16>
 8012208:	4630      	mov	r0, r6
 801220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801220e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012212:	3f01      	subs	r7, #1
 8012214:	d501      	bpl.n	801221a <_fwalk_reent+0x22>
 8012216:	6824      	ldr	r4, [r4, #0]
 8012218:	e7f5      	b.n	8012206 <_fwalk_reent+0xe>
 801221a:	89ab      	ldrh	r3, [r5, #12]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d907      	bls.n	8012230 <_fwalk_reent+0x38>
 8012220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012224:	3301      	adds	r3, #1
 8012226:	d003      	beq.n	8012230 <_fwalk_reent+0x38>
 8012228:	4629      	mov	r1, r5
 801222a:	4640      	mov	r0, r8
 801222c:	47c8      	blx	r9
 801222e:	4306      	orrs	r6, r0
 8012230:	3568      	adds	r5, #104	; 0x68
 8012232:	e7ee      	b.n	8012212 <_fwalk_reent+0x1a>

08012234 <malloc>:
 8012234:	4b02      	ldr	r3, [pc, #8]	; (8012240 <malloc+0xc>)
 8012236:	4601      	mov	r1, r0
 8012238:	6818      	ldr	r0, [r3, #0]
 801223a:	f000 b851 	b.w	80122e0 <_malloc_r>
 801223e:	bf00      	nop
 8012240:	20000020 	.word	0x20000020

08012244 <_free_r>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	4605      	mov	r5, r0
 8012248:	2900      	cmp	r1, #0
 801224a:	d045      	beq.n	80122d8 <_free_r+0x94>
 801224c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012250:	1f0c      	subs	r4, r1, #4
 8012252:	2b00      	cmp	r3, #0
 8012254:	bfb8      	it	lt
 8012256:	18e4      	addlt	r4, r4, r3
 8012258:	f000 fdc0 	bl	8012ddc <__malloc_lock>
 801225c:	4a1f      	ldr	r2, [pc, #124]	; (80122dc <_free_r+0x98>)
 801225e:	6813      	ldr	r3, [r2, #0]
 8012260:	4610      	mov	r0, r2
 8012262:	b933      	cbnz	r3, 8012272 <_free_r+0x2e>
 8012264:	6063      	str	r3, [r4, #4]
 8012266:	6014      	str	r4, [r2, #0]
 8012268:	4628      	mov	r0, r5
 801226a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801226e:	f000 bdb6 	b.w	8012dde <__malloc_unlock>
 8012272:	42a3      	cmp	r3, r4
 8012274:	d90c      	bls.n	8012290 <_free_r+0x4c>
 8012276:	6821      	ldr	r1, [r4, #0]
 8012278:	1862      	adds	r2, r4, r1
 801227a:	4293      	cmp	r3, r2
 801227c:	bf04      	itt	eq
 801227e:	681a      	ldreq	r2, [r3, #0]
 8012280:	685b      	ldreq	r3, [r3, #4]
 8012282:	6063      	str	r3, [r4, #4]
 8012284:	bf04      	itt	eq
 8012286:	1852      	addeq	r2, r2, r1
 8012288:	6022      	streq	r2, [r4, #0]
 801228a:	6004      	str	r4, [r0, #0]
 801228c:	e7ec      	b.n	8012268 <_free_r+0x24>
 801228e:	4613      	mov	r3, r2
 8012290:	685a      	ldr	r2, [r3, #4]
 8012292:	b10a      	cbz	r2, 8012298 <_free_r+0x54>
 8012294:	42a2      	cmp	r2, r4
 8012296:	d9fa      	bls.n	801228e <_free_r+0x4a>
 8012298:	6819      	ldr	r1, [r3, #0]
 801229a:	1858      	adds	r0, r3, r1
 801229c:	42a0      	cmp	r0, r4
 801229e:	d10b      	bne.n	80122b8 <_free_r+0x74>
 80122a0:	6820      	ldr	r0, [r4, #0]
 80122a2:	4401      	add	r1, r0
 80122a4:	1858      	adds	r0, r3, r1
 80122a6:	4282      	cmp	r2, r0
 80122a8:	6019      	str	r1, [r3, #0]
 80122aa:	d1dd      	bne.n	8012268 <_free_r+0x24>
 80122ac:	6810      	ldr	r0, [r2, #0]
 80122ae:	6852      	ldr	r2, [r2, #4]
 80122b0:	605a      	str	r2, [r3, #4]
 80122b2:	4401      	add	r1, r0
 80122b4:	6019      	str	r1, [r3, #0]
 80122b6:	e7d7      	b.n	8012268 <_free_r+0x24>
 80122b8:	d902      	bls.n	80122c0 <_free_r+0x7c>
 80122ba:	230c      	movs	r3, #12
 80122bc:	602b      	str	r3, [r5, #0]
 80122be:	e7d3      	b.n	8012268 <_free_r+0x24>
 80122c0:	6820      	ldr	r0, [r4, #0]
 80122c2:	1821      	adds	r1, r4, r0
 80122c4:	428a      	cmp	r2, r1
 80122c6:	bf04      	itt	eq
 80122c8:	6811      	ldreq	r1, [r2, #0]
 80122ca:	6852      	ldreq	r2, [r2, #4]
 80122cc:	6062      	str	r2, [r4, #4]
 80122ce:	bf04      	itt	eq
 80122d0:	1809      	addeq	r1, r1, r0
 80122d2:	6021      	streq	r1, [r4, #0]
 80122d4:	605c      	str	r4, [r3, #4]
 80122d6:	e7c7      	b.n	8012268 <_free_r+0x24>
 80122d8:	bd38      	pop	{r3, r4, r5, pc}
 80122da:	bf00      	nop
 80122dc:	20003f90 	.word	0x20003f90

080122e0 <_malloc_r>:
 80122e0:	b570      	push	{r4, r5, r6, lr}
 80122e2:	1ccd      	adds	r5, r1, #3
 80122e4:	f025 0503 	bic.w	r5, r5, #3
 80122e8:	3508      	adds	r5, #8
 80122ea:	2d0c      	cmp	r5, #12
 80122ec:	bf38      	it	cc
 80122ee:	250c      	movcc	r5, #12
 80122f0:	2d00      	cmp	r5, #0
 80122f2:	4606      	mov	r6, r0
 80122f4:	db01      	blt.n	80122fa <_malloc_r+0x1a>
 80122f6:	42a9      	cmp	r1, r5
 80122f8:	d903      	bls.n	8012302 <_malloc_r+0x22>
 80122fa:	230c      	movs	r3, #12
 80122fc:	6033      	str	r3, [r6, #0]
 80122fe:	2000      	movs	r0, #0
 8012300:	bd70      	pop	{r4, r5, r6, pc}
 8012302:	f000 fd6b 	bl	8012ddc <__malloc_lock>
 8012306:	4a21      	ldr	r2, [pc, #132]	; (801238c <_malloc_r+0xac>)
 8012308:	6814      	ldr	r4, [r2, #0]
 801230a:	4621      	mov	r1, r4
 801230c:	b991      	cbnz	r1, 8012334 <_malloc_r+0x54>
 801230e:	4c20      	ldr	r4, [pc, #128]	; (8012390 <_malloc_r+0xb0>)
 8012310:	6823      	ldr	r3, [r4, #0]
 8012312:	b91b      	cbnz	r3, 801231c <_malloc_r+0x3c>
 8012314:	4630      	mov	r0, r6
 8012316:	f000 fb05 	bl	8012924 <_sbrk_r>
 801231a:	6020      	str	r0, [r4, #0]
 801231c:	4629      	mov	r1, r5
 801231e:	4630      	mov	r0, r6
 8012320:	f000 fb00 	bl	8012924 <_sbrk_r>
 8012324:	1c43      	adds	r3, r0, #1
 8012326:	d124      	bne.n	8012372 <_malloc_r+0x92>
 8012328:	230c      	movs	r3, #12
 801232a:	6033      	str	r3, [r6, #0]
 801232c:	4630      	mov	r0, r6
 801232e:	f000 fd56 	bl	8012dde <__malloc_unlock>
 8012332:	e7e4      	b.n	80122fe <_malloc_r+0x1e>
 8012334:	680b      	ldr	r3, [r1, #0]
 8012336:	1b5b      	subs	r3, r3, r5
 8012338:	d418      	bmi.n	801236c <_malloc_r+0x8c>
 801233a:	2b0b      	cmp	r3, #11
 801233c:	d90f      	bls.n	801235e <_malloc_r+0x7e>
 801233e:	600b      	str	r3, [r1, #0]
 8012340:	50cd      	str	r5, [r1, r3]
 8012342:	18cc      	adds	r4, r1, r3
 8012344:	4630      	mov	r0, r6
 8012346:	f000 fd4a 	bl	8012dde <__malloc_unlock>
 801234a:	f104 000b 	add.w	r0, r4, #11
 801234e:	1d23      	adds	r3, r4, #4
 8012350:	f020 0007 	bic.w	r0, r0, #7
 8012354:	1ac3      	subs	r3, r0, r3
 8012356:	d0d3      	beq.n	8012300 <_malloc_r+0x20>
 8012358:	425a      	negs	r2, r3
 801235a:	50e2      	str	r2, [r4, r3]
 801235c:	e7d0      	b.n	8012300 <_malloc_r+0x20>
 801235e:	428c      	cmp	r4, r1
 8012360:	684b      	ldr	r3, [r1, #4]
 8012362:	bf16      	itet	ne
 8012364:	6063      	strne	r3, [r4, #4]
 8012366:	6013      	streq	r3, [r2, #0]
 8012368:	460c      	movne	r4, r1
 801236a:	e7eb      	b.n	8012344 <_malloc_r+0x64>
 801236c:	460c      	mov	r4, r1
 801236e:	6849      	ldr	r1, [r1, #4]
 8012370:	e7cc      	b.n	801230c <_malloc_r+0x2c>
 8012372:	1cc4      	adds	r4, r0, #3
 8012374:	f024 0403 	bic.w	r4, r4, #3
 8012378:	42a0      	cmp	r0, r4
 801237a:	d005      	beq.n	8012388 <_malloc_r+0xa8>
 801237c:	1a21      	subs	r1, r4, r0
 801237e:	4630      	mov	r0, r6
 8012380:	f000 fad0 	bl	8012924 <_sbrk_r>
 8012384:	3001      	adds	r0, #1
 8012386:	d0cf      	beq.n	8012328 <_malloc_r+0x48>
 8012388:	6025      	str	r5, [r4, #0]
 801238a:	e7db      	b.n	8012344 <_malloc_r+0x64>
 801238c:	20003f90 	.word	0x20003f90
 8012390:	20003f94 	.word	0x20003f94

08012394 <__sfputc_r>:
 8012394:	6893      	ldr	r3, [r2, #8]
 8012396:	3b01      	subs	r3, #1
 8012398:	2b00      	cmp	r3, #0
 801239a:	b410      	push	{r4}
 801239c:	6093      	str	r3, [r2, #8]
 801239e:	da08      	bge.n	80123b2 <__sfputc_r+0x1e>
 80123a0:	6994      	ldr	r4, [r2, #24]
 80123a2:	42a3      	cmp	r3, r4
 80123a4:	db01      	blt.n	80123aa <__sfputc_r+0x16>
 80123a6:	290a      	cmp	r1, #10
 80123a8:	d103      	bne.n	80123b2 <__sfputc_r+0x1e>
 80123aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123ae:	f000 bb0d 	b.w	80129cc <__swbuf_r>
 80123b2:	6813      	ldr	r3, [r2, #0]
 80123b4:	1c58      	adds	r0, r3, #1
 80123b6:	6010      	str	r0, [r2, #0]
 80123b8:	7019      	strb	r1, [r3, #0]
 80123ba:	4608      	mov	r0, r1
 80123bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <__sfputs_r>:
 80123c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c4:	4606      	mov	r6, r0
 80123c6:	460f      	mov	r7, r1
 80123c8:	4614      	mov	r4, r2
 80123ca:	18d5      	adds	r5, r2, r3
 80123cc:	42ac      	cmp	r4, r5
 80123ce:	d101      	bne.n	80123d4 <__sfputs_r+0x12>
 80123d0:	2000      	movs	r0, #0
 80123d2:	e007      	b.n	80123e4 <__sfputs_r+0x22>
 80123d4:	463a      	mov	r2, r7
 80123d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123da:	4630      	mov	r0, r6
 80123dc:	f7ff ffda 	bl	8012394 <__sfputc_r>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	d1f3      	bne.n	80123cc <__sfputs_r+0xa>
 80123e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080123e8 <_vfiprintf_r>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	460c      	mov	r4, r1
 80123ee:	b09d      	sub	sp, #116	; 0x74
 80123f0:	4617      	mov	r7, r2
 80123f2:	461d      	mov	r5, r3
 80123f4:	4606      	mov	r6, r0
 80123f6:	b118      	cbz	r0, 8012400 <_vfiprintf_r+0x18>
 80123f8:	6983      	ldr	r3, [r0, #24]
 80123fa:	b90b      	cbnz	r3, 8012400 <_vfiprintf_r+0x18>
 80123fc:	f7ff fe90 	bl	8012120 <__sinit>
 8012400:	4b7c      	ldr	r3, [pc, #496]	; (80125f4 <_vfiprintf_r+0x20c>)
 8012402:	429c      	cmp	r4, r3
 8012404:	d158      	bne.n	80124b8 <_vfiprintf_r+0xd0>
 8012406:	6874      	ldr	r4, [r6, #4]
 8012408:	89a3      	ldrh	r3, [r4, #12]
 801240a:	0718      	lsls	r0, r3, #28
 801240c:	d55e      	bpl.n	80124cc <_vfiprintf_r+0xe4>
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d05b      	beq.n	80124cc <_vfiprintf_r+0xe4>
 8012414:	2300      	movs	r3, #0
 8012416:	9309      	str	r3, [sp, #36]	; 0x24
 8012418:	2320      	movs	r3, #32
 801241a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801241e:	2330      	movs	r3, #48	; 0x30
 8012420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012424:	9503      	str	r5, [sp, #12]
 8012426:	f04f 0b01 	mov.w	fp, #1
 801242a:	46b8      	mov	r8, r7
 801242c:	4645      	mov	r5, r8
 801242e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012432:	b10b      	cbz	r3, 8012438 <_vfiprintf_r+0x50>
 8012434:	2b25      	cmp	r3, #37	; 0x25
 8012436:	d154      	bne.n	80124e2 <_vfiprintf_r+0xfa>
 8012438:	ebb8 0a07 	subs.w	sl, r8, r7
 801243c:	d00b      	beq.n	8012456 <_vfiprintf_r+0x6e>
 801243e:	4653      	mov	r3, sl
 8012440:	463a      	mov	r2, r7
 8012442:	4621      	mov	r1, r4
 8012444:	4630      	mov	r0, r6
 8012446:	f7ff ffbc 	bl	80123c2 <__sfputs_r>
 801244a:	3001      	adds	r0, #1
 801244c:	f000 80c2 	beq.w	80125d4 <_vfiprintf_r+0x1ec>
 8012450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012452:	4453      	add	r3, sl
 8012454:	9309      	str	r3, [sp, #36]	; 0x24
 8012456:	f898 3000 	ldrb.w	r3, [r8]
 801245a:	2b00      	cmp	r3, #0
 801245c:	f000 80ba 	beq.w	80125d4 <_vfiprintf_r+0x1ec>
 8012460:	2300      	movs	r3, #0
 8012462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801246a:	9304      	str	r3, [sp, #16]
 801246c:	9307      	str	r3, [sp, #28]
 801246e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012472:	931a      	str	r3, [sp, #104]	; 0x68
 8012474:	46a8      	mov	r8, r5
 8012476:	2205      	movs	r2, #5
 8012478:	f818 1b01 	ldrb.w	r1, [r8], #1
 801247c:	485e      	ldr	r0, [pc, #376]	; (80125f8 <_vfiprintf_r+0x210>)
 801247e:	f7ed fedf 	bl	8000240 <memchr>
 8012482:	9b04      	ldr	r3, [sp, #16]
 8012484:	bb78      	cbnz	r0, 80124e6 <_vfiprintf_r+0xfe>
 8012486:	06d9      	lsls	r1, r3, #27
 8012488:	bf44      	itt	mi
 801248a:	2220      	movmi	r2, #32
 801248c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012490:	071a      	lsls	r2, r3, #28
 8012492:	bf44      	itt	mi
 8012494:	222b      	movmi	r2, #43	; 0x2b
 8012496:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801249a:	782a      	ldrb	r2, [r5, #0]
 801249c:	2a2a      	cmp	r2, #42	; 0x2a
 801249e:	d02a      	beq.n	80124f6 <_vfiprintf_r+0x10e>
 80124a0:	9a07      	ldr	r2, [sp, #28]
 80124a2:	46a8      	mov	r8, r5
 80124a4:	2000      	movs	r0, #0
 80124a6:	250a      	movs	r5, #10
 80124a8:	4641      	mov	r1, r8
 80124aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124ae:	3b30      	subs	r3, #48	; 0x30
 80124b0:	2b09      	cmp	r3, #9
 80124b2:	d969      	bls.n	8012588 <_vfiprintf_r+0x1a0>
 80124b4:	b360      	cbz	r0, 8012510 <_vfiprintf_r+0x128>
 80124b6:	e024      	b.n	8012502 <_vfiprintf_r+0x11a>
 80124b8:	4b50      	ldr	r3, [pc, #320]	; (80125fc <_vfiprintf_r+0x214>)
 80124ba:	429c      	cmp	r4, r3
 80124bc:	d101      	bne.n	80124c2 <_vfiprintf_r+0xda>
 80124be:	68b4      	ldr	r4, [r6, #8]
 80124c0:	e7a2      	b.n	8012408 <_vfiprintf_r+0x20>
 80124c2:	4b4f      	ldr	r3, [pc, #316]	; (8012600 <_vfiprintf_r+0x218>)
 80124c4:	429c      	cmp	r4, r3
 80124c6:	bf08      	it	eq
 80124c8:	68f4      	ldreq	r4, [r6, #12]
 80124ca:	e79d      	b.n	8012408 <_vfiprintf_r+0x20>
 80124cc:	4621      	mov	r1, r4
 80124ce:	4630      	mov	r0, r6
 80124d0:	f000 fae0 	bl	8012a94 <__swsetup_r>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d09d      	beq.n	8012414 <_vfiprintf_r+0x2c>
 80124d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124dc:	b01d      	add	sp, #116	; 0x74
 80124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e2:	46a8      	mov	r8, r5
 80124e4:	e7a2      	b.n	801242c <_vfiprintf_r+0x44>
 80124e6:	4a44      	ldr	r2, [pc, #272]	; (80125f8 <_vfiprintf_r+0x210>)
 80124e8:	1a80      	subs	r0, r0, r2
 80124ea:	fa0b f000 	lsl.w	r0, fp, r0
 80124ee:	4318      	orrs	r0, r3
 80124f0:	9004      	str	r0, [sp, #16]
 80124f2:	4645      	mov	r5, r8
 80124f4:	e7be      	b.n	8012474 <_vfiprintf_r+0x8c>
 80124f6:	9a03      	ldr	r2, [sp, #12]
 80124f8:	1d11      	adds	r1, r2, #4
 80124fa:	6812      	ldr	r2, [r2, #0]
 80124fc:	9103      	str	r1, [sp, #12]
 80124fe:	2a00      	cmp	r2, #0
 8012500:	db01      	blt.n	8012506 <_vfiprintf_r+0x11e>
 8012502:	9207      	str	r2, [sp, #28]
 8012504:	e004      	b.n	8012510 <_vfiprintf_r+0x128>
 8012506:	4252      	negs	r2, r2
 8012508:	f043 0302 	orr.w	r3, r3, #2
 801250c:	9207      	str	r2, [sp, #28]
 801250e:	9304      	str	r3, [sp, #16]
 8012510:	f898 3000 	ldrb.w	r3, [r8]
 8012514:	2b2e      	cmp	r3, #46	; 0x2e
 8012516:	d10e      	bne.n	8012536 <_vfiprintf_r+0x14e>
 8012518:	f898 3001 	ldrb.w	r3, [r8, #1]
 801251c:	2b2a      	cmp	r3, #42	; 0x2a
 801251e:	d138      	bne.n	8012592 <_vfiprintf_r+0x1aa>
 8012520:	9b03      	ldr	r3, [sp, #12]
 8012522:	1d1a      	adds	r2, r3, #4
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	9203      	str	r2, [sp, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	bfb8      	it	lt
 801252c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012530:	f108 0802 	add.w	r8, r8, #2
 8012534:	9305      	str	r3, [sp, #20]
 8012536:	4d33      	ldr	r5, [pc, #204]	; (8012604 <_vfiprintf_r+0x21c>)
 8012538:	f898 1000 	ldrb.w	r1, [r8]
 801253c:	2203      	movs	r2, #3
 801253e:	4628      	mov	r0, r5
 8012540:	f7ed fe7e 	bl	8000240 <memchr>
 8012544:	b140      	cbz	r0, 8012558 <_vfiprintf_r+0x170>
 8012546:	2340      	movs	r3, #64	; 0x40
 8012548:	1b40      	subs	r0, r0, r5
 801254a:	fa03 f000 	lsl.w	r0, r3, r0
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	4303      	orrs	r3, r0
 8012552:	f108 0801 	add.w	r8, r8, #1
 8012556:	9304      	str	r3, [sp, #16]
 8012558:	f898 1000 	ldrb.w	r1, [r8]
 801255c:	482a      	ldr	r0, [pc, #168]	; (8012608 <_vfiprintf_r+0x220>)
 801255e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012562:	2206      	movs	r2, #6
 8012564:	f108 0701 	add.w	r7, r8, #1
 8012568:	f7ed fe6a 	bl	8000240 <memchr>
 801256c:	2800      	cmp	r0, #0
 801256e:	d037      	beq.n	80125e0 <_vfiprintf_r+0x1f8>
 8012570:	4b26      	ldr	r3, [pc, #152]	; (801260c <_vfiprintf_r+0x224>)
 8012572:	bb1b      	cbnz	r3, 80125bc <_vfiprintf_r+0x1d4>
 8012574:	9b03      	ldr	r3, [sp, #12]
 8012576:	3307      	adds	r3, #7
 8012578:	f023 0307 	bic.w	r3, r3, #7
 801257c:	3308      	adds	r3, #8
 801257e:	9303      	str	r3, [sp, #12]
 8012580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012582:	444b      	add	r3, r9
 8012584:	9309      	str	r3, [sp, #36]	; 0x24
 8012586:	e750      	b.n	801242a <_vfiprintf_r+0x42>
 8012588:	fb05 3202 	mla	r2, r5, r2, r3
 801258c:	2001      	movs	r0, #1
 801258e:	4688      	mov	r8, r1
 8012590:	e78a      	b.n	80124a8 <_vfiprintf_r+0xc0>
 8012592:	2300      	movs	r3, #0
 8012594:	f108 0801 	add.w	r8, r8, #1
 8012598:	9305      	str	r3, [sp, #20]
 801259a:	4619      	mov	r1, r3
 801259c:	250a      	movs	r5, #10
 801259e:	4640      	mov	r0, r8
 80125a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125a4:	3a30      	subs	r2, #48	; 0x30
 80125a6:	2a09      	cmp	r2, #9
 80125a8:	d903      	bls.n	80125b2 <_vfiprintf_r+0x1ca>
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d0c3      	beq.n	8012536 <_vfiprintf_r+0x14e>
 80125ae:	9105      	str	r1, [sp, #20]
 80125b0:	e7c1      	b.n	8012536 <_vfiprintf_r+0x14e>
 80125b2:	fb05 2101 	mla	r1, r5, r1, r2
 80125b6:	2301      	movs	r3, #1
 80125b8:	4680      	mov	r8, r0
 80125ba:	e7f0      	b.n	801259e <_vfiprintf_r+0x1b6>
 80125bc:	ab03      	add	r3, sp, #12
 80125be:	9300      	str	r3, [sp, #0]
 80125c0:	4622      	mov	r2, r4
 80125c2:	4b13      	ldr	r3, [pc, #76]	; (8012610 <_vfiprintf_r+0x228>)
 80125c4:	a904      	add	r1, sp, #16
 80125c6:	4630      	mov	r0, r6
 80125c8:	f3af 8000 	nop.w
 80125cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80125d0:	4681      	mov	r9, r0
 80125d2:	d1d5      	bne.n	8012580 <_vfiprintf_r+0x198>
 80125d4:	89a3      	ldrh	r3, [r4, #12]
 80125d6:	065b      	lsls	r3, r3, #25
 80125d8:	f53f af7e 	bmi.w	80124d8 <_vfiprintf_r+0xf0>
 80125dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125de:	e77d      	b.n	80124dc <_vfiprintf_r+0xf4>
 80125e0:	ab03      	add	r3, sp, #12
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	4622      	mov	r2, r4
 80125e6:	4b0a      	ldr	r3, [pc, #40]	; (8012610 <_vfiprintf_r+0x228>)
 80125e8:	a904      	add	r1, sp, #16
 80125ea:	4630      	mov	r0, r6
 80125ec:	f000 f888 	bl	8012700 <_printf_i>
 80125f0:	e7ec      	b.n	80125cc <_vfiprintf_r+0x1e4>
 80125f2:	bf00      	nop
 80125f4:	08015e88 	.word	0x08015e88
 80125f8:	08015ec8 	.word	0x08015ec8
 80125fc:	08015ea8 	.word	0x08015ea8
 8012600:	08015e68 	.word	0x08015e68
 8012604:	08015ece 	.word	0x08015ece
 8012608:	08015ed2 	.word	0x08015ed2
 801260c:	00000000 	.word	0x00000000
 8012610:	080123c3 	.word	0x080123c3

08012614 <_printf_common>:
 8012614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012618:	4691      	mov	r9, r2
 801261a:	461f      	mov	r7, r3
 801261c:	688a      	ldr	r2, [r1, #8]
 801261e:	690b      	ldr	r3, [r1, #16]
 8012620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012624:	4293      	cmp	r3, r2
 8012626:	bfb8      	it	lt
 8012628:	4613      	movlt	r3, r2
 801262a:	f8c9 3000 	str.w	r3, [r9]
 801262e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012632:	4606      	mov	r6, r0
 8012634:	460c      	mov	r4, r1
 8012636:	b112      	cbz	r2, 801263e <_printf_common+0x2a>
 8012638:	3301      	adds	r3, #1
 801263a:	f8c9 3000 	str.w	r3, [r9]
 801263e:	6823      	ldr	r3, [r4, #0]
 8012640:	0699      	lsls	r1, r3, #26
 8012642:	bf42      	ittt	mi
 8012644:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012648:	3302      	addmi	r3, #2
 801264a:	f8c9 3000 	strmi.w	r3, [r9]
 801264e:	6825      	ldr	r5, [r4, #0]
 8012650:	f015 0506 	ands.w	r5, r5, #6
 8012654:	d107      	bne.n	8012666 <_printf_common+0x52>
 8012656:	f104 0a19 	add.w	sl, r4, #25
 801265a:	68e3      	ldr	r3, [r4, #12]
 801265c:	f8d9 2000 	ldr.w	r2, [r9]
 8012660:	1a9b      	subs	r3, r3, r2
 8012662:	42ab      	cmp	r3, r5
 8012664:	dc28      	bgt.n	80126b8 <_printf_common+0xa4>
 8012666:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801266a:	6822      	ldr	r2, [r4, #0]
 801266c:	3300      	adds	r3, #0
 801266e:	bf18      	it	ne
 8012670:	2301      	movne	r3, #1
 8012672:	0692      	lsls	r2, r2, #26
 8012674:	d42d      	bmi.n	80126d2 <_printf_common+0xbe>
 8012676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801267a:	4639      	mov	r1, r7
 801267c:	4630      	mov	r0, r6
 801267e:	47c0      	blx	r8
 8012680:	3001      	adds	r0, #1
 8012682:	d020      	beq.n	80126c6 <_printf_common+0xb2>
 8012684:	6823      	ldr	r3, [r4, #0]
 8012686:	68e5      	ldr	r5, [r4, #12]
 8012688:	f8d9 2000 	ldr.w	r2, [r9]
 801268c:	f003 0306 	and.w	r3, r3, #6
 8012690:	2b04      	cmp	r3, #4
 8012692:	bf08      	it	eq
 8012694:	1aad      	subeq	r5, r5, r2
 8012696:	68a3      	ldr	r3, [r4, #8]
 8012698:	6922      	ldr	r2, [r4, #16]
 801269a:	bf0c      	ite	eq
 801269c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80126a0:	2500      	movne	r5, #0
 80126a2:	4293      	cmp	r3, r2
 80126a4:	bfc4      	itt	gt
 80126a6:	1a9b      	subgt	r3, r3, r2
 80126a8:	18ed      	addgt	r5, r5, r3
 80126aa:	f04f 0900 	mov.w	r9, #0
 80126ae:	341a      	adds	r4, #26
 80126b0:	454d      	cmp	r5, r9
 80126b2:	d11a      	bne.n	80126ea <_printf_common+0xd6>
 80126b4:	2000      	movs	r0, #0
 80126b6:	e008      	b.n	80126ca <_printf_common+0xb6>
 80126b8:	2301      	movs	r3, #1
 80126ba:	4652      	mov	r2, sl
 80126bc:	4639      	mov	r1, r7
 80126be:	4630      	mov	r0, r6
 80126c0:	47c0      	blx	r8
 80126c2:	3001      	adds	r0, #1
 80126c4:	d103      	bne.n	80126ce <_printf_common+0xba>
 80126c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ce:	3501      	adds	r5, #1
 80126d0:	e7c3      	b.n	801265a <_printf_common+0x46>
 80126d2:	18e1      	adds	r1, r4, r3
 80126d4:	1c5a      	adds	r2, r3, #1
 80126d6:	2030      	movs	r0, #48	; 0x30
 80126d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80126dc:	4422      	add	r2, r4
 80126de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80126e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80126e6:	3302      	adds	r3, #2
 80126e8:	e7c5      	b.n	8012676 <_printf_common+0x62>
 80126ea:	2301      	movs	r3, #1
 80126ec:	4622      	mov	r2, r4
 80126ee:	4639      	mov	r1, r7
 80126f0:	4630      	mov	r0, r6
 80126f2:	47c0      	blx	r8
 80126f4:	3001      	adds	r0, #1
 80126f6:	d0e6      	beq.n	80126c6 <_printf_common+0xb2>
 80126f8:	f109 0901 	add.w	r9, r9, #1
 80126fc:	e7d8      	b.n	80126b0 <_printf_common+0x9c>
	...

08012700 <_printf_i>:
 8012700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012704:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012708:	460c      	mov	r4, r1
 801270a:	7e09      	ldrb	r1, [r1, #24]
 801270c:	b085      	sub	sp, #20
 801270e:	296e      	cmp	r1, #110	; 0x6e
 8012710:	4617      	mov	r7, r2
 8012712:	4606      	mov	r6, r0
 8012714:	4698      	mov	r8, r3
 8012716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012718:	f000 80b3 	beq.w	8012882 <_printf_i+0x182>
 801271c:	d822      	bhi.n	8012764 <_printf_i+0x64>
 801271e:	2963      	cmp	r1, #99	; 0x63
 8012720:	d036      	beq.n	8012790 <_printf_i+0x90>
 8012722:	d80a      	bhi.n	801273a <_printf_i+0x3a>
 8012724:	2900      	cmp	r1, #0
 8012726:	f000 80b9 	beq.w	801289c <_printf_i+0x19c>
 801272a:	2958      	cmp	r1, #88	; 0x58
 801272c:	f000 8083 	beq.w	8012836 <_printf_i+0x136>
 8012730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012734:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012738:	e032      	b.n	80127a0 <_printf_i+0xa0>
 801273a:	2964      	cmp	r1, #100	; 0x64
 801273c:	d001      	beq.n	8012742 <_printf_i+0x42>
 801273e:	2969      	cmp	r1, #105	; 0x69
 8012740:	d1f6      	bne.n	8012730 <_printf_i+0x30>
 8012742:	6820      	ldr	r0, [r4, #0]
 8012744:	6813      	ldr	r3, [r2, #0]
 8012746:	0605      	lsls	r5, r0, #24
 8012748:	f103 0104 	add.w	r1, r3, #4
 801274c:	d52a      	bpl.n	80127a4 <_printf_i+0xa4>
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	6011      	str	r1, [r2, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	da03      	bge.n	801275e <_printf_i+0x5e>
 8012756:	222d      	movs	r2, #45	; 0x2d
 8012758:	425b      	negs	r3, r3
 801275a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801275e:	486f      	ldr	r0, [pc, #444]	; (801291c <_printf_i+0x21c>)
 8012760:	220a      	movs	r2, #10
 8012762:	e039      	b.n	80127d8 <_printf_i+0xd8>
 8012764:	2973      	cmp	r1, #115	; 0x73
 8012766:	f000 809d 	beq.w	80128a4 <_printf_i+0x1a4>
 801276a:	d808      	bhi.n	801277e <_printf_i+0x7e>
 801276c:	296f      	cmp	r1, #111	; 0x6f
 801276e:	d020      	beq.n	80127b2 <_printf_i+0xb2>
 8012770:	2970      	cmp	r1, #112	; 0x70
 8012772:	d1dd      	bne.n	8012730 <_printf_i+0x30>
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	f043 0320 	orr.w	r3, r3, #32
 801277a:	6023      	str	r3, [r4, #0]
 801277c:	e003      	b.n	8012786 <_printf_i+0x86>
 801277e:	2975      	cmp	r1, #117	; 0x75
 8012780:	d017      	beq.n	80127b2 <_printf_i+0xb2>
 8012782:	2978      	cmp	r1, #120	; 0x78
 8012784:	d1d4      	bne.n	8012730 <_printf_i+0x30>
 8012786:	2378      	movs	r3, #120	; 0x78
 8012788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801278c:	4864      	ldr	r0, [pc, #400]	; (8012920 <_printf_i+0x220>)
 801278e:	e055      	b.n	801283c <_printf_i+0x13c>
 8012790:	6813      	ldr	r3, [r2, #0]
 8012792:	1d19      	adds	r1, r3, #4
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	6011      	str	r1, [r2, #0]
 8012798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801279c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80127a0:	2301      	movs	r3, #1
 80127a2:	e08c      	b.n	80128be <_printf_i+0x1be>
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	6011      	str	r1, [r2, #0]
 80127a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80127ac:	bf18      	it	ne
 80127ae:	b21b      	sxthne	r3, r3
 80127b0:	e7cf      	b.n	8012752 <_printf_i+0x52>
 80127b2:	6813      	ldr	r3, [r2, #0]
 80127b4:	6825      	ldr	r5, [r4, #0]
 80127b6:	1d18      	adds	r0, r3, #4
 80127b8:	6010      	str	r0, [r2, #0]
 80127ba:	0628      	lsls	r0, r5, #24
 80127bc:	d501      	bpl.n	80127c2 <_printf_i+0xc2>
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	e002      	b.n	80127c8 <_printf_i+0xc8>
 80127c2:	0668      	lsls	r0, r5, #25
 80127c4:	d5fb      	bpl.n	80127be <_printf_i+0xbe>
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	4854      	ldr	r0, [pc, #336]	; (801291c <_printf_i+0x21c>)
 80127ca:	296f      	cmp	r1, #111	; 0x6f
 80127cc:	bf14      	ite	ne
 80127ce:	220a      	movne	r2, #10
 80127d0:	2208      	moveq	r2, #8
 80127d2:	2100      	movs	r1, #0
 80127d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127d8:	6865      	ldr	r5, [r4, #4]
 80127da:	60a5      	str	r5, [r4, #8]
 80127dc:	2d00      	cmp	r5, #0
 80127de:	f2c0 8095 	blt.w	801290c <_printf_i+0x20c>
 80127e2:	6821      	ldr	r1, [r4, #0]
 80127e4:	f021 0104 	bic.w	r1, r1, #4
 80127e8:	6021      	str	r1, [r4, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d13d      	bne.n	801286a <_printf_i+0x16a>
 80127ee:	2d00      	cmp	r5, #0
 80127f0:	f040 808e 	bne.w	8012910 <_printf_i+0x210>
 80127f4:	4665      	mov	r5, ip
 80127f6:	2a08      	cmp	r2, #8
 80127f8:	d10b      	bne.n	8012812 <_printf_i+0x112>
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	07db      	lsls	r3, r3, #31
 80127fe:	d508      	bpl.n	8012812 <_printf_i+0x112>
 8012800:	6923      	ldr	r3, [r4, #16]
 8012802:	6862      	ldr	r2, [r4, #4]
 8012804:	429a      	cmp	r2, r3
 8012806:	bfde      	ittt	le
 8012808:	2330      	movle	r3, #48	; 0x30
 801280a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801280e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012812:	ebac 0305 	sub.w	r3, ip, r5
 8012816:	6123      	str	r3, [r4, #16]
 8012818:	f8cd 8000 	str.w	r8, [sp]
 801281c:	463b      	mov	r3, r7
 801281e:	aa03      	add	r2, sp, #12
 8012820:	4621      	mov	r1, r4
 8012822:	4630      	mov	r0, r6
 8012824:	f7ff fef6 	bl	8012614 <_printf_common>
 8012828:	3001      	adds	r0, #1
 801282a:	d14d      	bne.n	80128c8 <_printf_i+0x1c8>
 801282c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012830:	b005      	add	sp, #20
 8012832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012836:	4839      	ldr	r0, [pc, #228]	; (801291c <_printf_i+0x21c>)
 8012838:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801283c:	6813      	ldr	r3, [r2, #0]
 801283e:	6821      	ldr	r1, [r4, #0]
 8012840:	1d1d      	adds	r5, r3, #4
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	6015      	str	r5, [r2, #0]
 8012846:	060a      	lsls	r2, r1, #24
 8012848:	d50b      	bpl.n	8012862 <_printf_i+0x162>
 801284a:	07ca      	lsls	r2, r1, #31
 801284c:	bf44      	itt	mi
 801284e:	f041 0120 	orrmi.w	r1, r1, #32
 8012852:	6021      	strmi	r1, [r4, #0]
 8012854:	b91b      	cbnz	r3, 801285e <_printf_i+0x15e>
 8012856:	6822      	ldr	r2, [r4, #0]
 8012858:	f022 0220 	bic.w	r2, r2, #32
 801285c:	6022      	str	r2, [r4, #0]
 801285e:	2210      	movs	r2, #16
 8012860:	e7b7      	b.n	80127d2 <_printf_i+0xd2>
 8012862:	064d      	lsls	r5, r1, #25
 8012864:	bf48      	it	mi
 8012866:	b29b      	uxthmi	r3, r3
 8012868:	e7ef      	b.n	801284a <_printf_i+0x14a>
 801286a:	4665      	mov	r5, ip
 801286c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012870:	fb02 3311 	mls	r3, r2, r1, r3
 8012874:	5cc3      	ldrb	r3, [r0, r3]
 8012876:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801287a:	460b      	mov	r3, r1
 801287c:	2900      	cmp	r1, #0
 801287e:	d1f5      	bne.n	801286c <_printf_i+0x16c>
 8012880:	e7b9      	b.n	80127f6 <_printf_i+0xf6>
 8012882:	6813      	ldr	r3, [r2, #0]
 8012884:	6825      	ldr	r5, [r4, #0]
 8012886:	6961      	ldr	r1, [r4, #20]
 8012888:	1d18      	adds	r0, r3, #4
 801288a:	6010      	str	r0, [r2, #0]
 801288c:	0628      	lsls	r0, r5, #24
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	d501      	bpl.n	8012896 <_printf_i+0x196>
 8012892:	6019      	str	r1, [r3, #0]
 8012894:	e002      	b.n	801289c <_printf_i+0x19c>
 8012896:	066a      	lsls	r2, r5, #25
 8012898:	d5fb      	bpl.n	8012892 <_printf_i+0x192>
 801289a:	8019      	strh	r1, [r3, #0]
 801289c:	2300      	movs	r3, #0
 801289e:	6123      	str	r3, [r4, #16]
 80128a0:	4665      	mov	r5, ip
 80128a2:	e7b9      	b.n	8012818 <_printf_i+0x118>
 80128a4:	6813      	ldr	r3, [r2, #0]
 80128a6:	1d19      	adds	r1, r3, #4
 80128a8:	6011      	str	r1, [r2, #0]
 80128aa:	681d      	ldr	r5, [r3, #0]
 80128ac:	6862      	ldr	r2, [r4, #4]
 80128ae:	2100      	movs	r1, #0
 80128b0:	4628      	mov	r0, r5
 80128b2:	f7ed fcc5 	bl	8000240 <memchr>
 80128b6:	b108      	cbz	r0, 80128bc <_printf_i+0x1bc>
 80128b8:	1b40      	subs	r0, r0, r5
 80128ba:	6060      	str	r0, [r4, #4]
 80128bc:	6863      	ldr	r3, [r4, #4]
 80128be:	6123      	str	r3, [r4, #16]
 80128c0:	2300      	movs	r3, #0
 80128c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128c6:	e7a7      	b.n	8012818 <_printf_i+0x118>
 80128c8:	6923      	ldr	r3, [r4, #16]
 80128ca:	462a      	mov	r2, r5
 80128cc:	4639      	mov	r1, r7
 80128ce:	4630      	mov	r0, r6
 80128d0:	47c0      	blx	r8
 80128d2:	3001      	adds	r0, #1
 80128d4:	d0aa      	beq.n	801282c <_printf_i+0x12c>
 80128d6:	6823      	ldr	r3, [r4, #0]
 80128d8:	079b      	lsls	r3, r3, #30
 80128da:	d413      	bmi.n	8012904 <_printf_i+0x204>
 80128dc:	68e0      	ldr	r0, [r4, #12]
 80128de:	9b03      	ldr	r3, [sp, #12]
 80128e0:	4298      	cmp	r0, r3
 80128e2:	bfb8      	it	lt
 80128e4:	4618      	movlt	r0, r3
 80128e6:	e7a3      	b.n	8012830 <_printf_i+0x130>
 80128e8:	2301      	movs	r3, #1
 80128ea:	464a      	mov	r2, r9
 80128ec:	4639      	mov	r1, r7
 80128ee:	4630      	mov	r0, r6
 80128f0:	47c0      	blx	r8
 80128f2:	3001      	adds	r0, #1
 80128f4:	d09a      	beq.n	801282c <_printf_i+0x12c>
 80128f6:	3501      	adds	r5, #1
 80128f8:	68e3      	ldr	r3, [r4, #12]
 80128fa:	9a03      	ldr	r2, [sp, #12]
 80128fc:	1a9b      	subs	r3, r3, r2
 80128fe:	42ab      	cmp	r3, r5
 8012900:	dcf2      	bgt.n	80128e8 <_printf_i+0x1e8>
 8012902:	e7eb      	b.n	80128dc <_printf_i+0x1dc>
 8012904:	2500      	movs	r5, #0
 8012906:	f104 0919 	add.w	r9, r4, #25
 801290a:	e7f5      	b.n	80128f8 <_printf_i+0x1f8>
 801290c:	2b00      	cmp	r3, #0
 801290e:	d1ac      	bne.n	801286a <_printf_i+0x16a>
 8012910:	7803      	ldrb	r3, [r0, #0]
 8012912:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012916:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801291a:	e76c      	b.n	80127f6 <_printf_i+0xf6>
 801291c:	08015ed9 	.word	0x08015ed9
 8012920:	08015eea 	.word	0x08015eea

08012924 <_sbrk_r>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	4c06      	ldr	r4, [pc, #24]	; (8012940 <_sbrk_r+0x1c>)
 8012928:	2300      	movs	r3, #0
 801292a:	4605      	mov	r5, r0
 801292c:	4608      	mov	r0, r1
 801292e:	6023      	str	r3, [r4, #0]
 8012930:	f7ff fa96 	bl	8011e60 <_sbrk>
 8012934:	1c43      	adds	r3, r0, #1
 8012936:	d102      	bne.n	801293e <_sbrk_r+0x1a>
 8012938:	6823      	ldr	r3, [r4, #0]
 801293a:	b103      	cbz	r3, 801293e <_sbrk_r+0x1a>
 801293c:	602b      	str	r3, [r5, #0]
 801293e:	bd38      	pop	{r3, r4, r5, pc}
 8012940:	2000a848 	.word	0x2000a848

08012944 <__sread>:
 8012944:	b510      	push	{r4, lr}
 8012946:	460c      	mov	r4, r1
 8012948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801294c:	f000 fa48 	bl	8012de0 <_read_r>
 8012950:	2800      	cmp	r0, #0
 8012952:	bfab      	itete	ge
 8012954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012956:	89a3      	ldrhlt	r3, [r4, #12]
 8012958:	181b      	addge	r3, r3, r0
 801295a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801295e:	bfac      	ite	ge
 8012960:	6563      	strge	r3, [r4, #84]	; 0x54
 8012962:	81a3      	strhlt	r3, [r4, #12]
 8012964:	bd10      	pop	{r4, pc}

08012966 <__swrite>:
 8012966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801296a:	461f      	mov	r7, r3
 801296c:	898b      	ldrh	r3, [r1, #12]
 801296e:	05db      	lsls	r3, r3, #23
 8012970:	4605      	mov	r5, r0
 8012972:	460c      	mov	r4, r1
 8012974:	4616      	mov	r6, r2
 8012976:	d505      	bpl.n	8012984 <__swrite+0x1e>
 8012978:	2302      	movs	r3, #2
 801297a:	2200      	movs	r2, #0
 801297c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012980:	f000 f9b6 	bl	8012cf0 <_lseek_r>
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801298a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801298e:	81a3      	strh	r3, [r4, #12]
 8012990:	4632      	mov	r2, r6
 8012992:	463b      	mov	r3, r7
 8012994:	4628      	mov	r0, r5
 8012996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801299a:	f000 b869 	b.w	8012a70 <_write_r>

0801299e <__sseek>:
 801299e:	b510      	push	{r4, lr}
 80129a0:	460c      	mov	r4, r1
 80129a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129a6:	f000 f9a3 	bl	8012cf0 <_lseek_r>
 80129aa:	1c43      	adds	r3, r0, #1
 80129ac:	89a3      	ldrh	r3, [r4, #12]
 80129ae:	bf15      	itete	ne
 80129b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80129b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129ba:	81a3      	strheq	r3, [r4, #12]
 80129bc:	bf18      	it	ne
 80129be:	81a3      	strhne	r3, [r4, #12]
 80129c0:	bd10      	pop	{r4, pc}

080129c2 <__sclose>:
 80129c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c6:	f000 b8d3 	b.w	8012b70 <_close_r>
	...

080129cc <__swbuf_r>:
 80129cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ce:	460e      	mov	r6, r1
 80129d0:	4614      	mov	r4, r2
 80129d2:	4605      	mov	r5, r0
 80129d4:	b118      	cbz	r0, 80129de <__swbuf_r+0x12>
 80129d6:	6983      	ldr	r3, [r0, #24]
 80129d8:	b90b      	cbnz	r3, 80129de <__swbuf_r+0x12>
 80129da:	f7ff fba1 	bl	8012120 <__sinit>
 80129de:	4b21      	ldr	r3, [pc, #132]	; (8012a64 <__swbuf_r+0x98>)
 80129e0:	429c      	cmp	r4, r3
 80129e2:	d12a      	bne.n	8012a3a <__swbuf_r+0x6e>
 80129e4:	686c      	ldr	r4, [r5, #4]
 80129e6:	69a3      	ldr	r3, [r4, #24]
 80129e8:	60a3      	str	r3, [r4, #8]
 80129ea:	89a3      	ldrh	r3, [r4, #12]
 80129ec:	071a      	lsls	r2, r3, #28
 80129ee:	d52e      	bpl.n	8012a4e <__swbuf_r+0x82>
 80129f0:	6923      	ldr	r3, [r4, #16]
 80129f2:	b363      	cbz	r3, 8012a4e <__swbuf_r+0x82>
 80129f4:	6923      	ldr	r3, [r4, #16]
 80129f6:	6820      	ldr	r0, [r4, #0]
 80129f8:	1ac0      	subs	r0, r0, r3
 80129fa:	6963      	ldr	r3, [r4, #20]
 80129fc:	b2f6      	uxtb	r6, r6
 80129fe:	4283      	cmp	r3, r0
 8012a00:	4637      	mov	r7, r6
 8012a02:	dc04      	bgt.n	8012a0e <__swbuf_r+0x42>
 8012a04:	4621      	mov	r1, r4
 8012a06:	4628      	mov	r0, r5
 8012a08:	f000 f948 	bl	8012c9c <_fflush_r>
 8012a0c:	bb28      	cbnz	r0, 8012a5a <__swbuf_r+0x8e>
 8012a0e:	68a3      	ldr	r3, [r4, #8]
 8012a10:	3b01      	subs	r3, #1
 8012a12:	60a3      	str	r3, [r4, #8]
 8012a14:	6823      	ldr	r3, [r4, #0]
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	6022      	str	r2, [r4, #0]
 8012a1a:	701e      	strb	r6, [r3, #0]
 8012a1c:	6963      	ldr	r3, [r4, #20]
 8012a1e:	3001      	adds	r0, #1
 8012a20:	4283      	cmp	r3, r0
 8012a22:	d004      	beq.n	8012a2e <__swbuf_r+0x62>
 8012a24:	89a3      	ldrh	r3, [r4, #12]
 8012a26:	07db      	lsls	r3, r3, #31
 8012a28:	d519      	bpl.n	8012a5e <__swbuf_r+0x92>
 8012a2a:	2e0a      	cmp	r6, #10
 8012a2c:	d117      	bne.n	8012a5e <__swbuf_r+0x92>
 8012a2e:	4621      	mov	r1, r4
 8012a30:	4628      	mov	r0, r5
 8012a32:	f000 f933 	bl	8012c9c <_fflush_r>
 8012a36:	b190      	cbz	r0, 8012a5e <__swbuf_r+0x92>
 8012a38:	e00f      	b.n	8012a5a <__swbuf_r+0x8e>
 8012a3a:	4b0b      	ldr	r3, [pc, #44]	; (8012a68 <__swbuf_r+0x9c>)
 8012a3c:	429c      	cmp	r4, r3
 8012a3e:	d101      	bne.n	8012a44 <__swbuf_r+0x78>
 8012a40:	68ac      	ldr	r4, [r5, #8]
 8012a42:	e7d0      	b.n	80129e6 <__swbuf_r+0x1a>
 8012a44:	4b09      	ldr	r3, [pc, #36]	; (8012a6c <__swbuf_r+0xa0>)
 8012a46:	429c      	cmp	r4, r3
 8012a48:	bf08      	it	eq
 8012a4a:	68ec      	ldreq	r4, [r5, #12]
 8012a4c:	e7cb      	b.n	80129e6 <__swbuf_r+0x1a>
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4628      	mov	r0, r5
 8012a52:	f000 f81f 	bl	8012a94 <__swsetup_r>
 8012a56:	2800      	cmp	r0, #0
 8012a58:	d0cc      	beq.n	80129f4 <__swbuf_r+0x28>
 8012a5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012a5e:	4638      	mov	r0, r7
 8012a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a62:	bf00      	nop
 8012a64:	08015e88 	.word	0x08015e88
 8012a68:	08015ea8 	.word	0x08015ea8
 8012a6c:	08015e68 	.word	0x08015e68

08012a70 <_write_r>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	4c07      	ldr	r4, [pc, #28]	; (8012a90 <_write_r+0x20>)
 8012a74:	4605      	mov	r5, r0
 8012a76:	4608      	mov	r0, r1
 8012a78:	4611      	mov	r1, r2
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	6022      	str	r2, [r4, #0]
 8012a7e:	461a      	mov	r2, r3
 8012a80:	f7ff f99d 	bl	8011dbe <_write>
 8012a84:	1c43      	adds	r3, r0, #1
 8012a86:	d102      	bne.n	8012a8e <_write_r+0x1e>
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	b103      	cbz	r3, 8012a8e <_write_r+0x1e>
 8012a8c:	602b      	str	r3, [r5, #0]
 8012a8e:	bd38      	pop	{r3, r4, r5, pc}
 8012a90:	2000a848 	.word	0x2000a848

08012a94 <__swsetup_r>:
 8012a94:	4b32      	ldr	r3, [pc, #200]	; (8012b60 <__swsetup_r+0xcc>)
 8012a96:	b570      	push	{r4, r5, r6, lr}
 8012a98:	681d      	ldr	r5, [r3, #0]
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	460c      	mov	r4, r1
 8012a9e:	b125      	cbz	r5, 8012aaa <__swsetup_r+0x16>
 8012aa0:	69ab      	ldr	r3, [r5, #24]
 8012aa2:	b913      	cbnz	r3, 8012aaa <__swsetup_r+0x16>
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	f7ff fb3b 	bl	8012120 <__sinit>
 8012aaa:	4b2e      	ldr	r3, [pc, #184]	; (8012b64 <__swsetup_r+0xd0>)
 8012aac:	429c      	cmp	r4, r3
 8012aae:	d10f      	bne.n	8012ad0 <__swsetup_r+0x3c>
 8012ab0:	686c      	ldr	r4, [r5, #4]
 8012ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	0715      	lsls	r5, r2, #28
 8012aba:	d42c      	bmi.n	8012b16 <__swsetup_r+0x82>
 8012abc:	06d0      	lsls	r0, r2, #27
 8012abe:	d411      	bmi.n	8012ae4 <__swsetup_r+0x50>
 8012ac0:	2209      	movs	r2, #9
 8012ac2:	6032      	str	r2, [r6, #0]
 8012ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ac8:	81a3      	strh	r3, [r4, #12]
 8012aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ace:	e03e      	b.n	8012b4e <__swsetup_r+0xba>
 8012ad0:	4b25      	ldr	r3, [pc, #148]	; (8012b68 <__swsetup_r+0xd4>)
 8012ad2:	429c      	cmp	r4, r3
 8012ad4:	d101      	bne.n	8012ada <__swsetup_r+0x46>
 8012ad6:	68ac      	ldr	r4, [r5, #8]
 8012ad8:	e7eb      	b.n	8012ab2 <__swsetup_r+0x1e>
 8012ada:	4b24      	ldr	r3, [pc, #144]	; (8012b6c <__swsetup_r+0xd8>)
 8012adc:	429c      	cmp	r4, r3
 8012ade:	bf08      	it	eq
 8012ae0:	68ec      	ldreq	r4, [r5, #12]
 8012ae2:	e7e6      	b.n	8012ab2 <__swsetup_r+0x1e>
 8012ae4:	0751      	lsls	r1, r2, #29
 8012ae6:	d512      	bpl.n	8012b0e <__swsetup_r+0x7a>
 8012ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aea:	b141      	cbz	r1, 8012afe <__swsetup_r+0x6a>
 8012aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012af0:	4299      	cmp	r1, r3
 8012af2:	d002      	beq.n	8012afa <__swsetup_r+0x66>
 8012af4:	4630      	mov	r0, r6
 8012af6:	f7ff fba5 	bl	8012244 <_free_r>
 8012afa:	2300      	movs	r3, #0
 8012afc:	6363      	str	r3, [r4, #52]	; 0x34
 8012afe:	89a3      	ldrh	r3, [r4, #12]
 8012b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b04:	81a3      	strh	r3, [r4, #12]
 8012b06:	2300      	movs	r3, #0
 8012b08:	6063      	str	r3, [r4, #4]
 8012b0a:	6923      	ldr	r3, [r4, #16]
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	f043 0308 	orr.w	r3, r3, #8
 8012b14:	81a3      	strh	r3, [r4, #12]
 8012b16:	6923      	ldr	r3, [r4, #16]
 8012b18:	b94b      	cbnz	r3, 8012b2e <__swsetup_r+0x9a>
 8012b1a:	89a3      	ldrh	r3, [r4, #12]
 8012b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b24:	d003      	beq.n	8012b2e <__swsetup_r+0x9a>
 8012b26:	4621      	mov	r1, r4
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f000 f917 	bl	8012d5c <__smakebuf_r>
 8012b2e:	89a2      	ldrh	r2, [r4, #12]
 8012b30:	f012 0301 	ands.w	r3, r2, #1
 8012b34:	d00c      	beq.n	8012b50 <__swsetup_r+0xbc>
 8012b36:	2300      	movs	r3, #0
 8012b38:	60a3      	str	r3, [r4, #8]
 8012b3a:	6963      	ldr	r3, [r4, #20]
 8012b3c:	425b      	negs	r3, r3
 8012b3e:	61a3      	str	r3, [r4, #24]
 8012b40:	6923      	ldr	r3, [r4, #16]
 8012b42:	b953      	cbnz	r3, 8012b5a <__swsetup_r+0xc6>
 8012b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012b4c:	d1ba      	bne.n	8012ac4 <__swsetup_r+0x30>
 8012b4e:	bd70      	pop	{r4, r5, r6, pc}
 8012b50:	0792      	lsls	r2, r2, #30
 8012b52:	bf58      	it	pl
 8012b54:	6963      	ldrpl	r3, [r4, #20]
 8012b56:	60a3      	str	r3, [r4, #8]
 8012b58:	e7f2      	b.n	8012b40 <__swsetup_r+0xac>
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	e7f7      	b.n	8012b4e <__swsetup_r+0xba>
 8012b5e:	bf00      	nop
 8012b60:	20000020 	.word	0x20000020
 8012b64:	08015e88 	.word	0x08015e88
 8012b68:	08015ea8 	.word	0x08015ea8
 8012b6c:	08015e68 	.word	0x08015e68

08012b70 <_close_r>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4c06      	ldr	r4, [pc, #24]	; (8012b8c <_close_r+0x1c>)
 8012b74:	2300      	movs	r3, #0
 8012b76:	4605      	mov	r5, r0
 8012b78:	4608      	mov	r0, r1
 8012b7a:	6023      	str	r3, [r4, #0]
 8012b7c:	f7ff f93b 	bl	8011df6 <_close>
 8012b80:	1c43      	adds	r3, r0, #1
 8012b82:	d102      	bne.n	8012b8a <_close_r+0x1a>
 8012b84:	6823      	ldr	r3, [r4, #0]
 8012b86:	b103      	cbz	r3, 8012b8a <_close_r+0x1a>
 8012b88:	602b      	str	r3, [r5, #0]
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	2000a848 	.word	0x2000a848

08012b90 <__sflush_r>:
 8012b90:	898a      	ldrh	r2, [r1, #12]
 8012b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b96:	4605      	mov	r5, r0
 8012b98:	0710      	lsls	r0, r2, #28
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	d458      	bmi.n	8012c50 <__sflush_r+0xc0>
 8012b9e:	684b      	ldr	r3, [r1, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	dc05      	bgt.n	8012bb0 <__sflush_r+0x20>
 8012ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	dc02      	bgt.n	8012bb0 <__sflush_r+0x20>
 8012baa:	2000      	movs	r0, #0
 8012bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bb2:	2e00      	cmp	r6, #0
 8012bb4:	d0f9      	beq.n	8012baa <__sflush_r+0x1a>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bbc:	682f      	ldr	r7, [r5, #0]
 8012bbe:	6a21      	ldr	r1, [r4, #32]
 8012bc0:	602b      	str	r3, [r5, #0]
 8012bc2:	d032      	beq.n	8012c2a <__sflush_r+0x9a>
 8012bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	075a      	lsls	r2, r3, #29
 8012bca:	d505      	bpl.n	8012bd8 <__sflush_r+0x48>
 8012bcc:	6863      	ldr	r3, [r4, #4]
 8012bce:	1ac0      	subs	r0, r0, r3
 8012bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bd2:	b10b      	cbz	r3, 8012bd8 <__sflush_r+0x48>
 8012bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012bd6:	1ac0      	subs	r0, r0, r3
 8012bd8:	2300      	movs	r3, #0
 8012bda:	4602      	mov	r2, r0
 8012bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bde:	6a21      	ldr	r1, [r4, #32]
 8012be0:	4628      	mov	r0, r5
 8012be2:	47b0      	blx	r6
 8012be4:	1c43      	adds	r3, r0, #1
 8012be6:	89a3      	ldrh	r3, [r4, #12]
 8012be8:	d106      	bne.n	8012bf8 <__sflush_r+0x68>
 8012bea:	6829      	ldr	r1, [r5, #0]
 8012bec:	291d      	cmp	r1, #29
 8012bee:	d848      	bhi.n	8012c82 <__sflush_r+0xf2>
 8012bf0:	4a29      	ldr	r2, [pc, #164]	; (8012c98 <__sflush_r+0x108>)
 8012bf2:	40ca      	lsrs	r2, r1
 8012bf4:	07d6      	lsls	r6, r2, #31
 8012bf6:	d544      	bpl.n	8012c82 <__sflush_r+0xf2>
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	6062      	str	r2, [r4, #4]
 8012bfc:	04d9      	lsls	r1, r3, #19
 8012bfe:	6922      	ldr	r2, [r4, #16]
 8012c00:	6022      	str	r2, [r4, #0]
 8012c02:	d504      	bpl.n	8012c0e <__sflush_r+0x7e>
 8012c04:	1c42      	adds	r2, r0, #1
 8012c06:	d101      	bne.n	8012c0c <__sflush_r+0x7c>
 8012c08:	682b      	ldr	r3, [r5, #0]
 8012c0a:	b903      	cbnz	r3, 8012c0e <__sflush_r+0x7e>
 8012c0c:	6560      	str	r0, [r4, #84]	; 0x54
 8012c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c10:	602f      	str	r7, [r5, #0]
 8012c12:	2900      	cmp	r1, #0
 8012c14:	d0c9      	beq.n	8012baa <__sflush_r+0x1a>
 8012c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	d002      	beq.n	8012c24 <__sflush_r+0x94>
 8012c1e:	4628      	mov	r0, r5
 8012c20:	f7ff fb10 	bl	8012244 <_free_r>
 8012c24:	2000      	movs	r0, #0
 8012c26:	6360      	str	r0, [r4, #52]	; 0x34
 8012c28:	e7c0      	b.n	8012bac <__sflush_r+0x1c>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	4628      	mov	r0, r5
 8012c2e:	47b0      	blx	r6
 8012c30:	1c41      	adds	r1, r0, #1
 8012c32:	d1c8      	bne.n	8012bc6 <__sflush_r+0x36>
 8012c34:	682b      	ldr	r3, [r5, #0]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d0c5      	beq.n	8012bc6 <__sflush_r+0x36>
 8012c3a:	2b1d      	cmp	r3, #29
 8012c3c:	d001      	beq.n	8012c42 <__sflush_r+0xb2>
 8012c3e:	2b16      	cmp	r3, #22
 8012c40:	d101      	bne.n	8012c46 <__sflush_r+0xb6>
 8012c42:	602f      	str	r7, [r5, #0]
 8012c44:	e7b1      	b.n	8012baa <__sflush_r+0x1a>
 8012c46:	89a3      	ldrh	r3, [r4, #12]
 8012c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c4c:	81a3      	strh	r3, [r4, #12]
 8012c4e:	e7ad      	b.n	8012bac <__sflush_r+0x1c>
 8012c50:	690f      	ldr	r7, [r1, #16]
 8012c52:	2f00      	cmp	r7, #0
 8012c54:	d0a9      	beq.n	8012baa <__sflush_r+0x1a>
 8012c56:	0793      	lsls	r3, r2, #30
 8012c58:	680e      	ldr	r6, [r1, #0]
 8012c5a:	bf08      	it	eq
 8012c5c:	694b      	ldreq	r3, [r1, #20]
 8012c5e:	600f      	str	r7, [r1, #0]
 8012c60:	bf18      	it	ne
 8012c62:	2300      	movne	r3, #0
 8012c64:	eba6 0807 	sub.w	r8, r6, r7
 8012c68:	608b      	str	r3, [r1, #8]
 8012c6a:	f1b8 0f00 	cmp.w	r8, #0
 8012c6e:	dd9c      	ble.n	8012baa <__sflush_r+0x1a>
 8012c70:	4643      	mov	r3, r8
 8012c72:	463a      	mov	r2, r7
 8012c74:	6a21      	ldr	r1, [r4, #32]
 8012c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c78:	4628      	mov	r0, r5
 8012c7a:	47b0      	blx	r6
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	dc06      	bgt.n	8012c8e <__sflush_r+0xfe>
 8012c80:	89a3      	ldrh	r3, [r4, #12]
 8012c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c86:	81a3      	strh	r3, [r4, #12]
 8012c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c8c:	e78e      	b.n	8012bac <__sflush_r+0x1c>
 8012c8e:	4407      	add	r7, r0
 8012c90:	eba8 0800 	sub.w	r8, r8, r0
 8012c94:	e7e9      	b.n	8012c6a <__sflush_r+0xda>
 8012c96:	bf00      	nop
 8012c98:	20400001 	.word	0x20400001

08012c9c <_fflush_r>:
 8012c9c:	b538      	push	{r3, r4, r5, lr}
 8012c9e:	690b      	ldr	r3, [r1, #16]
 8012ca0:	4605      	mov	r5, r0
 8012ca2:	460c      	mov	r4, r1
 8012ca4:	b1db      	cbz	r3, 8012cde <_fflush_r+0x42>
 8012ca6:	b118      	cbz	r0, 8012cb0 <_fflush_r+0x14>
 8012ca8:	6983      	ldr	r3, [r0, #24]
 8012caa:	b90b      	cbnz	r3, 8012cb0 <_fflush_r+0x14>
 8012cac:	f7ff fa38 	bl	8012120 <__sinit>
 8012cb0:	4b0c      	ldr	r3, [pc, #48]	; (8012ce4 <_fflush_r+0x48>)
 8012cb2:	429c      	cmp	r4, r3
 8012cb4:	d109      	bne.n	8012cca <_fflush_r+0x2e>
 8012cb6:	686c      	ldr	r4, [r5, #4]
 8012cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cbc:	b17b      	cbz	r3, 8012cde <_fflush_r+0x42>
 8012cbe:	4621      	mov	r1, r4
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cc6:	f7ff bf63 	b.w	8012b90 <__sflush_r>
 8012cca:	4b07      	ldr	r3, [pc, #28]	; (8012ce8 <_fflush_r+0x4c>)
 8012ccc:	429c      	cmp	r4, r3
 8012cce:	d101      	bne.n	8012cd4 <_fflush_r+0x38>
 8012cd0:	68ac      	ldr	r4, [r5, #8]
 8012cd2:	e7f1      	b.n	8012cb8 <_fflush_r+0x1c>
 8012cd4:	4b05      	ldr	r3, [pc, #20]	; (8012cec <_fflush_r+0x50>)
 8012cd6:	429c      	cmp	r4, r3
 8012cd8:	bf08      	it	eq
 8012cda:	68ec      	ldreq	r4, [r5, #12]
 8012cdc:	e7ec      	b.n	8012cb8 <_fflush_r+0x1c>
 8012cde:	2000      	movs	r0, #0
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
 8012ce2:	bf00      	nop
 8012ce4:	08015e88 	.word	0x08015e88
 8012ce8:	08015ea8 	.word	0x08015ea8
 8012cec:	08015e68 	.word	0x08015e68

08012cf0 <_lseek_r>:
 8012cf0:	b538      	push	{r3, r4, r5, lr}
 8012cf2:	4c07      	ldr	r4, [pc, #28]	; (8012d10 <_lseek_r+0x20>)
 8012cf4:	4605      	mov	r5, r0
 8012cf6:	4608      	mov	r0, r1
 8012cf8:	4611      	mov	r1, r2
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	6022      	str	r2, [r4, #0]
 8012cfe:	461a      	mov	r2, r3
 8012d00:	f7ff f8a0 	bl	8011e44 <_lseek>
 8012d04:	1c43      	adds	r3, r0, #1
 8012d06:	d102      	bne.n	8012d0e <_lseek_r+0x1e>
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	b103      	cbz	r3, 8012d0e <_lseek_r+0x1e>
 8012d0c:	602b      	str	r3, [r5, #0]
 8012d0e:	bd38      	pop	{r3, r4, r5, pc}
 8012d10:	2000a848 	.word	0x2000a848

08012d14 <__swhatbuf_r>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	460e      	mov	r6, r1
 8012d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	b096      	sub	sp, #88	; 0x58
 8012d20:	4614      	mov	r4, r2
 8012d22:	461d      	mov	r5, r3
 8012d24:	da07      	bge.n	8012d36 <__swhatbuf_r+0x22>
 8012d26:	2300      	movs	r3, #0
 8012d28:	602b      	str	r3, [r5, #0]
 8012d2a:	89b3      	ldrh	r3, [r6, #12]
 8012d2c:	061a      	lsls	r2, r3, #24
 8012d2e:	d410      	bmi.n	8012d52 <__swhatbuf_r+0x3e>
 8012d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d34:	e00e      	b.n	8012d54 <__swhatbuf_r+0x40>
 8012d36:	466a      	mov	r2, sp
 8012d38:	f000 f864 	bl	8012e04 <_fstat_r>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	dbf2      	blt.n	8012d26 <__swhatbuf_r+0x12>
 8012d40:	9a01      	ldr	r2, [sp, #4]
 8012d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d4a:	425a      	negs	r2, r3
 8012d4c:	415a      	adcs	r2, r3
 8012d4e:	602a      	str	r2, [r5, #0]
 8012d50:	e7ee      	b.n	8012d30 <__swhatbuf_r+0x1c>
 8012d52:	2340      	movs	r3, #64	; 0x40
 8012d54:	2000      	movs	r0, #0
 8012d56:	6023      	str	r3, [r4, #0]
 8012d58:	b016      	add	sp, #88	; 0x58
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}

08012d5c <__smakebuf_r>:
 8012d5c:	898b      	ldrh	r3, [r1, #12]
 8012d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d60:	079d      	lsls	r5, r3, #30
 8012d62:	4606      	mov	r6, r0
 8012d64:	460c      	mov	r4, r1
 8012d66:	d507      	bpl.n	8012d78 <__smakebuf_r+0x1c>
 8012d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d6c:	6023      	str	r3, [r4, #0]
 8012d6e:	6123      	str	r3, [r4, #16]
 8012d70:	2301      	movs	r3, #1
 8012d72:	6163      	str	r3, [r4, #20]
 8012d74:	b002      	add	sp, #8
 8012d76:	bd70      	pop	{r4, r5, r6, pc}
 8012d78:	ab01      	add	r3, sp, #4
 8012d7a:	466a      	mov	r2, sp
 8012d7c:	f7ff ffca 	bl	8012d14 <__swhatbuf_r>
 8012d80:	9900      	ldr	r1, [sp, #0]
 8012d82:	4605      	mov	r5, r0
 8012d84:	4630      	mov	r0, r6
 8012d86:	f7ff faab 	bl	80122e0 <_malloc_r>
 8012d8a:	b948      	cbnz	r0, 8012da0 <__smakebuf_r+0x44>
 8012d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d90:	059a      	lsls	r2, r3, #22
 8012d92:	d4ef      	bmi.n	8012d74 <__smakebuf_r+0x18>
 8012d94:	f023 0303 	bic.w	r3, r3, #3
 8012d98:	f043 0302 	orr.w	r3, r3, #2
 8012d9c:	81a3      	strh	r3, [r4, #12]
 8012d9e:	e7e3      	b.n	8012d68 <__smakebuf_r+0xc>
 8012da0:	4b0d      	ldr	r3, [pc, #52]	; (8012dd8 <__smakebuf_r+0x7c>)
 8012da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012da4:	89a3      	ldrh	r3, [r4, #12]
 8012da6:	6020      	str	r0, [r4, #0]
 8012da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dac:	81a3      	strh	r3, [r4, #12]
 8012dae:	9b00      	ldr	r3, [sp, #0]
 8012db0:	6163      	str	r3, [r4, #20]
 8012db2:	9b01      	ldr	r3, [sp, #4]
 8012db4:	6120      	str	r0, [r4, #16]
 8012db6:	b15b      	cbz	r3, 8012dd0 <__smakebuf_r+0x74>
 8012db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	f000 f833 	bl	8012e28 <_isatty_r>
 8012dc2:	b128      	cbz	r0, 8012dd0 <__smakebuf_r+0x74>
 8012dc4:	89a3      	ldrh	r3, [r4, #12]
 8012dc6:	f023 0303 	bic.w	r3, r3, #3
 8012dca:	f043 0301 	orr.w	r3, r3, #1
 8012dce:	81a3      	strh	r3, [r4, #12]
 8012dd0:	89a3      	ldrh	r3, [r4, #12]
 8012dd2:	431d      	orrs	r5, r3
 8012dd4:	81a5      	strh	r5, [r4, #12]
 8012dd6:	e7cd      	b.n	8012d74 <__smakebuf_r+0x18>
 8012dd8:	080120e9 	.word	0x080120e9

08012ddc <__malloc_lock>:
 8012ddc:	4770      	bx	lr

08012dde <__malloc_unlock>:
 8012dde:	4770      	bx	lr

08012de0 <_read_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4c07      	ldr	r4, [pc, #28]	; (8012e00 <_read_r+0x20>)
 8012de4:	4605      	mov	r5, r0
 8012de6:	4608      	mov	r0, r1
 8012de8:	4611      	mov	r1, r2
 8012dea:	2200      	movs	r2, #0
 8012dec:	6022      	str	r2, [r4, #0]
 8012dee:	461a      	mov	r2, r3
 8012df0:	f7fe ffc8 	bl	8011d84 <_read>
 8012df4:	1c43      	adds	r3, r0, #1
 8012df6:	d102      	bne.n	8012dfe <_read_r+0x1e>
 8012df8:	6823      	ldr	r3, [r4, #0]
 8012dfa:	b103      	cbz	r3, 8012dfe <_read_r+0x1e>
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	bd38      	pop	{r3, r4, r5, pc}
 8012e00:	2000a848 	.word	0x2000a848

08012e04 <_fstat_r>:
 8012e04:	b538      	push	{r3, r4, r5, lr}
 8012e06:	4c07      	ldr	r4, [pc, #28]	; (8012e24 <_fstat_r+0x20>)
 8012e08:	2300      	movs	r3, #0
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	4608      	mov	r0, r1
 8012e0e:	4611      	mov	r1, r2
 8012e10:	6023      	str	r3, [r4, #0]
 8012e12:	f7fe fffc 	bl	8011e0e <_fstat>
 8012e16:	1c43      	adds	r3, r0, #1
 8012e18:	d102      	bne.n	8012e20 <_fstat_r+0x1c>
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	b103      	cbz	r3, 8012e20 <_fstat_r+0x1c>
 8012e1e:	602b      	str	r3, [r5, #0]
 8012e20:	bd38      	pop	{r3, r4, r5, pc}
 8012e22:	bf00      	nop
 8012e24:	2000a848 	.word	0x2000a848

08012e28 <_isatty_r>:
 8012e28:	b538      	push	{r3, r4, r5, lr}
 8012e2a:	4c06      	ldr	r4, [pc, #24]	; (8012e44 <_isatty_r+0x1c>)
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	4605      	mov	r5, r0
 8012e30:	4608      	mov	r0, r1
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	f7fe fffb 	bl	8011e2e <_isatty>
 8012e38:	1c43      	adds	r3, r0, #1
 8012e3a:	d102      	bne.n	8012e42 <_isatty_r+0x1a>
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	b103      	cbz	r3, 8012e42 <_isatty_r+0x1a>
 8012e40:	602b      	str	r3, [r5, #0]
 8012e42:	bd38      	pop	{r3, r4, r5, pc}
 8012e44:	2000a848 	.word	0x2000a848

08012e48 <_init>:
 8012e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e4a:	bf00      	nop
 8012e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e4e:	bc08      	pop	{r3}
 8012e50:	469e      	mov	lr, r3
 8012e52:	4770      	bx	lr

08012e54 <_fini>:
 8012e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e56:	bf00      	nop
 8012e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e5a:	bc08      	pop	{r3}
 8012e5c:	469e      	mov	lr, r3
 8012e5e:	4770      	bx	lr
